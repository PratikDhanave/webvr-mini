PRIM TYPES:

     * ---------------------------------------------------------------------
     * type POINT
     * rendered as WebGL POINT.
 
     * prim.dimensions    = (vec4) [ x, y, z, pointSize (pixels) | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]
     * @param {Prim} the Prim needing geometry.


     * ---------------------------------------------------------------------
     * type POINTCLOUD
     * rendered as WebGL POINT.
     * @param {Prim} the Prim needing geometry. 
     * prim.dimensions    = (vec4) [ x, y, z, pointSize (pixels) | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type LINE
     * rendered as WebGL LINE.
     * @param {Prim} the Prim needing geometry. 
     * prim.dimensions    = (vec4) [ x, y, z, thickness | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type PLANE, OUTERPLANE
     * rendered as WebGL TRIANGLES.
     * @param {Prim} the Prim needing geometry. 
     * prim.dimensions    = (vec4) [ x, y, z, Prim.side ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type INNERPLANE
     * rendered as WebGL TRIANGLES.
     * @param {Prim} the Prim needing geometry. 
     * prim.dimensions    = (vec4) [ x, y, z, Prim.side ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CURVEDPLANE, CUREVEDOUTERPLANE
     * rendered as WebGL TRIANGLES.
     * @param {Prim} the Prim needing geometry. 
     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius | 0 ]
     * curve radius sets the amount of curve by assigning a radius for a circle.
     *
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CURVEDINNERPLANE
     * rendered as WebGL TRIANGLES.
     * @param {Prim} the Prim needing geometry. 
     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius | 0 ]
     * curve radius sets the amount of curve by assigning a radius for a circle.
     *
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type TERRAIN
     * rendered as WebGL TRIANGLES.
     * No curve option.
     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, waterLine | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CIRCLE
     * rendered as WebGL POLY.
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type POLY
     * rendered as WebGL POLYGON.
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CAP
     * rendered as WebGL TRIANGLES.
     * Just a flattened half-sphere.
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type DOME, TOPDOME
     * rendered as WebGL TRIANGLES.
     * Half-sphere.
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type SKYDOME
     * rendered as WebGL TRIANGLES.
     * Half-sphere.
     * Indices are reversed, so texture displays inside by default
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type BOTTOMDOME
     * rendered as WebGL TRIANGLES.
     * half-sphere.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CONE, TOPCONE
     * rendered as WebGL TRIANGLES.
     * startSlice cuts off the cone, and wraps the texture across the top. 
     * endSlize truncates the bottom of the cone, and wraps the texture across the bottom.
     * for a cone with no caps, set startSlice and endSlize to zero.
     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type BOTTOMCONE
     * rendered as WebGL TRIANGLES.
     * startSlice cuts off the cone, and wraps the texture across the top. 
     * endSlize truncates the bottom of the cone, and wraps the texture across the bottom.
     * for a cone with no caps, set startSlice and endSlize to zero.
     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type SPINDLE
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CYLINDER
     * rendered as WebGL TRIANGLES.
     * startSlice cuts off the cylinder, and wraps the texture across the top. 
     * endSlize truncates the bottom of the cylinder, and wraps the texture across the bottom.
     * for an open cylinder with no caps, set startSlice and endSlize to zero.
     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type CAPSULE
     * rendered as WebGL TRIANGLES.
     * a cylinder with two spheres on each end, similar to capped cylinder
     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type ICOSOHEDRON
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type ICOSPHERE
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type ICODOME, TOPICODOME
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type SKYICODOME
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type BOTTOMICODOME
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * type TORUS
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * x, y define width, height of torus.
     * z coordinate is radius of torus.
     *
     * prim.divisions     = (vec3) [ x, y, z ]
     * x is number of rings in torus, y is number of sides, z not used.

     * ---------------------------------------------------------------------
     * type MESH
     * rendered as WebGL TRIANGLES.
     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]
     * prim.divisions     = (vec3) [ x, y, z ]

     * ---------------------------------------------------------------------
     * OTHER PARAMETERS

     * prim.position      = (vec5) [ x, y, z, rounding, | startSlice, endSlice,  ]
     * prim.acceleration  = (vec3) [ x, y, z ]
     * prim.rotation      = (vec3) [ x, y, z ]
     * prim.angular       = (vec3) [ x, y, z ]
     * prim.color         = [ red1, green1, blue1, alpha1, red2, blue2... ]
     * prim.texure1Arr    = [ texture1, texture2, texture3 ]
     * prim.audioArr      = [ AudioObj1, AudioObj2, AudioObj3...]