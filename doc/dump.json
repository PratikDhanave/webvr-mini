[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/app.es6",
    "memberof": null,
    "longname": "src/es6/app.es6",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "content": "/*\r\n * app.es6\r\n * es6 entry point, transpiled (via BabelJS) to ES5.\r\n */\r\n\r\nconsole.log( 'in es6' ); \r\n\r\n// DEV ENVIRONMENT\r\n\r\nvar env = process.env.WEBPACK_ENV;\r\n\r\n// REQUIRE ALL POLYFILLS\r\n\r\n// WebGL math library.\r\n\r\nvar glMatrix = require( 'gl-matrix' );\r\n\r\nif ( ! glMatrix ) {\r\n\r\n    console.error( 'gl-matrix could\\'nt be loaded...' );\r\n\r\n} else {\r\n\r\n    console.log( 'loaded gl-matrix' );\r\n\r\n}\r\n\r\n// Import WebVR-Mini libraries. Note: if you don't use super() imports will fail!\r\n\r\nimport Util from  './util';\r\n\r\nimport WebGL from './webgl';\r\n\r\nimport WebVR from './webvr';\r\n\r\n//import Loader from './load-pool';\r\n\r\nimport LoadTexture from './load-texture';\r\n\r\nimport LoadModel from './load-model';\r\n\r\nimport LoadAudio from './load-audio';\r\n\r\nimport LoadVideo from './load-video';\r\n\r\nimport LoadFont from './load-font';\r\n\r\n// import Shader from './Shader';\r\n\r\nimport ShaderTexture from './shader-texture';\r\n\r\nimport ShaderColor from './shader-color';\r\n\r\nimport ShaderDirlightTexture from './shader-dirlight-texture';\r\n\r\nimport ShaderWater from './shader-water';\r\n\r\nimport ShaderMetal from './shader-metal';\r\n\r\n// Collects the shaders in one place.\r\n\r\nimport Renderer from './renderer';\r\n\r\n// All objects.\r\n\r\n// import Map2d from './map2d';\r\n\r\nimport Prim from './prim';\r\n\r\n// Import the world (variable object, changes with each VR world).\r\n\r\nimport World from './world';\r\n\r\n// Init Util first to create shortcuts.\r\n\r\nlet util = new Util();\r\n\r\n// If we are in dev mode, load any special libraries.\r\n\r\nlet webgl = null;\r\n\r\nif ( __DEV__ === 'true' ) {\r\n\r\n    console.log( 'app.es6: in development mode' );\r\n\r\n    // require kronos webgl debug from node_modules\r\n    // https://github.com/vorg/webgl-debug\r\n\r\n    let debug = require( 'webgl-debug' );\r\n\r\n    webgl = new WebGL( false, glMatrix, util, debug );\r\n\r\n\r\n    if( debug ) {\r\n\r\n        console.log( 'Loading webgl-debug' );\r\n\r\n    } else {\r\n\r\n        console.log( 'Error loading webgl-debug' );\r\n\r\n    }\r\n\r\n} else if ( __RELEASE__ === 'true' ) {\r\n\r\n    // Code only added to release.\r\n\r\n    webgl = new WebGL( false, glMatrix, util );\r\n\r\n}\r\n\r\n// WebVR needs WebGL.\r\n\r\nlet webvr = new WebVR( false, util, glMatrix, webgl );\r\n\r\n// The Prim object needs Loaders.\r\n\r\nlet loadModel = new LoadModel( true, util, glMatrix, webgl );\r\n\r\nlet loadTexture = new LoadTexture( true, util, glMatrix, webgl );\r\n\r\nlet loadAudio = new LoadAudio( true, util, glMatrix, webgl );\r\n\r\nlet loadVideo = new LoadVideo( true, util, glMatrix, webgl );\r\n\r\nlet loadFont = new LoadFont( true, util, glMatrix, webgl );\r\n\r\nlet prim = new Prim ( true, util, glMatrix, webgl, loadModel, loadTexture, loadAudio, loadVideo );\r\n\r\nlet shaderTexture = new ShaderTexture ( true, util, glMatrix, webgl, prim );\r\n\r\nlet shaderColor = new ShaderColor ( true, util, glMatrix, webgl, prim );\r\n\r\nlet shaderDirlightTexture = new ShaderDirlightTexture( true, util, glMatrix, webgl, prim );\r\n\r\nlet renderer = new Renderer ( true, util, glMatrix, webgl, shaderTexture, shaderColor, shaderDirlightTexture );\r\n\r\n// Create the world, which needs WebGL, WebVR, and Prim.\r\n\r\nlet world = new World( webgl, prim, renderer, shaderTexture, shaderColor );\r\n\r\n// Export our classes to app.js.\r\n\r\nexport { util, webgl, loadModel, loadTexture, loadAudio, loadVideo, prim, webvr, world };\r\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "env",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~env",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "glMatrix",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~glMatrix",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loadFont",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~loadFont",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/load-font.js~LoadFont"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "shaderTexture",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~shaderTexture",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/shader-texture.js~ShaderTexture"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "shaderColor",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~shaderColor",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/shader-color.js~ShaderColor"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "shaderDirlightTexture",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~shaderDirlightTexture",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/shader-dirlight-texture.js~ShaderDirlightTexture"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "renderer",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~renderer",
    "access": null,
    "export": false,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/renderer.js~Renderer"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~util",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{util}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/util.js~Util"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "webgl",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~webgl",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{webgl}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loadModel",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~loadModel",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{loadModel}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/load-model.js~LoadModel"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loadTexture",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~loadTexture",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{loadTexture}",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/load-texture.js~LoadTexture"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loadAudio",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~loadAudio",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{loadAudio}",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/load-audio.js~LoadAudio"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "loadVideo",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~loadVideo",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{loadVideo}",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/load-video.js~LoadVideo"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "prim",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~prim",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{prim}",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/prim.js~Prim"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "webvr",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~webvr",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{webvr}",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/webvr.js~WebVR"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "world",
    "memberof": "src/es6/app.es6",
    "longname": "src/es6/app.es6~world",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/app.es6",
    "importStyle": "{world}",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "src/es6/world.js~World"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/load-audio.es6",
    "memberof": null,
    "longname": "src/es6/load-audio.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import LoadPool from  './load-pool';\r\n\r\nclass LoadAudio extends LoadPool {\r\n\r\n    /**\r\n     * Base loader class.\r\n     * @link https://www.html5rocks.com/en/tutorials/webaudio/intro/\r\n     * @link http://mdn.github.io/fetch-examples/fetch-array-buffer/\r\n     */\r\n\r\n    constructor ( init, util, glMatrix, webgl ) {\r\n\r\n        console.log( 'in LoadAudio class' );\r\n\r\n        let MAX_CACHE_AUDIO = 3;\r\n\r\n        super( init, util, glMatrix, webgl, MAX_CACHE_AUDIO );\r\n\r\n        this.audioCtx = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n        this.sources = {};\r\n\r\n        if ( init === true ) {\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    uploadAudio ( loadObj, callback ) {\r\n\r\n        let audio = loadObj.prim.audio;\r\n\r\n        let audioObj = {\r\n            audio: loadObj.audio,\r\n            src: loadObj.src,\r\n        };\r\n\r\n        // TODO: set audio volume, etc.\r\n\r\n        audio.push( audioObj );\r\n\r\n        // Clear the object for re-use.\r\n\r\n        loadObj.busy = false;\r\n\r\n        this.update( loadObj );\r\n\r\n    }\r\n\r\n    createLoadObj ( waitObj ) {\r\n\r\n        loadObj = {};\r\n\r\n        loadObj.src = waitObj.source;\r\n\r\n        loadObj.audio = this.audioCtx.createBufferSource();\r\n\r\n        let req = new Request( waitObj.source );\r\n\r\n        // TODO: SET CORS and mime type\r\n\r\n        fetch( req ).then( function ( response ) {\r\n\r\n            if ( ! response.ok ) {\r\n\r\n                throw Error( response.statusText );\r\n\r\n            }\r\n\r\n            return response.arrayBuffer();\r\n\r\n        } ).then ( function ( buffer ) {\r\n\r\n            if ( ! buffer ) {\r\n\r\n                throw Error ( 'no audio arrayBuffer' );\r\n            }\r\n\r\n            this.audioCtx.decodeAudioData( buffer, function ( decodedData ) {\r\n\r\n                loadObj.audio.buffer = decodedData;\r\n\r\n                loadObj.audio.connect( this.audioCtx.destination );\r\n\r\n                // Attach to prim.\r\n\r\n                this.update( loadObj );\r\n\r\n            } );\r\n\r\n        } ).catch ( function ( err ) {\r\n\r\n                console.error( err );\r\n\r\n        } );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LoadAudio;"
  },
  {
    "__docId__": 18,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoadAudio",
    "memberof": "src/es6/load-audio.es6",
    "longname": "src/es6/load-audio.es6~LoadAudio",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/load-audio.es6",
    "importStyle": "LoadAudio",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/load-pool.js~LoadPool"
    ]
  },
  {
    "__docId__": 19,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/load-audio.es6~LoadAudio",
    "longname": "src/es6/load-audio.es6~LoadAudio#constructor",
    "access": null,
    "description": "Base loader class.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://www.html5rocks.com/en/tutorials/webaudio/intro/"
      },
      {
        "tagName": "@link",
        "tagValue": "http://mdn.github.io/fetch-examples/fetch-array-buffer/"
      }
    ],
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "audioCtx",
    "memberof": "src/es6/load-audio.es6~LoadAudio",
    "longname": "src/es6/load-audio.es6~LoadAudio#audioCtx",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sources",
    "memberof": "src/es6/load-audio.es6~LoadAudio",
    "longname": "src/es6/load-audio.es6~LoadAudio#sources",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "uploadAudio",
    "memberof": "src/es6/load-audio.es6~LoadAudio",
    "longname": "src/es6/load-audio.es6~LoadAudio#uploadAudio",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "loadObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createLoadObj",
    "memberof": "src/es6/load-audio.es6~LoadAudio",
    "longname": "src/es6/load-audio.es6~LoadAudio#createLoadObj",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "waitObj",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/load-font.es6",
    "memberof": null,
    "longname": "src/es6/load-font.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import LoadPool from  './load-pool';\r\n\r\nclass LoadFont extends LoadPool {\r\n\r\n    /** \r\n     * Load and configure fonts for use.\r\n     * Working with fonts:\r\n     * @link https://www.html5rocks.com/en/tutorials/webgl/million_letters/\r\n     */\r\n\r\n    constructor ( init, util, glMatrix, webgl ) {\r\n\r\n        console.log( 'in LoadFont class' );\r\n\r\n        // Init superclass.\r\n\r\n        let MAX_CACHE_FONTS = 3;\r\n\r\n        super( init, util, glMatrix, webgl, MAX_CACHE_FONTS );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LoadFont;"
  },
  {
    "__docId__": 25,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoadFont",
    "memberof": "src/es6/load-font.es6",
    "longname": "src/es6/load-font.es6~LoadFont",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/load-font.es6",
    "importStyle": "LoadFont",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/load-pool.js~LoadPool"
    ]
  },
  {
    "__docId__": 26,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/load-font.es6~LoadFont",
    "longname": "src/es6/load-font.es6~LoadFont#constructor",
    "access": null,
    "description": "Load and configure fonts for use.\nWorking with fonts:",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://www.html5rocks.com/en/tutorials/webgl/million_letters/"
      }
    ],
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/load-model.es6",
    "memberof": null,
    "longname": "src/es6/load-model.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import LoadPool from  './load-pool';\r\n\r\nclass LoadModel extends LoadPool {\r\n\r\n    /**\r\n     * Base loader class.\r\n     */\r\n\r\n    constructor ( init, util, glMatrix, webgl ) {\r\n\r\n        console.log( 'in LoadModel class' );\r\n\r\n        super( init, util, glMatrix, webgl );\r\n\r\n    }\r\n\r\n    init () {\r\n\r\n    }\r\n\r\n    uploadModel ( loadObj, callback ) {\r\n\r\n        // TODO: replace Sizzle with querySelector.\r\n\r\n\t\tvar $ = Sizzle,\r\n\t\t\tgetInput = function(sem, par) {\r\n                var el = $(\"input[semantic=\"+sem+\"]\", par)[0];\r\n                return $(el.getAttribute(\"source\"), mesh)[0];\r\n            },\r\n            parseVals = function(el) {\r\n\t\t\t\tvar strvals = el.textContent.replace(/^\\s\\s*/, \"\").replace(/\\s\\s*$/, \"\");\r\n                return strvals.split(/\\s+/).map(parseFloat);\r\n            },\r\n            mesh = $(\"geometry > mesh\", xml)[0],\r\n\t\t\ttriangles = $(\"triangles\", mesh)[0],\r\n            polylist = $(\"polylist\", mesh)[0],\r\n\t\t\tvrtInput = getInput(\"VERTEX\", polylist),\r\n\t\t\tposInput = getInput(\"POSITION\", vrtInput),\r\n\t\t\tnrmInput = getInput(\"NORMAL\", polylist),\r\n\t\t\tnrmList = parseVals($(\"float_array\", nrmInput)[0]),\r\n\t\t\tidxList = parseVals($(\"p\", polylist)[0]),\r\n\t\t\ti, j, v, n;\r\n\r\n\t\tvertices = parseVals($(\"float_array\", posInput)[0]);\r\n\t\tnormals = [];\r\n\t\tindices = [];\r\n\r\n\t\tfor (i=0;i<idxList.length;i+=6) {\r\n\t\t\tfor (j=0;j<3;j++) {\r\n\t\t\t\tv = idxList[i + j * 2],\r\n\t\t\t\tn = idxList[i + j * 2 + 1];\r\n\t\t\t\tindices.push(v);\r\n\t\t\t\tnormals[v*3] = nrmList[n*3];\r\n\t\t\t\tnormals[v*3+1] = nrmList[n*3+1];\r\n\t\t\t\tnormals[v*3+2] = nrmList[n*3+2];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tnormals: normals\r\n\t\t};\r\n\r\n    }\r\n\r\n    createLoadObj ( waitObj ) {\r\n\r\n        let loadObj = {};\r\n\r\n        loadObj.model = {};\r\n\r\n        //loadObj.model.crossOrigin = 'anonymous';\r\n        // TODO: set headers and crossorigin here\r\n\r\n        loadObj.callback = waitObj.callback;\r\n\r\n        loadObj.prim = waitObj.attach; ///////////////////////////\r\n\r\n        loadObj.busy = true;\r\n\r\n\t\tfetch( waitObj.source )\r\n        \t.then(response => response.text())\r\n        \t.then(xmlString => uploadModel( loadObj, waitObj.callback))\r\n        \t.then(data => console.log(data));\r\n\r\n        // Start the loading.\r\n\r\n        this.cacheCt++;\r\n\r\n        return loadObj;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LoadModel;"
  },
  {
    "__docId__": 28,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoadModel",
    "memberof": "src/es6/load-model.es6",
    "longname": "src/es6/load-model.es6~LoadModel",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/load-model.es6",
    "importStyle": "LoadModel",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/load-pool.js~LoadPool"
    ]
  },
  {
    "__docId__": 29,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/load-model.es6~LoadModel",
    "longname": "src/es6/load-model.es6~LoadModel#constructor",
    "access": null,
    "description": "Base loader class.",
    "lineNumber": 9,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/load-model.es6~LoadModel",
    "longname": "src/es6/load-model.es6~LoadModel#init",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "uploadModel",
    "memberof": "src/es6/load-model.es6~LoadModel",
    "longname": "src/es6/load-model.es6~LoadModel#uploadModel",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "loadObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createLoadObj",
    "memberof": "src/es6/load-model.es6~LoadModel",
    "longname": "src/es6/load-model.es6~LoadModel#createLoadObj",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "waitObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/load-pool.es6",
    "memberof": null,
    "longname": "src/es6/load-pool.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class LoadPool {\r\n\r\n    /**\r\n     * Base loader class. We don't use promise.all since we want to keep a \r\n     * limited pool of loaders, which accept a larger number of waitObjs. As \r\n     * each loadObj completes a load, it checks the queue to see if there is \r\n     * another loadObj neededing a load.\r\n     */\r\n\r\n    constructor ( init, util, glMatrix, webgl, MAX_CACHE ) {\r\n\r\n        console.log( 'in LoadPool class' );\r\n\r\n        this.util = util;\r\n\r\n        this.webgl = webgl;\r\n\r\n        this.glMatrix = glMatrix;\r\n\r\n        this.MAX_CACHE = MAX_CACHE; // from subclass\r\n\r\n        this.loadCache = new Array( MAX_CACHE );\r\n\r\n        this.waitCache = []; // Could be hundreds\r\n\r\n        this.waitCt = 0; // wait cache pointer\r\n\r\n        this.loadCt = 0; // load cache pointer\r\n\r\n        this.ready = false;\r\n\r\n    }\r\n\r\n    /** \r\n     * Add to the queue of unresolved wait objects, an object holding\r\n     * directions for loading the asset and callback(s).\r\n     * @param {String} source the image path.\r\n     * @param {Function} callback callback function ofr individual waiter.\r\n     */\r\n    createWaitObj ( source, attach, callback ) {\r\n\r\n        /////////////console.log( 'creating wait object...' + source );\r\n\r\n        this.loadCt++;\r\n\r\n        this.waitCache.push( {\r\n\r\n            source: source,\r\n\r\n            attach: attach,\r\n\r\n            callback: callback\r\n\r\n        } );\r\n\r\n    }\r\n\r\n    // Create LoadObject is specific to subclass.\r\n\r\n    // UploadXXX is specific to subclass.\r\n\r\n    /** \r\n     * Update the queue.\r\n     */\r\n    update ( loadObj ) {\r\n\r\n        /////////////console.log( 'in loadTexture.update()' );\r\n\r\n        let waitCache = this.waitCache;\r\n\r\n        let wLen = waitCache.length;\r\n\r\n        if ( wLen < 1 ) {\r\n\r\n            console.log( 'all assets loaded for:' + loadObj.prim.name );\r\n\r\n            this.ready = true;\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        this.ready = false;\r\n\r\n        // Check if there is an available loadCache\r\n\r\n        let i = 0;\r\n\r\n        let loadCache = this.loadCache;\r\n\r\n        let lLen = loadCache.length;\r\n\r\n        let waitObj = waitCache[0];\r\n\r\n        /////////console.log( 'in update(), have a waitObj waiting...' + waitObj.attach.name + ' src:' + waitObj.source );\r\n\r\n        if ( loadObj && loadObj.busy === false ) {\r\n\r\n            //////////console.log( 're-using a loader object:' + ' loadObj:' + loadObj  );\r\n\r\n            loadObj.prim = waitObj.attach;\r\n\r\n            loadObj.image.src = waitObj.source;\r\n\r\n            waitCache.shift();\r\n\r\n        } else {\r\n\r\n            for ( i; i < lLen; i++ ) {\r\n\r\n                if ( ! loadCache[ i ] ) {\r\n\r\n                    //////////console.log( 'creating a new Loader object at cache pos:' + i );\r\n\r\n                    loadCache[ i ] = this.createLoadObj( waitObj );\r\n\r\n                    waitCache.shift();\r\n\r\n                    break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    } // end of update\r\n\r\n    /** \r\n     * load objects into the waiting queue. This can happen very quickly. \r\n     * images are queue for loading, with callback for each load, and \r\n     * final callback. We use custom code here instead of a Promise for \r\n     * brevity and flexibility.\r\n     * @param {String} source the path to the image file\r\n     * @param {Function} callback each time an image is loaded.\r\n     * @param {Function} finalCallback (optional) the callback executed when all objects are loaded.\r\n     */\r\n    load ( source, attach, callback, finalCallback ) {\r\n\r\n        // Push a load request onto the queue.\r\n\r\n        this.createWaitObj( source, attach, callback );\r\n\r\n        // Start loading, if space available.\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LoadPool;"
  },
  {
    "__docId__": 34,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoadPool",
    "memberof": "src/es6/load-pool.es6",
    "longname": "src/es6/load-pool.es6~LoadPool",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/load-pool.es6",
    "importStyle": "LoadPool",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 35,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#constructor",
    "access": null,
    "description": "Base loader class. We don't use promise.all since we want to keep a \nlimited pool of loaders, which accept a larger number of waitObjs. As \neach loadObj completes a load, it checks the queue to see if there is \nanother loadObj neededing a load.",
    "lineNumber": 10,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "MAX_CACHE",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#util",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "webgl",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#webgl",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glMatrix",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#glMatrix",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "MAX_CACHE",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#MAX_CACHE",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loadCache",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#loadCache",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "waitCache",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#waitCache",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "waitCt",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#waitCt",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loadCt",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#loadCt",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#ready",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createWaitObj",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#createWaitObj",
    "access": null,
    "description": "Add to the queue of unresolved wait objects, an object holding\ndirections for loading the asset and callback(s).",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "the image path."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function ofr individual waiter."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#update",
    "access": null,
    "description": "Update the queue.",
    "lineNumber": 65,
    "params": [
      {
        "name": "loadObj",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#ready",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#ready",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/es6/load-pool.es6~LoadPool",
    "longname": "src/es6/load-pool.es6~LoadPool#load",
    "access": null,
    "description": "load objects into the waiting queue. This can happen very quickly. \nimages are queue for loading, with callback for each load, and \nfinal callback. We use custom code here instead of a Promise for \nbrevity and flexibility.",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "the path to the image file"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "each time an image is loaded."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "finalCallback",
        "description": "(optional) the callback executed when all objects are loaded."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/load-texture.es6",
    "memberof": null,
    "longname": "src/es6/load-texture.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import LoadPool from  './load-pool';\r\n\r\nclass LoadTexture extends LoadPool {\r\n\r\n    /**\r\n     * Texture loader, using a texture pool.\r\n  \t * @link http://blog.tojicode.com/2012/03/javascript-memory-optimization-and.html\r\n     */\r\n\r\n    constructor ( init, util, glMatrix, webgl ) {\r\n\r\n        console.log( 'in LoadTexture class' );\r\n\r\n        // Init superclass.\r\n\r\n        let MAX_CACHE_IMAGES = 3;\r\n\r\n        super( init, util, glMatrix, webgl, MAX_CACHE_IMAGES );\r\n\r\n        // Specific to texture cache.\r\n\r\n        this.MAX_TIMEOUT = 10;\r\n\r\n        this.greyPixel = new Uint8Array( [ 0.5, 0.5, 0.5, 1.0 ] );\r\n\r\n        if( init ) {\r\n\r\n            // Do something specific to the sublclass.\r\n\r\n        }\r\n\r\n    }\r\n\r\n    init () {\r\n\r\n    }\r\n\r\n  /**\r\n   * Sets a texture to a 1x1 pixel color. \r\n   * @param {WebGLRenderingContext} gl the WebGLRenderingContext.\r\n   * @param {WebGLTexture} texture the WebGLTexture to set parameters for.\r\n   * @param {WebGLParameter} target.\r\n   * @memberOf module: webvr-mini/LoadTexture\r\n   */\r\n    setDefaultTexturePixel ( gl, texture, target ) {\r\n\r\n        // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\r\n\r\n        let color = this.greyPixel;\r\n\r\n        if ( target === gl.TEXTURE_CUBE_MAP ) {\r\n\r\n            for ( let i = 0; i < 6; ++i ) {\r\n\r\n                gl.texImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color );\r\n\r\n            }\r\n\r\n        } else if ( target === gl.TEXTURE_3D ) {\r\n\r\n            gl.texImage3D( target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color );\r\n\r\n        } else {\r\n\r\n            gl.texImage2D( target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Create a load object wrapper, and start a load.\r\n     * POLYMORPHIC FOR LOAD MEDIA TYPE.\r\n     * @param {Object} waitObj the unresolved wait object holding load directions for the asset.\r\n     * @memberOf module: webvr-mini/LoadTexture\r\n     */\r\n    createLoadObj ( waitObj ) {\r\n\r\n        let loadObj = {};\r\n\r\n        loadObj.image = new Image();\r\n\r\n        loadObj.image.crossOrigin = 'anonymous';\r\n\r\n        loadObj.callback = waitObj.callback;\r\n\r\n        loadObj.prim = waitObj.attach; ///////////////////////////\r\n\r\n        loadObj.busy = true;\r\n\r\n        // https://www.nczonline.net/blog/2013/09/10/understanding-ecmascript-6-arrow-functions/\r\n\r\n        loadObj.image.addEventListener( 'load', ( e ) => this.uploadTexture( loadObj, loadObj.callback ) );\r\n\r\n        loadObj.image.addEventListener( 'error', ( e) => console.log( 'error loading image:' + waitObj.source ), false );\r\n\r\n        // Start the loading.\r\n\r\n        loadObj.image.src = waitObj.source;\r\n\r\n        this.cacheCt++; // TODO: NOT NEEDED?\r\n\r\n        return loadObj;\r\n\r\n    }\r\n\r\n    /** \r\n     * Create a WebGL texture and upload to GPU.\r\n     * Note: problems with firefox data, see:\r\n     * http://stackoverflow.com/questions/39251254/avoid-cpu-side-conversion-with-teximage2d-in-firefox\r\n     * @param {Object} loadObj the loader object containing Image data.\r\n     * @param {Function} callback callback function for individual texture load.\r\n     * @memberOf module: webvr-mini/LoadTexture\r\n     */\r\n    uploadTexture ( loadObj, callback ) {\r\n\r\n        ////////////console.log( 'In uploadTexture() for:' + loadObj.prim.name + ' src:' + loadObj.image.src );\r\n\r\n        let gl = this.webgl.getContext();\r\n\r\n        let textures = loadObj.prim.textures;\r\n\r\n        gl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, true );\r\n\r\n        let textureObj = {\r\n            image: loadObj.image,\r\n            src: loadObj.image.src,\r\n            texture: gl.createTexture()\r\n        };\r\n\r\n        gl.bindTexture( gl.TEXTURE_2D, textureObj.texture );\r\n\r\n        // Use image, or default to single-color texture if image is not present.\r\n\r\n        if ( textureObj.image ) {\r\n\r\n            //////////console.log( 'binding image:' + textureObj.image.src );\r\n\r\n            gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureObj.image );\r\n\r\n            // TODO: WHEN TO USE gl.renderBufferStorage()???\r\n\r\n        } else {\r\n\r\n            console.error( 'no loadObj.image for:' + textureObj.image.src + ', using default pixel texture' );\r\n\r\n            gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.greyPixel );\r\n\r\n        }\r\n\r\n        if ( this.util.isPowerOfTwo( textureObj.image.width ) && this.util.isPowerOfTwo( textureObj.image.height ) ) {\r\n\r\n            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR );\r\n\r\n            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST );\r\n\r\n            gl.generateMipmap( gl.TEXTURE_2D );\r\n\r\n        } else {\r\n\r\n            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR );\r\n\r\n            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR );\r\n\r\n        }\r\n\r\n        gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\r\n        gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\r\n        gl.bindTexture( gl.TEXTURE_2D, null );\r\n\r\n        textures.push( textureObj );\r\n\r\n        //window.prim = loadObj.prim;\r\n\r\n        // Clear the object for re-use.\r\n\r\n        loadObj.busy = false;\r\n\r\n        // Send this to update for re-use .\r\n\r\n        this.update( loadObj );\r\n\r\n    }\r\n\r\n    /** \r\n     * Upload a cubemap texture.\r\n     * @memberOf module: webvr-mini/LoadTexture\r\n     */\r\n    uploadCubeTexture () {\r\n\r\n    }\r\n\r\n    /** \r\n     * Upload a 3d texture.\r\n     * @memberOf module: webvr-mini/LoadTexture\r\n     */\r\n    upload3DTexture () {\r\n\r\n    }\r\n\r\n    // load() and update() are defined in the superclass.\r\n\r\n}\r\n\r\nexport default LoadTexture;"
  },
  {
    "__docId__": 51,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoadTexture",
    "memberof": "src/es6/load-texture.es6",
    "longname": "src/es6/load-texture.es6~LoadTexture",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/load-texture.es6",
    "importStyle": "LoadTexture",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/load-pool.js~LoadPool"
    ]
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#constructor",
    "access": null,
    "description": "Texture loader, using a texture pool.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "http://blog.tojicode.com/2012/03/javascript-memory-optimization-and.html"
      }
    ],
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "MAX_TIMEOUT",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#MAX_TIMEOUT",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "greyPixel",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#greyPixel",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#init",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setDefaultTexturePixel",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#setDefaultTexturePixel",
    "access": null,
    "description": "Sets a texture to a 1x1 pixel color. ",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "module: webvr-mini/LoadTexture"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGLRenderingContext"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "the WebGLRenderingContext."
      },
      {
        "nullable": null,
        "types": [
          "WebGLTexture"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "the WebGLTexture to set parameters for."
      },
      {
        "nullable": null,
        "types": [
          "WebGLParameter"
        ],
        "spread": false,
        "optional": false,
        "name": "target.",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createLoadObj",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#createLoadObj",
    "access": null,
    "description": "Create a load object wrapper, and start a load.\nPOLYMORPHIC FOR LOAD MEDIA TYPE.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "module: webvr-mini/LoadTexture"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "waitObj",
        "description": "the unresolved wait object holding load directions for the asset."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "uploadTexture",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#uploadTexture",
    "access": null,
    "description": "Create a WebGL texture and upload to GPU.\nNote: problems with firefox data, see:\nhttp://stackoverflow.com/questions/39251254/avoid-cpu-side-conversion-with-teximage2d-in-firefox",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "module: webvr-mini/LoadTexture"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "loadObj",
        "description": "the loader object containing Image data."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback function for individual texture load."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "uploadCubeTexture",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#uploadCubeTexture",
    "access": null,
    "description": "Upload a cubemap texture.",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "module: webvr-mini/LoadTexture"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "upload3DTexture",
    "memberof": "src/es6/load-texture.es6~LoadTexture",
    "longname": "src/es6/load-texture.es6~LoadTexture#upload3DTexture",
    "access": null,
    "description": "Upload a 3d texture.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "module: webvr-mini/LoadTexture"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/load-video.es6",
    "memberof": null,
    "longname": "src/es6/load-video.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import LoadPool from  './load-pool';\r\n\r\nclass LoadVideo extends LoadPool {\r\n\r\n    /**\r\n     * Base loader class.\r\n     */\r\n\r\n    constructor ( init, util, glMatrix, webgl ) {\r\n\r\n        console.log( 'in LoadVideo class' );\r\n\r\n        super( init, util, glMatrix, webgl );\r\n\r\n    }\r\n\r\n    init () {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default LoadVideo;"
  },
  {
    "__docId__": 62,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoadVideo",
    "memberof": "src/es6/load-video.es6",
    "longname": "src/es6/load-video.es6~LoadVideo",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/load-video.es6",
    "importStyle": "LoadVideo",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/load-pool.js~LoadPool"
    ]
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/load-video.es6~LoadVideo",
    "longname": "src/es6/load-video.es6~LoadVideo#constructor",
    "access": null,
    "description": "Base loader class.",
    "lineNumber": 9,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/load-video.es6~LoadVideo",
    "longname": "src/es6/load-video.es6~LoadVideo#init",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/map2d.es6",
    "memberof": null,
    "longname": "src/es6/map2d.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class Map2d {\r\n\r\n    /* \r\n     * NOTE: using 'map.es6' causes a transpile error\r\n     *\r\n     * Generic map object, equivalent to a 2-dimensional array, used \r\n     * for heightmaps and color maps and other \"maplike\" data, including \r\n     * Image data in arrays.\r\n     * Maps are defined in x (columns)  and z (rows) instead of \r\n     * x and y to match Prim definitions of heightMaps.\r\n     * Maps can be scaled using bilinear or bicubic algorithms.\r\n     *\r\n     * @link https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\r\n     *\r\n     */\r\n\r\n    constructor ( util ) {\r\n\r\n        console.log( 'in Map2d' );\r\n\r\n        this.util = util;\r\n\r\n        this.type = {\r\n\r\n            PLANE: 'initPlane',\r\n\r\n            RANDOM: 'initRandom',\r\n\r\n            DIAMOND: 'initDiamond',\r\n\r\n            IMAGE: 'initImage'\r\n\r\n        };\r\n\r\n        this.edgeType = {\r\n\r\n            NONE: 0,      // don't do anything\r\n\r\n            WRAP: 1,      // wrap a out of range side to the opposite side\r\n\r\n            TOZERO: 2     // push down to zero\r\n\r\n        };\r\n\r\n        this.width = 0;\r\n\r\n        this.depth = 0;\r\n\r\n        this.low = 0;\r\n\r\n        this.high = 0;\r\n\r\n        this.map = null; // actual heightmap\r\n\r\n        this.squareSize = 0; // max square that starts at 0, 0 and fits in Map2d.\r\n\r\n        this.max = 0;\r\n\r\n        // offscreen canvas for heightmaps from images.\r\n\r\n        this.canvas = this.ctx = this.imgData = null;\r\n\r\n    }\r\n\r\n    checkParams ( w, d, roughness, flatten ) {\r\n\r\n        if( w < 1 || d < 1 ) {\r\n\r\n            console.error( 'invalid map width or height, was:' + w + ', ' + d );\r\n\r\n            return false;\r\n\r\n        } else if ( roughness < 0 || roughness > 1.0 ) {\r\n\r\n            console.error( 'invalid Map roughness (0-1), was:' + roughness );\r\n\r\n            return false;\r\n\r\n        } else if ( flatten < 0 || flatten > 1.0 ) {\r\n\r\n            console.error( 'invalid Map flatten (0-1.0), was:' + flatten );\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    /** \r\n     * Get a Map pixel. For the diamond algorithm, this.max is a width or \r\n     * height. For all others, it is the length of the entire array.\r\n     * @param {Number} x the x coordinate of the pixel (column)\r\n     * @param {Number} z the z coordinate of the pixel (row)\r\n     * @param {Enum} edgeFlag how to handle requests off the edge of the map \r\n     * - WRAP: grab from other side, divide to zero).\r\n     * - TOZERO: reduce to zero, depending on unit distance from edge.\r\n     * @returns {Number} the Map value at the x, z position.\r\n     */\r\n    getPixel ( x, z, edgeFlag = 1 ) {\r\n\r\n        if ( x < 0 || x > this.width || z < 0 || z > this.depth ) {\r\n\r\n            switch ( edgeFlag ) {\r\n\r\n                case this.edgeType.WRAP:\r\n                    if ( x < 0 ) x = this.width - x;\r\n                    if ( x > this.width - 1 ) x = x - this.width;\r\n                    if ( z < 0 ) z = this.depth - z;\r\n                    if ( z > this.depth - 1 ) z = z - this.depth;\r\n                    break;\r\n\r\n                case this.edgeType.TOZERO:\r\n                    let xs = x;\r\n                    let zs = z;\r\n                    if ( x < 0 ) x = 0;\r\n                    if( x > this.width - 1 ) x = this.width - 1;\r\n                    if( z < 0 ) z = 0;\r\n                    if( z > this.depth - 1 ) z = this.depth - 1;\r\n                    return this.map[ x + this.squareSize * z ] / ( Math.abs( xs - x ) + Math.abs( zs - z ) );\r\n                    break;\r\n\r\n                default:\r\n                    console.error( 'getPixel out of range x:' + x + ' z:' + z + ' width:' + w + ' height:' + h + ' max:' + this.max );\r\n                    return -1;\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return this.map[ x + this.width * z ];\r\n\r\n    }\r\n\r\n    /** \r\n     * Set a pixel in the Map.\r\n     * @param {Number} x the x (column) coordinate in the Map.\r\n     * @param {Number} z the z (row) coordinate in the Map.\r\n     * @param {Number} val the value at a map coordinate, typically Float32\r\n     */\r\n    setPixel ( x, z, val ) {\r\n\r\n        if ( x < 0 || x > this.max || z < 0 || z > this.max ) {\r\n\r\n            console.error( 'setPixel out of range x:' + x + ' z:' + z + ' max:' + this.max );\r\n\r\n            return -1;\r\n\r\n        }\r\n\r\n        if ( this.low > val ) this.low = val;\r\n\r\n        if( this.high < val ) this.high = val;\r\n\r\n        ///////////////////////////////////console.log(\"SETPIXEL: x:\" + x + \" z:\" + z + \" val:\" + val + ' size:' + this.squareSize )\r\n\r\n        this.map[ x + this.width * z ] = val; // NOTE: was squareSize!!!!!!!\r\n\r\n    }\r\n\r\n    /** \r\n     * Create a completely flat Map.\r\n     */\r\n    initPlane ( w, d ) {\r\n\r\n        if ( this.checkParams ( w, d, 0, 0 ) ) {\r\n\r\n            this.img = this.map = null;\r\n\r\n            this.map = new Float32Array( w * d );\r\n\r\n            this.width = w;\r\n\r\n            this.depth = d;\r\n\r\n            this.squareSize = Math.min( w * d ); // shortest face.\r\n\r\n        } else {\r\n\r\n            console.error( 'error creating Map2d using ' + this.type.PLANE );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Generate a Map using completely random numbers clamped. \r\n     * to a range.\r\n     */\r\n    initRandom ( w, d, roughness ) {\r\n\r\n        if( this.checkParams( w, d, roughness, 0 ) ) {\r\n\r\n            this.map = new Float32Array( w * d );\r\n\r\n            this.width = w;\r\n\r\n            this.depth = d;\r\n\r\n            this.squareSize = Math.min( w, d );\r\n\r\n            this.max = this.squareSize - 1;\r\n\r\n            let util = this.util;\r\n\r\n            for ( let i = 0, len = this.map.length; i < len; i++ ) {\r\n\r\n                this.map[i] = util.getRand() * roughness;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            console.error( 'error creating Map using ' + this.type.RANDOM );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Create a blank heightmap in canvas ImageData format. If \r\n     * random === true, make a random heightmap.\r\n     * https://github.com/hunterloftis/playfuljs-demos/blob/gh-pages/terrain/index.html\r\n     * @param {Number} w the width of the heightmap (x).\r\n     * @param {Number} h the height of the heightmap (z).\r\n     * @param {Boolean} create if true, make a proceedural heightmap using diamond algorithm.\r\n     * @param {Number} roughness if create === true, assign a roughness (0 - 1) to generated terrain.\r\n     */\r\n    initDiamond ( w, d, roughness, flatten ) {\r\n\r\n        if( this.checkParams( w, d, roughness, flatten ) ) {\r\n\r\n            this.img = this.map = null;\r\n\r\n            // Get next highest power of 2 (scale back later).\r\n\r\n            console.log('starting width:' + w + ' height:' + d + ' roughness:' + roughness );\r\n\r\n            let n = Math.pow( 2, Math.ceil( Math.log( ( w + d ) / 2 ) / Math.log( 2 ) ) );\r\n\r\n            console.warn( 'random map, selecting nearest power of 2 (' + n + ' x ' + n + ')' );\r\n\r\n            // Set up for diamond algorithm.\r\n\r\n            this.squareSize = n + 1;\r\n\r\n            this.width = this.depth = n; // SQUARE\r\n\r\n            this.map = new Float32Array( this.squareSize * this.squareSize );\r\n\r\n            // For the Diamond algorithm, this.max is the length or width of the terrain.\r\n\r\n            this.max = this.squareSize - 1;\r\n\r\n            this.setPixel( 0, 0, this.max );\r\n\r\n            this.setPixel( this.max, 0, this.max / 2 );\r\n\r\n            this.setPixel( this.max, this.max, 0 );\r\n\r\n            this.setPixel( 0, this.max, this.max / 2 );\r\n\r\n            // Start recursive terrain generation.\r\n\r\n            this.divide( this.max, roughness );\r\n\r\n            // The first pixel may be too high.\r\n\r\n            this.setPixel( 0, 0, (this.getPixel( 0, 1 ) + this.getPixel( 1, 0 ) ) / 2 );\r\n\r\n            this.flatten( flatten / this.squareSize ); // if divisions = 100, shrink height 1/ 100;\r\n\r\n            } else {\r\n\r\n                console.error( 'error creating Map using ' + this.type.DIAMOND );\r\n\r\n            }\r\n\r\n    }\r\n\r\n    /** \r\n     * Use an RGBA image to create the heightmap, after drawing into <canvas>.\r\n     * @link https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\r\n     * @link http://stackoverflow.com/questions/39678642/trying-to-convert-imagedata-to-an-heightmap\r\n     * @param {Number} w desired heightmap width (x).\r\n     * @param {Number} d desired height (z) of heightmap.\r\n     */\r\n    initImage ( w, d, path, callback ) {\r\n\r\n        if( this.checkParams( w, d, roughness, flatten ) ) {\r\n\r\n        }\r\n\r\n        if ( ! this.canvas ) {\r\n\r\n            this.canvas = document.createElement( 'canvas' );\r\n\r\n        }\r\n\r\n        if ( ! this.ctx ) {\r\n\r\n            this.ctx = this.canvas.getContext( '2d' );\r\n\r\n        }\r\n\r\n        let img = new Image();\r\n\r\n        img.style.display = 'none';\r\n\r\n        img.onload = () => {\r\n\r\n            this.ctx.drawImage( img, 0, 0 );\r\n\r\n            // Uint8ClampedArray, RGBA 32-bit for all images.\r\n            //  let rgba = 'rgba(' + data[0] + ',' + data[1] + ',' + data[2] + ',' + (data[3] / 255) + ')';\r\n\r\n            this.imgData = this.ctx.getImageData(0, 0, img.width, img.height );\r\n\r\n            this.width = img.width;\r\n\r\n            this.depth = img.height;\r\n\r\n            this.squareSize = Math.min( w, h ); // largest square area starting with 0, 0\r\n\r\n            this.max = this.squareSize - 1;\r\n\r\n            // Pixel-level view.\r\n            //this.pixels = new Uint32Array( this.data.buffer );\r\n\r\n            this.map = new Float32Array( this.squareSize );\r\n\r\n            let j = 0;\r\n\r\n            let data = this.imgData;\r\n\r\n            for ( let i = 0, len = this.data.length; i < len; i++ ) {\r\n\r\n                this.map[j++] = data[i] + data[i + 1] + data [ i + 2 ] / 3;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        img.onerror = () => {\r\n\r\n            console.error( 'image could not be loaded:' + path );\r\n        }\r\n\r\n        img.src = path;\r\n\r\n        callback( this.data );\r\n\r\n    }\r\n\r\n    /* \r\n     * ---------------------------------------\r\n     * HEIGHTMAP GENERATION ALGORITHMS\r\n     * ---------------------------------------\r\n     */\r\n\r\n    /** \r\n     * Divide Map in Diamond algorithm.\r\n     */\r\n    divide( size, roughness ) {\r\n\r\n        let x, z, half = size / 2;\r\n\r\n        let scale = roughness * size;\r\n\r\n        const util = this.util;\r\n\r\n        if ( half < 1 ) return;\r\n\r\n        for ( z = half; z < this.max; z += size ) {\r\n\r\n            for ( x = half; x < this.max; x += size ) {\r\n\r\n              this.square( x, z, half, util.getRand() * scale * 2 - scale );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        for ( z = 0; z <= this.max; z += half ) {\r\n\r\n            for ( x = (z + half) % size; x <= this.max; x += size ) {\r\n\r\n              this.diamond( x, z, half, util.getRand() * scale * 2 - scale );\r\n\r\n            }\r\n\r\n          }\r\n\r\n        this.divide( size / 2, roughness );\r\n\r\n    }\r\n\r\n    /** \r\n     * Get average in Diamond algorithm.\r\n     */\r\n    average( values ) {\r\n\r\n        let valid = values.filter( function( val ) { \r\n\r\n            return val !== -1; \r\n\r\n        });\r\n\r\n        let total = valid.reduce( function( sum, val ) { \r\n\r\n            return sum + val;\r\n\r\n        }, 0);\r\n\r\n        return total / valid.length;\r\n\r\n    }\r\n\r\n    /** \r\n     * new square, average value. Alternates with diamond.\r\n     */\r\n    square( x, z, size, offset ) {\r\n\r\n        let ave = this.average ( [\r\n            this.getPixel( x - size, z - size ),   // upper left\r\n            this.getPixel( x + size, z - size ),   // upper right\r\n            this.getPixel( x + size, z + size ),   // lower right\r\n            this.getPixel( x - size, z + size )    // lower left\r\n        ] );\r\n\r\n        this.setPixel( x, z, ave + offset );\r\n\r\n    }\r\n\r\n    /** \r\n     * new diamond, average value. Alternates with square.\r\n     */\r\n    diamond( x, z, size, offset ) {\r\n\r\n        let ave = this.average( [\r\n            this.getPixel( x, z - size ),      // top\r\n            this.getPixel( x + size, z ),      // right\r\n            this.getPixel( x, z + size ),      // bottom\r\n            this.getPixel( x - size, z )       // left\r\n        ] );\r\n\r\n        this.setPixel( x, z, ave + offset );\r\n\r\n    }\r\n\r\n    /* \r\n     * ---------------------------------------\r\n     * SCALING/SMOOTHING ALGORITHMS\r\n     * ---------------------------------------\r\n     */\r\n\r\n\r\n    /** \r\n     * Scale heightMap y values (0.1 = 1/10 the max), \r\n     * passing 0 will completely flatten the map.\r\n     */\r\n    flatten ( scale ) {\r\n\r\n        let val;\r\n\r\n        if( this.map && this.map.length ) {\r\n\r\n            let map = this.map;\r\n\r\n            for ( let i = 0, len = map.length; i < len; i++ ) {\r\n\r\n                map[ i ] *= scale;\r\n\r\n                val = map[ i ];\r\n\r\n                if( this.high < val ) this.high = val;\r\n\r\n                if( this.low > val ) this.low = val;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * roughen an existing Map.\r\n     */\r\n    roughen ( percent ) {\r\n\r\n        if( this.map && this.map.length ) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * given an existing Map, scale to new dimensions, smoothing \r\n     * with the biCubic or biLinear algorithm.\r\n     */\r\n    scale ( w, h ) {\r\n\r\n        if ( this.checkParams( w, h, 0, 0 ) ) {\r\n\r\n            let map = new Float32Array( w * h );\r\n\r\n            let xScale = this.width / w;\r\n\r\n            let zScale = this.depth / h;\r\n\r\n            console.log('original width:' + this.width + ' new:' + w + 'original height:' + this.depth + ' new:' + h )\r\n\r\n            console.log('xScale:' + xScale + ' zScale:' + zScale);\r\n\r\n            for ( let z = 0; z < h; z++ ) {\r\n\r\n                for ( let x = 0; x < w; x++ ) {\r\n\r\n                    map[ w * z + x ] = this.biCubic( x * xScale, z * zScale);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        console.log('WIDTH:' + w + \" HEIGHT:\" + h)\r\n\r\n        this.map = map;\r\n\r\n        this.width = w;\r\n\r\n        this.depth = h;\r\n\r\n        this.squareSize = Math.min( w, h );\r\n\r\n        this.max = this.squareSize - 1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Given a point defined in 2d between \r\n     * x and z, return an interpolation using a bilinear algorithm.\r\n     * @param {Array} heightmap \r\n     * @param {Number} x = desired x position (between 0.0 and 1.0)\r\n     * @param {Number} z = desired z position (between 0.0 and 1.0)\r\n     */\r\n    biLinear ( x, z ) {\r\n\r\n        if ( x < 0 || x > 1.0 || z < 0 || z > 1.0 ) {\r\n\r\n            console.error( 'heightmap x index out of range, x:' + x + ' z:' + z );\r\n\r\n            return null;\r\n        }\r\n\r\n        // Our x and z, scaled to heightmap divisions.\r\n\r\n        x *= this.width;\r\n        z *= this.depth;\r\n\r\n        // Points above and below our position.\r\n\r\n        let x1 = Math.min( x );\r\n        let x2 = Math.max( x );\r\n        let z1 = Math.min( z );\r\n        let z2 = Math.max( z );\r\n\r\n        // Interpolate along x axis, get interpolations above and below point.\r\n\r\n        let a = this.getPixel( x1, z1 ) * (x - x1) + \r\n            this.getPixel( x1, z2 ) * (1 - x - x1);\r\n\r\n        let b = this.getPixel( z1, z2 ) * (x - x1) +\r\n            this.getPixel( x2, z2 ) * (1 - x - x1);\r\n\r\n        // Interpolate these results along z axis.\r\n\r\n        let v = a * (z - z1) + b * (1 - z - z1);\r\n\r\n        return v;\r\n\r\n    }\r\n\r\n    /** \r\n     * Given a point, and a collection of 16 neighboring points in \r\n     * 2d, return a smoothed value for the point using the \r\n     * biCubic interpolation algorithm.\r\n     * Adapted from:\r\n     * https://github.com/hughsk/bicubic-sample/blob/master/index.js\r\n     * https://github.com/hughsk/bicubic/blob/master/index.js\r\n     * @param {Number} xf \r\n     * @param {Number} zf\r\n     */\r\n\r\n    biCubicPoint ( xf, zf, \r\n        p00, p01, p02, p03, \r\n        p10, p11, p12, p13, \r\n        p20, p21, p22, p23, \r\n        p30, p31, p32, p33\r\n    ) {\r\n\r\n        let zf2 = zf * zf;\r\n        let xf2 = xf * xf;\r\n        let xf3 = xf * xf2;\r\n\r\n        let x00 = p03 - p02 - p00 + p01;\r\n        let x01 = p00 - p01 - x00;\r\n        let x02 = p02 - p00;\r\n        let x0 = x00*xf3 + x01*xf2 + x02*xf + p01;\r\n\r\n        let x10 = p13 - p12 - p10 + p11;\r\n        let x11 = p10 - p11 - x10;\r\n        let x12 = p12 - p10;\r\n        let x1 = x10*xf3 + x11*xf2 + x12*xf + p11;\r\n\r\n        let x20 = p23 - p22 - p20 + p21;\r\n        let x21 = p20 - p21 - x20;\r\n        let x22 = p22 - p20;\r\n        let x2 = x20*xf3 + x21*xf2 + x22*xf + p21;\r\n\r\n        let x30 = p33 - p32 - p30 + p31;\r\n        let x31 = p30 - p31 - x30;\r\n        let x32 = p32 - p30;\r\n        let x3 = x30*xf3 + x31*xf2 + x32*xf + p31;\r\n\r\n        let y0 = x3 - x2 - x0 + x1;\r\n        let y1 = x0 - x1 - y0;\r\n        let y2 = x2 - x0;\r\n\r\n        return y0*zf*zf2 + y1*zf2 + y2*zf + x1;\r\n\r\n    }\r\n\r\n    /** \r\n     * value interpolation\r\n     */\r\n    biCubic ( x, z ) {\r\n\r\n        let x1 = Math.floor( x );\r\n        let z1 = Math.floor( z );\r\n        let x2 = x1 + 1;\r\n        let z2 = z1 + 1;\r\n\r\n        //console.log('lower pixel: for x:' + x + ' value:' + this.getPixel( x1, z1 ) + ' upper pixel for z:' + z + ' value:' + this.getPixel( x2, z2 ) );\r\n\r\n        let p00 = this.getPixel( x1 - 1, z1 - 1);\r\n        let p01 = this.getPixel( x1 - 1, z1 );\r\n        let p02 = this.getPixel( x1 - 1, z2 );\r\n        let p03 = this.getPixel( x1 - 1, z2 + 1 );\r\n\r\n        let p10 = this.getPixel( x1, z1 - 1 );\r\n        let p11 = this.getPixel( x1, z1 );\r\n        let p12 = this.getPixel( x1, z2 );\r\n        let p13 = this.getPixel( x1, z2 + 1 );\r\n\r\n        let p20 = this.getPixel( x2, z1 - 1);\r\n        let p21 = this.getPixel( x2, z1 );\r\n        let p22 = this.getPixel( x2, z2 );\r\n        let p23 = this.getPixel( x2, z2 + 1);\r\n\r\n        let p30 = this.getPixel( x2 + 1, z1 - 1);\r\n        let p31 = this.getPixel( x2 + 1, z1 );\r\n        let p32 = this.getPixel( x2 + 1, z2 );\r\n        let p33 = this.getPixel( x2 + 1, z2 + 1 );\r\n\r\n        return this.biCubicPoint(\r\n            x - x1, \r\n            z - z1, \r\n            p00, p10, p20, p30, \r\n            p01, p11, p21, p31, \r\n            p02, p12, p22, p32, \r\n            p03, p13, p23, p33\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Map2d;"
  },
  {
    "__docId__": 66,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Map2d",
    "memberof": "src/es6/map2d.es6",
    "longname": "src/es6/map2d.es6~Map2d",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/map2d.es6",
    "importStyle": "Map2d",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#constructor",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "util",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#util",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#type",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "edgeType",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#edgeType",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#width",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#depth",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "low",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#low",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "high",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#high",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#map",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "squareSize",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#squareSize",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#max",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#canvas",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkParams",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#checkParams",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "roughness",
        "types": [
          "*"
        ]
      },
      {
        "name": "flatten",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPixel",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#getPixel",
    "access": null,
    "description": "Get a Map pixel. For the diamond algorithm, this.max is a width or \nheight. For all others, it is the length of the entire array.",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} the Map value at the x, z position."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x coordinate of the pixel (column)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "the z coordinate of the pixel (row)"
      },
      {
        "nullable": null,
        "types": [
          "Enum"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeFlag",
        "description": "how to handle requests off the edge of the map \n- WRAP: grab from other side, divide to zero).\n- TOZERO: reduce to zero, depending on unit distance from edge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the Map value at the x, z position."
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPixel",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#setPixel",
    "access": null,
    "description": "Set a pixel in the Map.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x (column) coordinate in the Map."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "the z (row) coordinate in the Map."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value at a map coordinate, typically Float32"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "low",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#low",
    "access": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "high",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#high",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initPlane",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#initPlane",
    "access": null,
    "description": "Create a completely flat Map.",
    "lineNumber": 167,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "img",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#img",
    "access": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#map",
    "access": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#width",
    "access": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#depth",
    "access": null,
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "squareSize",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#squareSize",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initRandom",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#initRandom",
    "access": null,
    "description": "Generate a Map using completely random numbers clamped. \nto a range.",
    "lineNumber": 193,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "roughness",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#map",
    "access": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#width",
    "access": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#depth",
    "access": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "squareSize",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#squareSize",
    "access": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#max",
    "access": null,
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initDiamond",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#initDiamond",
    "access": null,
    "description": "Create a blank heightmap in canvas ImageData format. If \nrandom === true, make a random heightmap.\nhttps://github.com/hunterloftis/playfuljs-demos/blob/gh-pages/terrain/index.html",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "the width of the heightmap (x)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "the height of the heightmap (z)."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "create",
        "description": "if true, make a proceedural heightmap using diamond algorithm."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "roughness",
        "description": "if create === true, assign a roughness (0 - 1) to generated terrain."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "img",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#img",
    "access": null,
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "squareSize",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#squareSize",
    "access": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#width",
    "access": null,
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#map",
    "access": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#max",
    "access": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initImage",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#initImage",
    "access": null,
    "description": "Use an RGBA image to create the heightmap, after drawing into <canvas>.",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/"
      },
      {
        "tagName": "@link",
        "tagValue": "http://stackoverflow.com/questions/39678642/trying-to-convert-imagedata-to-an-heightmap"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "desired heightmap width (x)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "desired height (z) of heightmap."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "canvas",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#canvas",
    "access": null,
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ctx",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#ctx",
    "access": null,
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "imgData",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#imgData",
    "access": null,
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#width",
    "access": null,
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#depth",
    "access": null,
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "squareSize",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#squareSize",
    "access": null,
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#max",
    "access": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#map",
    "access": null,
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "divide",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#divide",
    "access": null,
    "description": "Divide Map in Diamond algorithm.",
    "lineNumber": 367,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "roughness",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "average",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#average",
    "access": null,
    "description": "Get average in Diamond algorithm.",
    "lineNumber": 404,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "square",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#square",
    "access": null,
    "description": "new square, average value. Alternates with diamond.",
    "lineNumber": 425,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "diamond",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#diamond",
    "access": null,
    "description": "new diamond, average value. Alternates with square.",
    "lineNumber": 441,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "flatten",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#flatten",
    "access": null,
    "description": "Scale heightMap y values (0.1 = 1/10 the max), \npassing 0 will completely flatten the map.",
    "lineNumber": 465,
    "params": [
      {
        "name": "scale",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "high",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#high",
    "access": null,
    "description": null,
    "lineNumber": 479,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "low",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#low",
    "access": null,
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "roughen",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#roughen",
    "access": null,
    "description": "roughen an existing Map.",
    "lineNumber": 492,
    "params": [
      {
        "name": "percent",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "scale",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#scale",
    "access": null,
    "description": "given an existing Map, scale to new dimensions, smoothing \nwith the biCubic or biLinear algorithm.",
    "lineNumber": 504,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "h",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#map",
    "access": null,
    "description": null,
    "lineNumber": 530,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#width",
    "access": null,
    "description": null,
    "lineNumber": 532,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#depth",
    "access": null,
    "description": null,
    "lineNumber": 534,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "squareSize",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#squareSize",
    "access": null,
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "max",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#max",
    "access": null,
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "biLinear",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#biLinear",
    "access": null,
    "description": "Given a point defined in 2d between \nx and z, return an interpolation using a bilinear algorithm.",
    "lineNumber": 551,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "heightmap",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "= desired x position (between 0.0 and 1.0)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "= desired z position (between 0.0 and 1.0)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "biCubicPoint",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#biCubicPoint",
    "access": null,
    "description": "Given a point, and a collection of 16 neighboring points in \n2d, return a smoothed value for the point using the \nbiCubic interpolation algorithm.\nAdapted from:\nhttps://github.com/hughsk/bicubic-sample/blob/master/index.js\nhttps://github.com/hughsk/bicubic/blob/master/index.js",
    "lineNumber": 599,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "xf",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "zf",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "biCubic",
    "memberof": "src/es6/map2d.es6~Map2d",
    "longname": "src/es6/map2d.es6~Map2d#biCubic",
    "access": null,
    "description": "value interpolation",
    "lineNumber": 641,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/map3d.es6",
    "memberof": null,
    "longname": "src/es6/map3d.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class Map3d {\r\n\r\n    /* \r\n     * NOTE: using 'map.es6' causes a transpile error\r\n     *\r\n     * Generic map object, equivalent to a 2-dimensional array, used \r\n     * for heightmaps and color maps and other \"maplike\" data, including \r\n     * Image data in arrays.\r\n     * Maps are defined in x (columns)  and z (rows) instead of \r\n     * x and y to match Prim definitions of heightMaps.\r\n     * Maps can be scaled using bilinear or bicubic algorithms.\r\n     *\r\n     * @link https://www.html5rocks.com/en/tutorials/webgl/typed_arrays/\r\n     *\r\n     */\r\n    constructor ( util ) {\r\n\r\n        console.log( 'in Map3d' );\r\n\r\n        this.util = util;\r\n\r\n        this.type = {\r\n\r\n            CLOUD: 'initPlane',\r\n\r\n            SPHERE: 'initRandom'\r\n        };\r\n\r\n\r\n        this.width = 0;\r\n\r\n        this.depth = 0;\r\n\r\n        this.low = 0;\r\n\r\n        this.high = 0;\r\n\r\n        this.map = null; // actual heightmap\r\n\r\n    }\r\n\r\n    /** \r\n     * confirm our data is ok for a 3d map (pointcloud).\r\n     */\r\n    checkParams ( w, h, d, roughness, flatten ) {\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n    /** \r\n     * Get a 3D pixel. This allows interpolation of values (colors or other \r\n     * meta-data ) using 3d coordinates.\r\n     *\r\n     * @param {Number} x the x coordinate of the pixel (column)\r\n     * @param {Number} z the z coordinate of the pixel (row)\r\n     * @param {Enum} edgeFlag how to handle requests off the edge of the map \r\n     * - WRAP: grab from other side, divide to zero).\r\n     * - TOZERO: reduce to zero, depending on unit distance from edge.\r\n     * @returns {Number} the Map value at the x, z position.\r\n     */\r\n    getPoint ( x, y, z ) {\r\n\r\n    }\r\n\r\n    /** \r\n     * Set a pixel in the Map.\r\n     * @param {Number} x the x (column) coordinate in the Map.\r\n     * @param {Number} z the z (row) coordinate in the Map.\r\n     * @param {Number} val the value at a map coordinate, typically Float32\r\n     */\r\n    setPoint ( x, y, z, val ) {\r\n\r\n    }\r\n\r\n    /** \r\n     * Generate a Map using completely random numbers clamped. \r\n     * to a range.\r\n     */\r\n    initRandom ( w, h, d, numPoints ) {\r\n\r\n        if( this.checkParams( w, d, roughness, 0 ) ) {\r\n\r\n            this.type = this.CLOUD;\r\n\r\n            this.map = new Float32Array( numPoints );\r\n\r\n            this.mapColors = new Float32Array ( numPoints );\r\n\r\n            this.width = w;\r\n\r\n            this.height = h;\r\n\r\n            this.depth = d;\r\n\r\n            let util = this.util;\r\n\r\n            for ( let i = 0, len = this.map.length; i < len; i++ ) {\r\n\r\n                this.map.push( \r\n                    util.getRand() * w, \r\n                    util.getRand() * h,\r\n                    util.getRand() * d\r\n                );\r\n\r\n                this.mapColors.push(\r\n                    util.getRand( 0, 255 ),\r\n                    util.getRand( 0, 255 ),\r\n                    util.getRand( 0, 255 ),\r\n                    1.0\r\n                );\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            console.error( 'error creating Map3d using ' + this.type.RANDOM );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Set points on the surface of a sphere.\r\n     */\r\n    initSphere( w, h, d, numPoints ) {\r\n\r\n\r\n    }\r\n\r\n    /** \r\n     * Initialize a Map3d from data. The first parameter is always 3d coordinates,\r\n     * after that an arbitrary number of arrays may be assigned at comparable positions\r\n     * in the map object.\r\n     */\r\n    initFromData( positions ) {\r\n\r\n        // TODO: use stellar or other data.\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Map3d;"
  },
  {
    "__docId__": 129,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Map3d",
    "memberof": "src/es6/map3d.es6",
    "longname": "src/es6/map3d.es6~Map3d",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/map3d.es6",
    "importStyle": "Map3d",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 130,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#constructor",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "util",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#util",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#type",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#width",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#depth",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "low",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#low",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "high",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#high",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#map",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkParams",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#checkParams",
    "access": null,
    "description": "confirm our data is ok for a 3d map (pointcloud).",
    "lineNumber": 45,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "h",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "roughness",
        "types": [
          "*"
        ]
      },
      {
        "name": "flatten",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getPoint",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#getPoint",
    "access": null,
    "description": "Get a 3D pixel. This allows interpolation of values (colors or other \nmeta-data ) using 3d coordinates.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} the Map value at the x, z position."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x coordinate of the pixel (column)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "the z coordinate of the pixel (row)"
      },
      {
        "nullable": null,
        "types": [
          "Enum"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeFlag",
        "description": "how to handle requests off the edge of the map \n- WRAP: grab from other side, divide to zero).\n- TOZERO: reduce to zero, depending on unit distance from edge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the Map value at the x, z position."
    },
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPoint",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#setPoint",
    "access": null,
    "description": "Set a pixel in the Map.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the x (column) coordinate in the Map."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "the z (row) coordinate in the Map."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "the value at a map coordinate, typically Float32"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initRandom",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#initRandom",
    "access": null,
    "description": "Generate a Map using completely random numbers clamped. \nto a range.",
    "lineNumber": 81,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "h",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "numPoints",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#type",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#map",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mapColors",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#mapColors",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "width",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#width",
    "access": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "height",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#height",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "depth",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#depth",
    "access": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initSphere",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#initSphere",
    "access": null,
    "description": "Set points on the surface of a sphere.",
    "lineNumber": 127,
    "params": [
      {
        "name": "w",
        "types": [
          "*"
        ]
      },
      {
        "name": "h",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "numPoints",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "initFromData",
    "memberof": "src/es6/map3d.es6~Map3d",
    "longname": "src/es6/map3d.es6~Map3d#initFromData",
    "access": null,
    "description": "Initialize a Map3d from data. The first parameter is always 3d coordinates,\nafter that an arbitrary number of arrays may be assigned at comparable positions\nin the map object.",
    "lineNumber": 137,
    "params": [
      {
        "name": "positions",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/prim.es6",
    "memberof": null,
    "longname": "src/es6/prim.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Map2d from './map2d';\r\nimport Map3d from './map3d';\r\n\r\nclass Prim {\r\n\r\n    /** \r\n     * @class\r\n     * Create object primitives, and return vertex and index data \r\n     * suitable for creating a VBO and IBO.\r\n     * \r\n     * NOTE: if you need more complex shapes, use a mesh file, or \r\n     * a library like http://evanw.github.io/csg.js/ to implement \r\n     * mesh operations.\r\n     * \r\n     * Implicit objects (values are units, with 1.0 being normalized size).\r\n     * \r\n     * prim.position      = (vec5) [ x, y, z, rounding, | startSlice, endSlice,  ]\r\n     * prim.dimensions    = (vec4) [ x, y, z ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * prim.acceleration  = (vec3) [ x, y, z ]\r\n     * prim.rotation      = (vec3) [ x, y, z ]\r\n     * prim.angular       = (vec3) [ x, y, z ]\r\n     * prim.color         = [ red1, green1, blue1, alpha1, red2, blue2... ]\r\n     * prim.texure1Arr    = [ texture1, texture2, texture3 ]\r\n     * prim.audioArr      = [ AudioObj1, AudioObj2, AudioObj3...]\r\n     * \r\n     * More prims\r\n     * Ogre 3d procedural\r\n     * https://bitbucket.org/transporter/ogre-procedural/src/ca6eb3363a53c2b53c055db5ce68c1d35daab0d5/library/include/?at=default\r\n     * https://bitbucket.org/transporter/ogre-procedural/wiki/Home\r\n     *\r\n     * https://github.com/jagenjo/litegl.js/tree/master/src\r\n     *\r\n     * http://wiki.unity3d.com/index.php/ProceduralPrimitives\r\n     *\r\n     * octahedron sphere generation\r\n     * https://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\r\n     * https://experilous.com/1/blog/post/procedural-planet-generation\r\n     * https://experilous.com/1/planet-generator/2014-09-28/planet-generator.js\r\n     * another octahedron sphere \r\n     * https://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\r\n     * rounded cube\r\n     * https://github.com/vorg/primitive-rounded-cube\r\n     * rounded cube algorithim\r\n     * http://catlikecoding.com/unity/tutorials/rounded-cube/\r\n     *\r\n     * generalized catmull-clark subdivision algorithm\r\n     * https://thiscouldbebetter.wordpress.com/2015/04/24/the-catmull-clark-subdivision-surface-algorithm-in-javascript/\r\n     *\r\n     * cube inflation algorithm\r\n     * http://mathproofs.blogspot.com.au/2005/07/mapping-cube-to-sphere.html\r\n     * advanced toolset\r\n     * https://www.geometrictools.com/Samples/Geometrics.html\r\n     * Eigen\r\n     * https://fossies.org/dox/eigen-3.2.10/icosphere_8cpp_source.html\r\n     * Geometry prebuilt\r\n     * http://paulbourke.net/geometry/roundcube/\r\n     * Lots of Webgl tricks!\r\n     * https://acko.net\r\n     * http://acko.net/blog/on-webgl/\r\n     * \r\n     * https://gamedevdaily.io/four-ways-to-create-a-mesh-for-a-sphere-d7956b825db4#.lkbq2omq5\r\n     * https://www.geometrictools.com/Samples/Geometrics.html\r\n     *\r\n     * https://github.com/glo-js/primitive-icosphere\r\n     * https://github.com/hughsk/icosphere\r\n     * http://mft-dev.dk/uv-mapping-sphere/\r\n     * http://donhavey.com/blog/tutorials/tutorial-3-the-icosahedron-sphere/\r\n     * http://blog.andreaskahler.com/2009/06/creating-icosphere-mesh-in-code.html\r\n     *\r\n     * https://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\r\n     *\r\n     *\r\n     */\r\n    constructor ( init, util, glMatrix, webgl, loadModel, loadTexture, loadAudio, loadVideo ) {\r\n\r\n        console.log( 'in Prim class' );\r\n\r\n        this.util = util;\r\n\r\n        this.webgl = webgl;\r\n\r\n        this.glMatrix = glMatrix;\r\n\r\n        this.loadModel = loadModel;\r\n\r\n        this.loadTexture = loadTexture;\r\n\r\n        this.loadAudio = loadAudio;\r\n\r\n        this.loadVideo = loadVideo;\r\n\r\n        this.objs = [];\r\n\r\n        this.typeList = {\r\n\r\n            POINT: 'geometryPointCloud',\r\n\r\n            POINTCLOUD: 'geometryPointCloud',\r\n\r\n            LINE: 'geometryLine',\r\n\r\n            PLANE: 'geometryOuterPlane',\r\n\r\n            OUTERPLANE: 'geometryOuterPlane',\r\n\r\n            INNERPLANE: 'geometryInnerPlane',\r\n\r\n            CURVEDPLANE: 'geometryCurvedOuterPlane',\r\n\r\n            CURVEDOUTERPLANE: 'geometryCurvedOuterPlane',\r\n\r\n            CURVEDINNERPLANE: 'geometryCurvedInnerPlane',\r\n\r\n            TERRAIN: 'geometryTerrain',\r\n\r\n            CIRCLE: 'geometryCircle',\r\n\r\n            POLY: 'geometryPoly',\r\n\r\n            CUBE: 'geometryCube',\r\n\r\n            CUBESPHERE: 'geometryCubeSphere',\r\n\r\n            SPHERE: 'geometrySphere',\r\n\r\n            CAP: 'geometryCap',\r\n\r\n            DOME: 'geometryDome',\r\n\r\n            TOPDOME: 'geometryTopDome',\r\n\r\n            SKYDOME: 'geometrySkyDome',\r\n\r\n            BOTTOMDOME: 'geometryBottomDome',\r\n\r\n            CONE: 'geometryCone',\r\n\r\n            TOPCONE: 'geometryTopCone',\r\n\r\n            BOTTOMCONE: 'geometryBottomCone',\r\n\r\n            SPINDLE: 'geometrySpindle',\r\n\r\n            TEARDROP: 'geometryTeardrop',\r\n\r\n            CYLINDER: 'geometryCylinder',\r\n\r\n            CAPSULE: 'geometryCapsule',\r\n\r\n            ICOSOHEDRON: 'geometryIcosohedron',\r\n\r\n            PYRAMID: 'geometryPyramid',\r\n\r\n            ICOSPHERE: 'geometryIcoSphere',\r\n\r\n            TOPICODOME: 'geometryTopIcoDome',\r\n\r\n            SKYICODOME: 'geometrySkyIcoDome',\r\n\r\n            BOTTOMICODOME: 'geometryBottomIcoDome',\r\n\r\n            OCTAHEDRON: 'geometryOctahedron',\r\n\r\n            DODECAHEDRON: 'geometryDodecahedron',\r\n\r\n            TORUS: 'geometryTorus',\r\n\r\n            MESH: 'geometryMesh'\r\n\r\n        };\r\n\r\n        // Sideness, direction. Mapped to equivalent unit vector names in this.getStdVecs()\r\n\r\n        this.side = {\r\n\r\n            DEFAULT: 'up',\r\n\r\n            FRONT: 'forward',\r\n\r\n            BACK: 'back',\r\n\r\n            LEFT: 'left',\r\n\r\n            RIGHT: 'right',\r\n\r\n            TOP: 'up',\r\n\r\n            BOTTOM: 'down'\r\n\r\n        };\r\n\r\n        // draw facing size, back side, or both sides (e.g. for flat Plane or Poly).\r\n\r\n        this.draw = {\r\n\r\n            FORWARD_SIDE: 10,\r\n\r\n            BACKWARD_SIDE: 11,\r\n\r\n            BOTH_SIDES: 12\r\n        };\r\n\r\n    }\r\n\r\n    /** \r\n     * See if supplied Prim type is supported. Individual Prim factory \r\n     * methods do more detailed checking.\r\n     * @param {String} type the prim type.\r\n     * @returns {Boolean} if supported, return true, else false.\r\n     */\r\n    checkType ( type ) {\r\n\r\n        let l = this.typeList;\r\n\r\n        // Object iteration.\r\n\r\n        for ( let i in l ) {\r\n\r\n            if ( l[ i ] === type ) {\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /** \r\n     * Unique object id\r\n     * @link https://jsfiddle.net/briguy37/2MVFd/\r\n     */\r\n    setId () {\r\n\r\n        let d = new Date().getTime();\r\n\r\n        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, function( c ) {\r\n\r\n            let r = (d + Math.random()*16)%16 | 0;\r\n\r\n            d = Math.floor(d/16);\r\n\r\n            return ( c=='x' ? r : ( r&0x3|0x8 ) ).toString( 16 );\r\n\r\n        } );\r\n\r\n        return uuid;\r\n\r\n    }\r\n\r\n    /** \r\n     * Get the big array with all vertex data. Every time a \r\n     * Prim is made, we store a reference in the this.objs[] \r\n     * array. So, to make one, we just concatenate the \r\n     * vertices. Use to send multiple prims sharing the same shader to one \r\n     * Renderer.\r\n     * @param {Array} vertices\r\n     * @returns {Array} vertices\r\n     */\r\n    setVertexData ( vertices ) {\r\n\r\n        vertices = [];\r\n\r\n        const len = this.objs.length;\r\n\r\n        for ( let i in this.objs ) {\r\n\r\n            vertices = vertices.concat( this.objs[i].vertices );\r\n\r\n        }\r\n\r\n        return vertices;\r\n\r\n    }\r\n\r\n    /** \r\n     * get the big array with all index data. Use to \r\n     * send multiple prims sharing the same shader to one \r\n     * Renderer.\r\n     */\r\n    setIndexData ( indices ) {\r\n\r\n        indices = [];\r\n\r\n        const len = this.objs.length;\r\n\r\n        for ( let i in this.objs ) {\r\n\r\n            indices = indices.concat( this.objs[i].indices );\r\n\r\n        }\r\n\r\n        return indices;\r\n\r\n    }\r\n\r\n    /** \r\n     * Return an empty buffer object.\r\n     */\r\n    createBufferObj () {\r\n\r\n        return {\r\n\r\n            makeBuffers: true,\r\n\r\n            vertices: {\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 3,\r\n\r\n                numItems: 0\r\n\r\n            },\r\n\r\n            indices: { // where to start drawing GL_TRIANGLES.\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 1,\r\n\r\n                numItems: 0\r\n\r\n            },\r\n\r\n            sides: { // a collection of triangles creating a side on the shape.\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 3,\r\n\r\n                numItems: 0\r\n\r\n            },\r\n\r\n            normals: {\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 3,\r\n\r\n                numItems: 0\r\n\r\n            },\r\n\r\n            tangents: {\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 4,\r\n\r\n                numItems: 0\r\n\r\n            },\r\n\r\n            texCoords: {\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 2,\r\n\r\n                numItems: 0\r\n\r\n            },\r\n\r\n            colors: {\r\n\r\n                data: [],\r\n\r\n                buffer: null,\r\n\r\n                itemSize: 4,\r\n\r\n                numItems: 0\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Add data to create buffers, works if existing data is present. However, \r\n     * indices must be consistent!\r\n     */\r\n    addBufferData( bufferObj, vertices, indices, texCoords, normals, tangents, colors ) {\r\n\r\n        const concat = this.util.concatArr;\r\n\r\n        concat( bufferObj.vertices.data, vertices );\r\n\r\n        concat( bufferObj.indices.data, indices );\r\n\r\n        concat( bufferObj.texCoords.data, texCoords );\r\n\r\n        concat( bufferObj.normals.data, normals );\r\n\r\n        concat( bufferObj.tangents.data, tangents );\r\n\r\n        concat( bufferObj.colors.data, colors );\r\n\r\n        return bufferObj;\r\n\r\n    }\r\n\r\n    /** \r\n     * Create WebGL buffers using geometry data\r\n     * @param {Object} bufferObj custom object holding the following:\r\n     * an array of vertices, in glMatrix.vec3 objects.\r\n     * an array of indices for the vertices.\r\n     * an array of texture coordinates, in glMatrix.vec2 format.\r\n     * an array of normals, in glMatrix.vec3 format.\r\n     * an array of tangents, in glMatrix.vec3 format.\r\n     * an array of colors, in glMatrix.vec4 format.\r\n     */\r\n    createBuffers( bufferObj ) {\r\n\r\n            const gl = this.webgl.getContext();\r\n\r\n            // Vertex Buffer Object.\r\n\r\n            let o = bufferObj.vertices;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.log( 'no vertices present, creating default' );\r\n\r\n                o.data = new Float32Array( [ 0, 0, 0 ] );\r\n\r\n            }\r\n\r\n            o.buffer = gl.createBuffer();\r\n\r\n            gl.bindBuffer( gl.ARRAY_BUFFER, o.buffer );\r\n\r\n            gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( o.data ), gl.STATIC_DRAW );\r\n\r\n            o.numItems = o.data.length / o.itemSize;\r\n\r\n            // Create the Index buffer.\r\n\r\n            o = bufferObj.indices;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.log( 'no indices present, creating default' );\r\n\r\n                o.data = new Uint16Array( [ 1 ] );\r\n\r\n            }\r\n\r\n            o.buffer = gl.createBuffer();\r\n\r\n            gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, o.buffer );\r\n\r\n            gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, new Uint16Array( o.data ), gl.STATIC_DRAW );\r\n\r\n            o.numItems = o.data.length / o.itemSize;\r\n\r\n            // Create the Sides buffer, a kind of indices buffer.\r\n\r\n            o = bufferObj.sides;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.warn( 'no sides present, creating default' );\r\n\r\n                o.data = new Uint16Array( [ 1 ] );\r\n\r\n            }\r\n\r\n            // TODO: SUPPORT BY SIDE DRAWING FOR SOME PRIMS.\r\n            // TODO: SUPPORT\r\n\r\n            // create the Normals buffer.\r\n\r\n            o = bufferObj.normals;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.log( 'no normals, present, creating default' );\r\n\r\n                o.data = new Float32Array( [ 0, 1, 0 ] );\r\n\r\n            }\r\n\r\n            o.buffer = gl.createBuffer();\r\n\r\n            gl.bindBuffer( gl.ARRAY_BUFFER, o.buffer );\r\n\r\n            gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( o.data ), gl.STATIC_DRAW );\r\n\r\n            o.numItems = o.data.length / o.itemSize;\r\n\r\n            // Create the primary Texture buffer.\r\n\r\n            o = bufferObj.texCoords;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.warn( 'no texture present, creating default' );\r\n\r\n                o.data = new Float32Array( [ 0, 0 ] );\r\n\r\n            }\r\n\r\n            o.buffer = gl.createBuffer();\r\n\r\n            gl.bindBuffer( gl.ARRAY_BUFFER, o.buffer );\r\n\r\n            gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( o.data ), gl.STATIC_DRAW );\r\n\r\n            o.numItems = o.data.length / o.itemSize;\r\n\r\n            // create the Tangents Buffer.\r\n\r\n            o = bufferObj.tangents;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.warn( 'no tangents present, creating default' );\r\n\r\n                o.data = new Float32Array( [ 0, 0, 0, 0 ] );\r\n\r\n            }\r\n\r\n            o.buffer = gl.createBuffer();\r\n\r\n            gl.bindBuffer( gl.ARRAY_BUFFER, o.buffer );\r\n\r\n            gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( o.data ), gl.STATIC_DRAW );\r\n\r\n            o.numItems = o.data.length / o.itemSize;\r\n\r\n\r\n            // Create the Colors buffer.\r\n\r\n            o = bufferObj.colors;\r\n\r\n            if ( ! o.data.length ) {\r\n\r\n                console.warn( 'no colors present, creating default color' );\r\n\r\n                o.data = new Float32Array( this.computeColors( bufferObj.normals.data, o.data ) );\r\n\r\n                //o.data = new Float32Array( [ 0.2, 0.5, 0.2, 1.0 ] );\r\n\r\n            }\r\n\r\n            o.buffer = gl.createBuffer();\r\n\r\n            gl.bindBuffer( gl.ARRAY_BUFFER, o.buffer );\r\n\r\n            gl.bufferData( gl.ARRAY_BUFFER, new Float32Array( o.data ), gl.STATIC_DRAW );\r\n\r\n            o.numItems = o.data.length / o.itemSize;\r\n\r\n            bufferObj.makeBuffers = false; // they're created!\r\n\r\n        return bufferObj;\r\n\r\n    }\r\n\r\n    /** \r\n     * Create default colors for Prim color array.\r\n     */\r\n    computeColors( normals, colors ) {\r\n\r\n        for ( let i = 0, len = normals.length; i < len; i += 3 ) {\r\n\r\n            colors.push( normals[ i ], normals[ i + 1 ], normals[ i + 2 ], 1.0 );\r\n\r\n        }\r\n\r\n        return colors;\r\n\r\n    }\r\n\r\n    /** \r\n     * Check the values of a Prim.\r\n     * TODO: why is itemsize of indices = 1\r\n     */\r\n    primReadout ( prim ) {\r\n\r\n        console.log( 'prim:' + prim.name + ' type:' + prim.type + \r\n\r\n            ' vertex:(' + prim.geometry.vertices.itemSize + \r\n\r\n            '), ' + prim.geometry.vertices.numItems + \r\n\r\n            ', texture:(' + prim.geometry.texCoords.itemSize + \r\n\r\n            '), ' + prim.geometry.texCoords.numItems + \r\n\r\n            ', index:(' + prim.geometry.indices.itemSize, \r\n\r\n            '), ' + prim.geometry.indices.numItems + \r\n\r\n            ', normals:(' + prim.geometry.normals.itemSize + \r\n\r\n            '), ' + prim.geometry.normals.numItems );\r\n\r\n    }\r\n\r\n    /* \r\n     * ---------------------------------------\r\n     * DEFAULT VECTORS\r\n     * ---------------------------------------\r\n     */\r\n\r\n    /** \r\n     * Standard vectors (similar to Unity) when needed. Call only \r\n     * if using the array literal (e.g. [ 0, 0, 0,]) doesn't make sense.\r\n     * @link https://docs.unity3d.com/ScriptReference/Vector3.html\r\n    */\r\n    getStdVecs ( type ) {\r\n\r\n        switch ( type ) {\r\n\r\n            case 'back': return [ 0, 0,-1 ];\r\n\r\n            case 'down': return [ 0,-1, 0 ];\r\n\r\n            case 'forward': return [ 0, 0, 1];\r\n\r\n            case 'left': return [-1, 0, 0 ];\r\n\r\n            case 'one': return [ 1, 1, 1 ];\r\n\r\n            case 'right': return [ 1, 0, 0 ];\r\n\r\n            case 'up': return [ 0, 1, 0 ];\r\n\r\n            case 'zero': return [ 0, 0, 0 ];\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Larger configuration vectors for Prims. additional values control slicing \r\n     * or flattening of part of a prim.\r\n     * For CONE, the fourth value is truncation of the cone point.\r\n     * For other Prims, the fourth and fifth values control the start and \r\n     * end of a cap on open prims (CYLINDER, CONE) and flattening of the \r\n     * top and bottom of SPHERE prims.\r\n     */\r\n    vec5 ( a, b, c, d, e ) {\r\n\r\n        d = d || 0;\r\n\r\n        e = e || 0;\r\n\r\n        return [ a, b, c, d, e ]; // dimensions, start slice (cone)\r\n\r\n    }\r\n\r\n    vec6 ( a, b, c, d, e, f ) {\r\n\r\n        d = d || 0;\r\n\r\n        e = e || 0;\r\n\r\n        f = f || 0;\r\n\r\n        return [ a, b, c, d, e, f ];\r\n\r\n    }\r\n\r\n    /* \r\n     * ---------------------------------------\r\n     * NORMAL, INDEX, VERTEX, TRIANGLE, QUAD CALCULATIONS\r\n     * ---------------------------------------\r\n     */\r\n\r\n    /** \r\n     * Subdivide a mesh, WITHOUT smoothing.\r\n     * Comprehensive description.\r\n     * @link http://www.rorydriscoll.com/2008/08/01/catmull-clark-subdivision-the-basics/\r\n     * USE:\r\n     * USE: https://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/\r\n     * USE: http://wiki.unity3d.com/index.php/MeshSubdivision\r\n     * USE: https://thiscouldbebetter.wordpress.com/2015/04/24/the-catmull-clark-subdivision-surface-algorithm-in-javascript/\r\n     * USE: https://github.com/Erkaman/gl-catmull-clark/blob/master/index.js\r\n     * Examples:\r\n     * @link http://vorg.github.io/pex/docs/pex-geom/Geometry.html\r\n     * @link http://answers.unity3d.com/questions/259127/does-anyone-have-any-code-to-subdivide-a-mesh-and.html\r\n     * @link https://thiscouldbebetter.wordpress.com/2015/04/24/the-catmull-clark-subdivision-surface-algorithm-in-javascript/\r\n     */\r\n    subDivide ( geometry, center ) {\r\n\r\n        // TODO: NOT DONE!!!!\r\n\r\n\r\n        return geometry;\r\n\r\n    }\r\n\r\n    /**\r\n     * Compute whether point is in a triangle, wrapped \r\n     * clockwise (begin with a, end with c)\r\n     * @link http://blackpawn.com/texts/pointinpoly/\r\n     * @param {vec3} p the point to test.\r\n     * @param {vec3} p0 first clockwise vertex of triangle.\r\n     * @param {vec3} p1 second clockwise vertex of triangle.\r\n     * @param {vec3} p2 third clockwise vertex of triangle.\r\n     * @returns {Boolean} if point in triangle, return true, else false.\r\n     */\r\n    pointInTriangle ( p, p0, p1, p2 ) {\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        let v0, v1, v2, dot00, dot01, dot02, dot11, dot12;\r\n\r\n        // Compute vectors.\r\n\r\n        v0 = vec3.sub( v0, p2, p0 );\r\n        v1 = vec3.sub( v1, p1, p0 );\r\n        v2 = vec3.sub( v2, p, p0 );\r\n\r\n        // Compute dot products.\r\n\r\n        dot00 = vec3.dot( v0, v0 )\r\n        dot01 = vec3.dot( v0, v1 )\r\n        dot02 = vec3.dot( v0, v2 )\r\n        dot11 = vec3.dot( v1, v1 )\r\n        dot12 = vec3.dot( v1, v2 )\r\n\r\n        // Compute barycentric coordinates.\r\n\r\n        let invDenom = 1 / ( dot00 * dot11 - dot01 * dot01 )\r\n        let u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom\r\n        let v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom\r\n\r\n        // Check if point is in triangle.\r\n\r\n        return ( u >= 0 ) && ( v >= 0 ) && ( u + v < 1 );\r\n\r\n    }\r\n\r\n    /** \r\n     * Compute normals for a 3d object. NOTE: some routines compute their \r\n     * own normals.\r\n     * Adapted from BabylonJS version.\r\n     * @link https://github.com/BabylonJS/Babylon.js/blob/3fe3372053ac58505dbf7a2a6f3f52e3b92670c8/src/Mesh/babylon.mesh.vertexData.js\r\n     * @link http://gamedev.stackexchange.com/questions/8191/any-reliable-polygon-normal-calculation-code\r\n     * @link https://www.opengl.org/wiki/Calculating_a_Surface_Normal\r\n     */\r\n    computeNormals ( vertices, indices, normals ) {\r\n\r\n        let index = 0;\r\n\r\n        let p1p2x = 0.0;\r\n\r\n        let p1p2y = 0.0;\r\n\r\n        let p1p2z = 0.0;\r\n\r\n        let p3p2x = 0.0;\r\n\r\n        let p3p2y = 0.0;\r\n\r\n        let p3p2z = 0.0;\r\n\r\n        let faceNormalx = 0.0;\r\n\r\n        let faceNormaly = 0.0;\r\n\r\n        let faceNormalz = 0.0;\r\n\r\n        let length = 0.0;\r\n\r\n        let i1 = 0;\r\n\r\n        let i2 = 0;\r\n\r\n        let i3 = 0;\r\n\r\n        for (index = 0; index < vertices.length; index++) {\r\n\r\n                normals[index] = 0.0;\r\n\r\n        }\r\n\r\n        // index triplet = 1 face\r\n\r\n        let nbFaces = indices.length / 3;\r\n\r\n        for (index = 0; index < nbFaces; index++) {\r\n\r\n            i1 = indices[index * 3]; // get the indexes of each vertex of the face\r\n            i2 = indices[index * 3 + 1];\r\n            i3 = indices[index * 3 + 2];\r\n\r\n            // Get face vertex values.\r\n\r\n            p1p2x = vertices[i1 * 3] - vertices[i2 * 3]; // compute two vectors per face\r\n            p1p2y = vertices[i1 * 3 + 1] - vertices[i2 * 3 + 1];\r\n            p1p2z = vertices[i1 * 3 + 2] - vertices[i2 * 3 + 2];\r\n            p3p2x = vertices[i3 * 3] - vertices[i2 * 3];\r\n            p3p2y = vertices[i3 * 3 + 1] - vertices[i2 * 3 + 1];\r\n            p3p2z = vertices[i3 * 3 + 2] - vertices[i2 * 3 + 2];\r\n\r\n            faceNormalx = p1p2y * p3p2z - p1p2z * p3p2y; // compute the face normal with cross product\r\n            faceNormaly = p1p2z * p3p2x - p1p2x * p3p2z;\r\n            faceNormalz = p1p2x * p3p2y - p1p2y * p3p2x;\r\n\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = (length === 0) ? 1.0 : length;\r\n            faceNormalx /= length; // normalize this normal\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            // Accumulate all the normals defined for the face.\r\n\r\n            normals[i1 * 3] += faceNormalx;\r\n            normals[i1 * 3 + 1] += faceNormaly;\r\n            normals[i1 * 3 + 2] += faceNormalz;\r\n            normals[i2 * 3] += faceNormalx;\r\n            normals[i2 * 3 + 1] += faceNormaly;\r\n            normals[i2 * 3 + 2] += faceNormalz;\r\n            normals[i3 * 3] += faceNormalx;\r\n            normals[i3 * 3 + 1] += faceNormaly;\r\n            normals[i3 * 3 + 2] += faceNormalz;\r\n        }\r\n\r\n        // last normalization of each normal\r\n\r\n        for (index = 0; index < normals.length / 3; index++) {\r\n            faceNormalx = normals[index * 3];\r\n            faceNormaly = -normals[index * 3 + 1];\r\n            faceNormalz = normals[index * 3 + 2];\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = (length === 0) ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            // NOTE: added negative (-) to x, z to match lighting model.\r\n\r\n            normals[index * 3] = -faceNormalx;\r\n            normals[index * 3 + 1] = faceNormaly;\r\n            normals[index * 3 + 2] = -faceNormalz;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Compute tangents. NOTE: some routines compute their own tangents.\r\n     * CodePen - http://codepen.io/ktmpower/pen/ZbGRpW\r\n     * adapted from the C++ code from this link: http://www.terathon.com/code/tangent.html\r\n     * TODO: CONVERT TO GLMATRIX\r\n     * \"The code below generates a four-component tangent T in which the handedness of the local coordinate system\r\n     * is stored as ±1 in the w-coordinate. The bitangent vector B is then given by B = (N × T) · Tw.\"\r\n     */\r\n    computeTangents ( vertices, indices, normals, texCoords ) {\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        var tan1 = new Float32Array( normals.length );\r\n\r\n        var tan2 = new Float32Array( normals.length );\r\n\r\n        // the indices array specifies the triangles forming the object mesh (3 indices per triangle)\r\n        const numIndices = indices.length;\r\n        const numVertices = vertices.length;\r\n        //const numNormals = normals.length;\r\n\r\n        //console.log(\"NUMVERTICES:\" + numVertices / 3 + \" NUMINDICES:\" + numIndices / 3 + \" NUMNORMALS:\" + numNormals / 3)\r\n\r\n        // for each triangle (step through indices 3 by 3)\r\n        for (var i = 0; i < numIndices; i += 3) {\r\n\r\n            const i1 = indices[i], i2 = indices[i + 1], i3 = indices[i + 2];\r\n\r\n            var j = i1 * 3; const v1x = vertices[j], v1y = vertices[j + 1], v1z = vertices[j + 2];\r\n            var j = i2 * 3; const v2x = vertices[j], v2y = vertices[j + 1], v2z = vertices[j + 2];\r\n            var j = i3 * 3; const v3x = vertices[j], v3y = vertices[j + 1], v3z = vertices[j + 2];\r\n    \r\n            const x1 = v2x - v1x, x2 = v3x - v1x;\r\n            const y1 = v2y - v1y, y2 = v3y - v1y;\r\n            const z1 = v2z - v1z, z2 = v3z - v1z;\r\n\r\n            var j = i1 * 2; const w1x = texCoords[j], w1y = texCoords[j + 1];\r\n            var j = i2 * 2; const w2x = texCoords[j], w2y = texCoords[j + 1];\r\n            var j = i3 * 2; const w3x = texCoords[j], w3y = texCoords[j + 1];\r\n\r\n            const s1 = w2x - w1x, s2 = w3x - w1x;\r\n            const t1 = w2y - w1y, t2 = w3y - w1y;\r\n\r\n            const r = 1.0 / (s1 * t2 - s2 * t1);\r\n\r\n            const sx = (t2 * x1 - t1 * x2) * r, sy = (t2 * y1 - t1 * y2) * r, sz = (t2 * z1 - t1 * z2) * r;\r\n            const tx = (s1 * x2 - s2 * x1) * r, ty = (s1 * y2 - s2 * y1) * r, tz = (s1 * z2 - s2 * z1) * r;\r\n\r\n            var j = i1 * 3; tan1[j] += sx; tan1[j + 1] += sy; tan1[j + 2] += sz;\r\n                    tan2[j] += tx; tan2[j + 1] += ty; tan2[j + 2] += tz;\r\n            var j = i2 * 3; tan1[j] += sx; tan1[j + 1] += sy; tan1[j + 2] += sz;\r\n                    tan2[j] += tx; tan2[j + 1] += ty; tan2[j + 2] += tz;\r\n            var j = i3 * 3; tan1[j] += sx; tan1[j + 1] += sy; tan1[j + 2] += sz;\r\n                    tan2[j] += tx; tan2[j + 1] += ty; tan2[j + 2] += tz;\r\n        }\r\n\r\n        var tangents = new Float32Array( numVertices * 4 / 3 ); // TODO: ADDED 4 to this!!\r\n        //var numTangents = tangents.length / 4;\r\n\r\n        //console.log(\"TAN1:\" + tan1)\r\n        //console.log(\"TAN2:\" + tan2)\r\n\r\n        //console.log('NUMTANGENTS:' + numTangents)\r\n                                            \r\n        for (var i3 = 0, i4 = 0; i4 < numVertices; i3 += 3, i4 += 4) {\r\n\r\n            // not very efficient here (used the vec3 type and dot/cross operations from MV.js)\r\n            const n  = [ normals[i3], normals[i3 + 1], normals[i3 + 2] ];\r\n            const t1 = [ tan1   [i3], tan1   [i3 + 1], tan1   [i3 + 2] ];\r\n            const t2 = [ tan2   [i3], tan2   [i3 + 1], tan2   [i3 + 2] ];\r\n\r\n            //console.log('n:' + n + ' t1:' + t1 + ' t2:' + t2)\r\n\r\n            // Gram-Schmidt orthogonalize\r\n            ////////////////const tmp  = subtract(t1, scale(dot(n, t1), n));\r\n            const tmp = vec3.sub( [ 0, 0, 0 ], t1, vec3.scale( [ 0, 0, 0 ], t1, vec3.dot( n, t1 ) ) );\r\n\r\n            //console.log(\"TMP:\" + tmp) //NOT COMPUTING THIS RIGHT, all NAN\r\n\r\n            const len2 = tmp[ 0 ] * tmp[ 0 ] + tmp[1] * tmp[1] + tmp[2] * tmp[2];\r\n\r\n            // normalize the vector only if non-zero length\r\n\r\n            const txyz = ( len2 > 0 ) ? vec3.scale( [ 0, 0, 0 ], tmp, 1.0 / Math.sqrt( len2 ) ) : tmp;\r\n\r\n            ////console.log(\"TXYZ:\" + txyz );\r\n\r\n            // Calculate handedness\r\n            //////////////const tw = (dot(cross(n, t1), t2) < 0.0) ? -1.0 : 1.0;\r\n            const tw = ( vec3.dot( vec3.cross( [ 0, 0, 0 ], n, t1 ), t2 ) < 0.0 ) ? -1.0 : 1.0;\r\n\r\n            tangents[i4    ] = txyz[ 0 ];\r\n            tangents[i4 + 1] = txyz[1];\r\n            tangents[i4 + 2] = txyz[2];\r\n            tangents[i4 + 3] = tw;\r\n\r\n            ///console.log(\"TW:\" + tw)\r\n\r\n        }\r\n  \r\n        return tangents;\r\n\r\n    }\r\n\r\n    /* \r\n     * ---------------------------------------\r\n     * GEOMETRY\r\n     * ---------------------------------------\r\n     */\r\n\r\n    /** \r\n     * WebGL point cloud (particle system).\r\n     * Rendered as GL_POINT.\r\n     * @link https://github.com/potree/potree/releases\r\n     * @link https://www.khronos.org/registry/webgl/sdk/demos/google/particles/index.html\r\n     * @link https://github.com/gouzhen1/WebGL-Particle-System/\r\n     * @link https://github.com/gouzhen1/WebGL-Particle-System/blob/master/index.html#L3\r\n     * @link http://nullprogram.com/blog/2014/06/29/\r\n     * https://codepen.io/kenjiSpecial/pen/yyeaKm\r\n     * rendered as an array of GL_POINT.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * prim.dimensions    = (vec4) [ x, y, z, radius || 0, pointSize (pixels) | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryPointCloud ( prim ) {\r\n\r\n       let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data\r\n\r\n        // Expect points in Map3d object, or generate random.\r\n\r\n        let w = prim.dimensions[ 0 ],\r\n        h = prim.dimensions[ 1 ],\r\n        d = prim.dimensions[ 2 ],\r\n        radius = prim.dimensions[ 3 ],\r\n        pointSize = prim.dimensions[ 4 ] || 1,\r\n        numPoints = prim.divisions[ 0 ] || 1;\r\n\r\n        if ( ! prim.spaceMap ) {\r\n\r\n            console.log( 'adding spaceMap for:' + prim.name );\r\n\r\n            prim.sphereMap = new Map3d( this.util );\r\n\r\n            prim.sphereMap.initRandom ( w, h, d, numPoints );\r\n\r\n            // roughness 0.2 of 0-1, flatten = 1 of 0-1;\r\n\r\n            prim.spaceMap[ prim.spaceMap.type.CLOUD ]( prim.divisions[ 0 ], prim.divisions[ 1 ], prim.divisions[2], 0.6, 1 );\r\n\r\n        }\r\n\r\n        // Vertices.\r\n\r\n        // Indices.\r\n\r\n        // Normals.\r\n\r\n        this.computeNormals( vertices, indices, normals );\r\n\r\n        // Tangents.\r\n\r\n        this.computeTangents( vertices, indices, normals, texCoords );\r\n\r\n        // Colors already present, or computed in this.createBuffers.\r\n\r\n        // Return the buffer, or add array data to the existing Prim data.\r\n\r\n        if( prim.geometry.makeBuffers === true ) {\r\n\r\n            return this.createBuffers( prim.geometry );\r\n\r\n        } else {\r\n\r\n            return this.addBufferData( prim.geometry, vertices, indices, texCoords, normals, tangents, colors );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * type LINE\r\n     * rendered as GL_LINE.\r\n     * prim.dimensions    = (vec4) [ x, y, z, thickness | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryLine ( prim ) {\r\n\r\n        let geo = prim.geometry;\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data;\r\n\r\n        // Vertices.\r\n\r\n        // Indices.\r\n\r\n        // Normals.\r\n\r\n        // Tangents.\r\n\r\n        // Colors.\r\n\r\n        if( ! colors.length ) {\r\n\r\n            geo.colors.data = this.computeColors( normals, colors );\r\n\r\n        }\r\n\r\n        // Return the buffer, or add array data to the existing Prim data.\r\n\r\n        if( prim.geometry.makeBuffers === true ) {\r\n\r\n            return this.createBuffers( prim.geometry );\r\n\r\n        } else {\r\n\r\n            return this.addBufferData( prim.geometry, vertices, indices, texCoords, normals, tangents, colors );\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /** \r\n     * type POLYGON.\r\n     * rendered as GL_POLYGON.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryPoly ( prim ) {\r\n\r\n       let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data;\r\n\r\n        let l = prim.dimensions[ 0 ], \r\n        w = prim.dimensions[ 2 ];\r\n\r\n        // Strategy is to determine number of sides, equally space, then connect.\r\n\r\n        let sides = prim.divisions[ 0 ];\r\n\r\n        // Get the distance between Points in radians.\r\n\r\n        let sideInc = 2.0 * Math.PI * 1.0 / sides;\r\n\r\n        for ( let i = 0; i < sides; i++ ) {\r\n\r\n            // Vertices (also includes x/z sizing.\r\n\r\n            vertices.push( \r\n\r\n                Math.sin( sideInc * i ) * l,\r\n                0.0,\r\n                Math.cos( sideInc * i ) * w\r\n\r\n            );\r\n\r\n            // Indices (if we're not making a cap).\r\n\r\n            indices.push( i ); //NOT drawing triangles (use polygon shader)!\r\n\r\n            // Normals.\r\n\r\n            normals.push( 0, 1, 0 );\r\n\r\n        }\r\n\r\n        //this.computeNormals( vertices, indices, normals );\r\n\r\n        // Indices (if we are making a cap) {\r\n\r\n        // Tangents.\r\n\r\n        this.computeTangents( vertices, indices, normals, texCoords );\r\n\r\n        // Colors.\r\n\r\n        if( ! colors.length ) {\r\n\r\n            geo.colors.data = this.computeColors( normals, colors );\r\n\r\n        }\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n    /** \r\n     * Objects created with uv methods (i.e. they have polar points).\r\n     * rendered as GL_TRIANGLES.\r\n     * startSlice cuts off the cylinder, and wraps the texture across the top. \r\n     * endSlize truncates the bottom of the cylinder, and wraps the texture across the bottom.\r\n     * for an open cylinder with no caps, set startSlice and endSlize to zero.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\r\n     *\r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometrySphere ( prim ) {\r\n\r\n        const list = this.typeList;\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays.\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data; \r\n\r\n        let longitudeBands = prim.divisions[ 0 ] // x axis (really xz)\r\n\r\n        let latitudeBands = prim.divisions[ 1 ]; // y axis\r\n\r\n        // Radius is measured along the x axis.\r\n\r\n        let l = prim.dimensions[ 0 ],\r\n        w = prim.dimensions[ 1 ], \r\n        h = prim.dimensions[ 2 ], \r\n        startSlice = prim.dimensions[ 3 ] || 0,\r\n        endSlice = prim.dimensions[ 4 ] || 1.0;\r\n\r\n        // Everything except SPHERE, CYLINDER, SPINDLE, and CONE is a half-object.\r\n\r\n        let latStart = 0, longStart = 0, latDist;\r\n\r\n        if( prim.type === list.SPHERE || prim.type === list.CYLINDER || \r\n\r\n            prim.type === list.SPINDLE || prim.type === list.CONE || prim.type === list.TEARDROP ) {\r\n\r\n            latDist = latitudeBands;\r\n\r\n        } else if ( prim.type === list.CAP ) {\r\n\r\n            latDist = 1; // one flat object, central points + one ring.\r\n\r\n        } else {\r\n\r\n            latDist = latitudeBands / 2; // half-domes and half-cones\r\n\r\n        }\r\n\r\n        let latNum, longNum;\r\n\r\n        // Start our uv build loop.\r\n\r\n        for ( latNum = latStart; latNum <= latDist; latNum++ ) {\r\n\r\n            let theta = latNum * Math.PI / latitudeBands;\r\n\r\n            let sinTheta = Math.sin( theta );\r\n\r\n            let cosTheta = Math.cos( theta );\r\n\r\n            for ( longNum = longStart; longNum <= longitudeBands; longNum++ ) {\r\n\r\n                //console.log(\"STARTSLICE FOR:\" + prim.name + \" = \" + startSlice );\r\n\r\n                let phi = longNum * 2 * Math.PI / longitudeBands;\r\n\r\n                let sinPhi = Math.sin( phi );\r\n\r\n                let cosPhi = Math.cos( phi );\r\n\r\n                let x, y, z, u, v, r;\r\n\r\n                // Compute vertices.\r\n\r\n                let lat = latNum / latDist;\r\n\r\n                r = lat / 2; // use for no-spherical shapes.\r\n\r\n                let long = longNum / longitudeBands;\r\n\r\n                u = 1 - long;\r\n                v = 1 - lat;\r\n\r\n                x = cosPhi * sinTheta / 2;\r\n                z = sinPhi * sinTheta / 2;\r\n\r\n                switch( prim.type ) {\r\n\r\n                    case list.CAP:\r\n                        x = cosPhi / 4;\r\n                        z = sinPhi / 4;\r\n                        y = 0;\r\n                        break;\r\n\r\n                    case list.CYLINDER:\r\n                        if ( startSlice > 0 && lat <= startSlice ) {\r\n                            y = 1 - startSlice;\r\n                        }\r\n                        else if ( endSlice !== 1.0 && lat >= endSlice ) {\r\n                            y = 1 - endSlice;\r\n                        } else {\r\n                            y = 1 - lat;\r\n                            x = cosPhi / 2;\r\n                            z = sinPhi / 2;\r\n                        }\r\n                        y -= 0.5;\r\n                        break;\r\n\r\n                    case list.SPHERE:\r\n                        y = cosTheta / 2;\r\n                        break;\r\n\r\n                    case list.TOPDOME:\r\n                    case list.DOME:\r\n                        y = cosTheta / 2;\r\n                        break;\r\n\r\n                    case list.SKYDOME:\r\n                        y = cosTheta / 2;\r\n                        u = long;\r\n                        //v = 1 - lat;\r\n                        break;\r\n\r\n                    case list.BOTTOMDOME:\r\n                        y = ( (1 - cosTheta) / 2 ) - 0.5;\r\n                        u = long;\r\n                        v = lat;\r\n                        break;\r\n\r\n                    case list.SPINDLE:\r\n                        if( lat <= 0.4 ) {\r\n                            x = cosPhi * lat;\r\n                            z = sinPhi * lat;\r\n                        } else {\r\n                            x = cosPhi * ( 1 - lat + ( 1 / latDist ) )\r\n                            z = sinPhi * ( 1 - lat + ( 1 / latDist ) )\r\n                        }\r\n                            y = 1 - lat - 0.5;\r\n                        break;\r\n\r\n                    case list.TEARDROP:\r\n                        if( lat < 0.5 ) {\r\n                            y = cosTheta / 4;\r\n                        } else {\r\n                            x = 2 * cosPhi * ( 0.5  - r );\r\n                            z = 2 * sinPhi * ( 0.5  - r );\r\n                            y = cosTheta / 2;\r\n                        }\r\n                        break;\r\n\r\n                    case list.CONE:\r\n                        if( lat <= startSlice ) {\r\n\r\n                            y = 1 - startSlice;   \r\n                            x = cosPhi * r;\r\n                            z = sinPhi * r;\r\n                        } \r\n                        else if ( lat > endSlice ) { // NOTE: not >= endSlice\r\n                            y = 1 - endSlice ;\r\n  \r\n                            x = cosPhi * sinTheta / 2\r\n                            z = sinPhi * sinTheta / 2;\r\n                        } \r\n                        else {\r\n                            y = 1 - lat;\r\n                            x = cosPhi * r;\r\n                            z = sinPhi * r;\r\n                        }\r\n                        y -= 0.5;\r\n                        break;\r\n\r\n                    case list.TOPCONE:\r\n                        x = cosPhi * r;\r\n                        z = sinPhi * r;\r\n                        y = 0.5 - r;\r\n                        break;\r\n\r\n                    case list.BOTTOMCONE:\r\n                        x = cosPhi * ( 0.5 - r );\r\n                        z = sinPhi * ( 0.5 - r );\r\n                        y = 0.0 - r;\r\n                        break;\r\n\r\n                }\r\n\r\n                // Texture coords.\r\n\r\n                texCoords.push( u, v );\r\n\r\n                // Push normals.\r\n\r\n                let n = vec3.normalize( [ 0, 0, 0 ], [ x, y, z ] );\r\n\r\n                normals.push( n[ 0 ], n[ 1 ], n[ 2 ] );\r\n\r\n                // Push vertices.\r\n\r\n                vertices.push( x * l, y * w, z * h );\r\n\r\n                // These were wrapped bottom->top, so reverse y on normals.\r\n\r\n                if ( prim.type === list.BOTTOMDOME || prim.type === list.BOTTOMCONE || prim.type === list.SKYDOME ) {\r\n\r\n                    y = -y; // the y value (have to flip indices backwards for SKYDOME for it to work).\r\n\r\n                }\r\n\r\n                // Sphere indices.\r\n\r\n                if ( latNum !== latDist && longNum !== longitudeBands ) {\r\n\r\n                    let first = ( latNum * ( longitudeBands + 1 ) ) + longNum;\r\n\r\n                    let second = first + longitudeBands + 1;\r\n\r\n                    // Texture only visible outside.\r\n\r\n                    indices.push( first + 1, second + 1, second );\r\n\r\n                    indices.push( first, first + 1,  second );\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        //////////////////geo = this.subDivide( geo );\r\n\r\n\r\n        // Wind the SKYDOME indices backwards so texture displays inside.\r\n\r\n        if ( prim.type === list.SKYDOME ) {\r\n\r\n            geo.indices.data = indices.reverse();\r\n\r\n        }\r\n\r\n        // Tangents.\r\n\r\n        geo.tangents.data = tangents = this.computeTangents( vertices, indices, normals, texCoords );\r\n\r\n        // Color array is pre-created, or gets a default in createBuffers().\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n    /** \r\n     * type CAP\r\n     * rendered as GL_TRIANGLES.\r\n     * Just a flattened half-sphere creating a circular 'lid'.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryCap( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type DOME\r\n     * rendered as GL_TRIANGLES.\r\n     * Half-sphere, visible from outside.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryDome ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type TOPDOME.\r\n     * rendered as WebGL TRIANGLES.\r\n     * Half-sphere (equivalent to type DOME).\r\n     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryTopDome ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type SKYDOME\r\n     * rendered as GL_TRIANGLES.\r\n     * Half-sphere, Indices are reversed, so texture displays inside by default.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometrySkyDome ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type BOTTOMDOME\r\n     * rendered as GL_TRIANGLES.\r\n     * bowl shaped, formed from lower half of sphere.\r\n     * prim.dimensions    = (vec4) [ x, y, z ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryBottomDome ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type CYLINDER\r\n     * rendered as GL_TRIANGLES.\r\n     * Cylinder, either open or closed, visible from outside.\r\n     * startSlice cuts off the cylinder, and wraps the texture across the top. \r\n     * endSlize truncates the bottom of the cylinder, and wraps the texture across the bottom.\r\n     * for an open cylinder with no caps, set startSlice and endSlize to zero.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryCylinder ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type CONE.\r\n     * rendered as GL_TRIANGLES (equivalent to TOPCONE).\r\n     * Cone can have segments sliced off its beginning or end.\r\n     * startSlice cuts off the cone, and wraps the texture across the top. \r\n     * endSlize truncates the bottom of the cone, and wraps the texture across the bottom.\r\n     * for a cone with no caps, set startSlice and endSlize to zero.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryCone ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type TOPCONE.\r\n     * rendered as GL_TRIANGLES.(equivalent to CONE).\r\n     * startSlice cuts off the cone, and wraps the texture across the top. \r\n     * endSlize truncates the bottom of the cone, and wraps the texture across the bottom.\r\n     * for a cone with no caps, set startSlice and endSlize to zero.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     *\r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryTopCone ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type BOTTOMCONE\r\n     * rendered as GL_TRIANGLES.\r\n     * Cone structure, pointing downwards.\r\n     * startSlice cuts off the cone, and wraps the texture across the top. \r\n     * endSlize truncates the bottom of the cone, and wraps the texture across the bottom.\r\n     * for a cone with no caps, set startSlice and endSlize to zero.\r\n     * prim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     *\r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryBottomCone ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /**\r\n     * TYPE SPINDLE.\r\n     * rendered as GL_TRIANGLES.\r\n     * Spindle (two cones stuck together).\r\n     * prim.dimensions    = (vec4) [ x, y, z ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometrySpindle ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    geometryTeardrop ( prim ) {\r\n\r\n        return this.geometrySphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type CAPSULE\r\n     * rendered as WebGL TRIANGLES.\r\n     * a cylinder with two spheres on each end, similar to capped cylinder, \r\n     * equivalent to a closed cube.\r\n     * @link https://github.com/vorg/primitive-capsule\r\n     * position x axis is the radius, y axis is the height z not used\r\n     * dimensions x is number of steps along the y axis, dimensions y is the number of radial \r\n     * divisions around the capsule.\r\n     * prim.dimensions    = (vec4) [ x, y, z ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryCapsule ( prim ) {\r\n\r\n        const list = this.typeList;\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        let util = this.util;\r\n\r\n        let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays.\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data; \r\n\r\n        // Radius is measured along the x axis, height along y axis.\r\n\r\n        let radius = prim.dimensions[ 0 ] || 0.5,\r\n        height = prim.dimensions[ 1 ] || 1.0,\r\n        subdivisionsHeight = prim.divisions[ 0 ] || 12,\r\n        numSegments = prim.divisions[ 1 ] || 12;\r\n\r\n        var positions = [];\r\n        //var normals = [];\r\n        var uvs = [];\r\n        var cells = [];\r\n\r\n        function calculateRing( segments, r, y, dy ) {\r\n\r\n            var segIncr = 1.0 / ( segments - 1 );\r\n\r\n            for( var s = 0; s < segments; s++ ) {\r\n\r\n                var x = Math.cos( ( Math.PI * 2 ) * s * segIncr ) * r;\r\n\r\n                var z = Math.sin( ( Math.PI * 2 ) * s * segIncr ) * r;\r\n\r\n                positions.push( radius * x, radius * y + height * dy, radius * z );\r\n\r\n                normals.push( x, y, z )\r\n\r\n                var u =  1 - ( s * segIncr );\r\n\r\n                var v = 0.5 + ( ( radius * y + height * dy ) / ( 2.0 * radius + height ) );\r\n\r\n                uvs.push( u, v );\r\n\r\n            }\r\n        }\r\n\r\n        var ringsBody = subdivisionsHeight + 1;\r\n\r\n        var ringsTotal = subdivisionsHeight + ringsBody;\r\n\r\n\r\n        var bodyIncr = 1.0 / ( ringsBody - 1 );\r\n\r\n        var ringIncr = 1.0 / ( subdivisionsHeight - 1 );\r\n\r\n        for( var r = 0; r < subdivisionsHeight / 2; r++ ) {\r\n\r\n            calculateRing( numSegments, Math.sin( Math.PI * r * ringIncr), Math.sin( Math.PI * ( r * ringIncr - 0.5 ) ), -0.5 );\r\n\r\n        }\r\n\r\n        for( var r = 0; r < ringsBody; r++ ) {\r\n\r\n            calculateRing( numSegments, 1.0, 0.0, r * bodyIncr - 0.5);\r\n\r\n        }\r\n\r\n        for( var r = subdivisionsHeight / 2; r < subdivisionsHeight; r++ ) {\r\n\r\n            calculateRing( numSegments, Math.sin( Math.PI * r * ringIncr), Math.sin( Math.PI * ( r * ringIncr - 0.5 ) ), +0.5);\r\n\r\n        }\r\n\r\n        for( var r = 0; r < ringsTotal - 1; r++ ) {\r\n\r\n            for( var s = 0; s < numSegments - 1; s++ ) {\r\n\r\n                cells.push(\r\n                    ( r * numSegments + ( s + 1 ) ),\r\n                    ( r * numSegments + ( s + 0 ) ),\r\n                    ( ( r + 1 ) * numSegments + ( s + 1 ) )\r\n                    );\r\n\r\n                cells.push(\r\n                    ( ( r + 1 ) * numSegments + ( s + 0 ) ),\r\n                    ( ( r + 1 ) * numSegments + ( s + 1 ) ),\r\n                    ( r * numSegments + s )\r\n                 )\r\n\r\n            }\r\n\r\n        }\r\n\r\n        geo.vertices.data = positions;\r\n\r\n        geo.indices.data = cells;\r\n\r\n        geo.normals.data = normals;\r\n\r\n        geo.texCoords.data = uvs;\r\n\r\n        // Tangents.\r\n\r\n        geo.tangents.data = tangents = this.computeTangents( vertices, indices, normals, texCoords );\r\n\r\n        // Color array is pre-created, or gets a default in createBuffers().\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n    /** \r\n     * Create a PLANE, CUBE, or spherical object from cube mesh.\r\n     * --------------------------------------------------------------------\r\n     * type CUBE.\r\n     * rendered as WebGL TRIANGLES.\r\n     * adjust curveRadius to round the edges of the Cube.\r\n     * used by several other Prim routines (CUBESPHERE, PLANE, OUTERPLANE, \r\n     * INNERPLANE, CURVEDPLANE, CURVEDOUTERPLANE, CURVEDINNERPLANE)\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryCube ( prim ) {\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        const flatten = this.util.flatten;\r\n\r\n        const list = this.typeList;\r\n\r\n        const side = this.side;\r\n\r\n        let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data;\r\n\r\n        let sx = prim.dimensions[ 0 ],   // x width\r\n        sy = prim.dimensions[ 1 ],       // y height\r\n        sz = prim.dimensions[ 2 ],       // z depth\r\n        nx = prim.divisions[ 0 ],        // should be x , j\r\n        ny = prim.divisions[ 1 ],        // should be y, i \r\n        nz = prim.divisions[ 2 ]         // should be z\r\n\r\n        //var numVertices = ( nx + 1 ) * ( ny + 1 ) * 2 + ( nx + 1 ) * ( nz + 1 ) * 2 + ( nz + 1 ) * ( ny + 1 ) * 2;\r\n\r\n        var positions = [];\r\n\r\n        var norms = [];\r\n\r\n        let vertexIndex = 0;\r\n\r\n        switch ( prim.type ) {\r\n\r\n            case list.CUBE:\r\n\r\n            case list.CUBESPHERE:\r\n\r\n                makePlane( 0, 1, 2, sx, sy, nx, ny,  sz / 2,  1, -1 ); //front\r\n\r\n                makePlane( 0, 1, 2, sx, sy, nx, ny, -sz / 2, -1, -1 ); //back\r\n\r\n                makePlane( 2, 1, 0, sz, sy, nz, ny, -sx / 2,  1, -1 ); //left\r\n\r\n                makePlane( 2, 1, 0, sz, sy, nz, ny,  sx / 2, -1, -1 ); //right\r\n\r\n                makePlane( 0, 2, 1, sx, sz, nx, nz,  sy / 2,  1,  1 ); //top\r\n\r\n                makePlane( 0, 2, 1, sx, sz, nx, nz, -sy / 2,  1, -1 ); //bottom\r\n\r\n                break;\r\n\r\n            case list.PLANE:\r\n            case list.CURVEDOUTERPLANE:\r\n            case list.CURVEDINNERPLANE:\r\n            case list.TERRAIN:\r\n\r\n                switch( prim.dimensions[ 3 ] ) { // which side, based on cube sides\r\n\r\n                    case side.FRONT:\r\n                        makePlane( 0, 1, 2, sx, sy, nx, ny, sz / 2,  1, -1 );\r\n                    break;\r\n\r\n                    case side.BACK:\r\n                        makePlane( 0, 1, 2, sx, sy, nx, ny, -sz / 2, -1, -1 );\r\n                    break;\r\n\r\n                    case side.LEFT:\r\n                        makePlane( 2, 1, 0, sx, sy, nz, ny, -sx / 2,  1, -1 );\r\n                    break;\r\n\r\n                    case side.RIGHT:\r\n                        makePlane( 2, 1, 0, sx, sy, nz, ny,  sx / 2, -1, -1 ); \r\n                        break;\r\n\r\n                    case side.TOP:\r\n                        makePlane( 0, 2, 1, sx, sy, nx, nz,  sy / 2,  1,  1 ); // ROTATE xy axis\r\n                        break;\r\n\r\n                    case side.BOTTOM:\r\n                        makePlane( 0, 2, 1, sx, -sy, nx, nz, -sy / 2,  1, -1 ); // ROTATE xy axis\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        // Make an individual Plane.\r\n\r\n        function makePlane( u, v, w, su, sv, nu, nv, pw, flipu, flipv ) {\r\n\r\n            // Create a size, positioning in correct position.\r\n\r\n            var vertShift = vertexIndex;\r\n\r\n            if( prim.name === 'testPlane') console.log( 'i:' + i + ' j:' + j)\r\n\r\n            for( var j = 0; j <= nv; j++ ) {\r\n\r\n                for( var i = 0; i <= nu; i++ ) {\r\n\r\n                    var vert = positions[ vertexIndex ] = [ 0, 0, 0 ];\r\n\r\n                    vert[ u ] = ( -su / 2 + i * su / nu ) * flipu;\r\n\r\n                    vert[ v ] = ( -sv/2 + j * sv / nv ) * flipv;\r\n\r\n                    vert[ w ] = pw;\r\n\r\n                    // heightMap is always the middle, up-facing vector.\r\n\r\n                    if ( prim.heightMap ) {\r\n\r\n                        // our 'y' for the TOP x/z MAY NEED TO CHANGE FOR EACH SIDE\r\n\r\n                        vert[ w ] = prim.heightMap.getPixel( i, j );\r\n\r\n                    }\r\n\r\n                    // Normals.\r\n\r\n                    norms[ vertexIndex ] = [ 0, 0, 0 ];\r\n\r\n                    // Texture coords.\r\n\r\n                    texCoords.push( i / nu, 1.0 - j / nv );\r\n\r\n                    ++vertexIndex;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // Compute indices.\r\n\r\n            for(var j = 0; j < nv; j++ ) {\r\n\r\n                for(var i = 0; i < nu; i++ ) {\r\n\r\n                    var n = vertShift + j * ( nu + 1 ) + i;\r\n\r\n                    indices.push( n, n + nu  + 1, n + nu + 2 );\r\n\r\n                    indices.push( n, n + nu + 2, n + 1 );\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } // end of makePlane.\r\n\r\n        // Round the edges of the CUBE or SPHERECUBE to a sphere.\r\n\r\n        if ( ( prim.type === list.CUBE || prim.type === list.CUBESPHERE ) && prim.divisions[ 3 ] !== 0 ) {\r\n\r\n            var tmp = [ 0, 0, 0 ];\r\n\r\n            // Radius controlled by 4th parameter in divisions\r\n\r\n            var radius = prim.divisions[ 3 ];\r\n\r\n            var rx = sx / 2.0;\r\n\r\n            var ry = sy / 2.0;\r\n\r\n            var rz = sz / 2.0;\r\n\r\n            for( var i = 0; i < positions.length; i++ ) {\r\n\r\n                var pos = positions[ i ];\r\n\r\n                var normal = normals[ i ];\r\n\r\n                var inner = [ pos[ 0 ], pos[ 1 ], pos[ 2 ] ];\r\n\r\n                if ( pos[ 0 ] < -rx + radius ) {\r\n\r\n                    inner[ 0 ] = -rx + radius;\r\n\r\n                }\r\n\r\n                else if ( pos[ 0 ] > rx - radius ) {\r\n\r\n                    inner[ 0 ] = rx - radius;\r\n\r\n                }\r\n\r\n                if ( pos[ 1 ] < -ry + radius ) {\r\n\r\n                    inner[ 1 ] = -ry + radius;\r\n\r\n                }\r\n\r\n                else if ( pos[ 1 ] > ry - radius) {\r\n\r\n                    inner[ 1 ] = ry - radius;\r\n\r\n                }\r\n\r\n                if ( pos[ 2 ] < -rz + radius ) {\r\n\r\n                    inner[ 2 ] = -rz + radius;\r\n\r\n                }\r\n\r\n                else if ( pos[ 2 ] > rz - radius ) {\r\n\r\n                    inner[ 2 ] = rz - radius;\r\n\r\n                }\r\n\r\n                // Re-compute position of moved vertex via normals.\r\n\r\n                normal = [ pos[ 0 ], pos[ 1 ], pos[ 2 ] ];\r\n\r\n                vec3.sub( normal, normal, inner );\r\n\r\n                vec3.normalize( normal, normal );\r\n\r\n                //normals[ i ] = normal;\r\n\r\n                pos = [ inner[ 0 ], inner[ 1 ], inner[ 2 ] ];\r\n\r\n                tmp = [ normal[ 0 ], normal[ 1 ], normal[ 2 ] ];\r\n\r\n                vec3.scale( tmp, tmp, radius );\r\n\r\n                vec3.add( pos, pos, tmp );\r\n\r\n                positions[ i ] = pos;\r\n\r\n            }\r\n\r\n        } else if ( ( prim.type === list.CURVEDOUTERPLANE || prim.type === list.CURVEDINNERPLANE ) && prim.dimensions[ 4 ] && prim.dimensions[ 4 ] !== 0 ) {\r\n\r\n            let dSide = 1;\r\n\r\n            switch( prim.dimensions[ 3 ] ) {\r\n\r\n                case side.FRONT:\r\n                    if ( prim.type === list.CURVEDINNERPLANE || prim.type == list.INNERPLANE ) dSide = -1;\r\n                    break;\r\n\r\n                case side.BACK:\r\n                    if ( prim.type === list.CURVEDOUTERPLANE || prim.type === list.OUTERPLANE ) dSide = -1;\r\n                    break;\r\n\r\n                case side.LEFT:\r\n                    if ( prim.type === list.CURVEDOUTERPLANE || prim.type === list.OUTERPLANE ) dSide = -1;\r\n                    break;\r\n\r\n                case side.RIGHT:\r\n                    if ( prim.type === list.CURVEDINNERPLANE || prim.type === list.INNERPLANE ) dSide = -1;\r\n                    break;\r\n\r\n                case side.TOP:\r\n                    if ( prim.type === list.CURVEDOUTERPLANE || prim.type === list.OUTERPLANE ) dSide = -1;\r\n                    break;\r\n\r\n                case side.BOTTOM:\r\n                    if ( prim.type === list.CURVEDINNERPLANE || prim.type === list.INNERPLANE ) dSide = -1\r\n                    break;\r\n            }\r\n\r\n            for( var i = 0; i < positions.length; i++ ) {\r\n\r\n                switch ( prim.dimensions[ 3 ] ) {\r\n\r\n                case side.FRONT:\r\n                    positions[ i ][ 2 ] = dSide * Math.cos( positions[ i ][ 0 ] ) * prim.dimensions[ 4 ];\r\n                    break;\r\n\r\n                case side.BACK:\r\n                    positions[ i ][ 2 ] = dSide * Math.cos( positions[ i ][ 0 ] ) * prim.dimensions[ 4 ];\r\n                    break;\r\n\r\n                case side.LEFT:\r\n                    positions[ i ][ 0 ] = dSide * Math.cos( positions[ i ][ 2 ] ) * prim.dimensions[ 4 ];\r\n                    break;\r\n\r\n                case side.RIGHT:\r\n                    positions[ i ][ 0 ] = dSide * Math.cos( positions[ i ][ 2 ] ) * prim.dimensions[ 4 ];\r\n                    break;\r\n\r\n                case side.TOP:\r\n                    positions[ i ][ 1 ] = dSide * Math.cos( positions[ i ][ 0 ] ) * prim.dimensions[ 4 ];\r\n                    break;\r\n\r\n                case side.BOTTOM:\r\n                    positions[ i ][ 1 ] = -Math.cos( positions[ i ][ 0 ] ) * prim.dimensions[ 4 ]; // SEEN FROM INSIDE< CORRECT\r\n                    break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n        // Flatten arrays, since we created using 2 dimensions.\r\n\r\n        vertices = geo.vertices.data = flatten( positions, false );\r\n\r\n        normals = geo.normals.data = flatten( norms, false );\r\n\r\n        // Re-compute normals, which may have changed.\r\n\r\n        this.computeNormals( vertices, indices, normals );\r\n\r\n        // Color array is pre-created, or gets a default in createBuffers().\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n    /** \r\n     * type PLANE, OUTERPLANE\r\n     * rendered as WebGL TRIANGLES.\r\n     * visible from the 'outside' as defined by the outward vector from Prim.side.\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryOuterPlane ( prim ) {\r\n\r\n        return this.geometryCube( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type INNERPLANE\r\n     * rendered as WebGL TRIANGLES.\r\n     * visible from the 'inside', as defined by the outward vectore from Prim.side.\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryInnerPlane ( prim ) {\r\n\r\n        return this.geometryCube( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * type CURVEDPLANE, CUREVEDOUTERPLANE\r\n     * rendered as WebGL TRIANGLES.\r\n     * visible from the 'outside' as defined by the outward vector from Prim.side.\r\n     * curve radius sets the amount of curve by assigning a radius for a circle.\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n     geometryCurvedOuterPlane( prim ) {\r\n\r\n        return this.geometryCube( prim );\r\n\r\n     }\r\n\r\n     /** \r\n     * type CURVEDINNERPLANE\r\n     * rendered as GL_TRIANGLES.\r\n     * visible from the 'inside', as defined by the outward vectore from Prim.side.\r\n     * curve radius sets the amount of curve by assigning a radius for a circle.\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius | 0 ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n     geometryCurvedInnerPlane( prim ) {\r\n\r\n        return this.geometryCube( prim );\r\n\r\n     };\r\n\r\n    /** \r\n     * type TERRAIN.\r\n     * rendered as GL_TRIANGLES.\r\n     * Generate terrain, using a heightMap, from a PLANE object. The \r\n     * heightMap values are interpolated for each vertex in the PLANE.\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryTerrain ( prim ) {\r\n\r\n        if ( ! prim.heightMap ) {\r\n\r\n            console.log( 'adding heightmap for:' + prim.name );\r\n\r\n            prim.heightMap = new Map2d( this.util );\r\n\r\n            // roughness 0.2 of 0-1, flatten = 1 of 0-1;\r\n\r\n            prim.heightMap[ prim.heightMap.type.DIAMOND ]( prim.divisions[ 0 ], prim.divisions[2], 0.6, 1 );\r\n\r\n            // TODO: SCALE DOWN FOR WATERLINE.\r\n\r\n            //prim.heightMap.scale( 165, 165 );\r\n\r\n            //prim.heightMap.scale( 25, 25 );\r\n\r\n        }\r\n\r\n        // NOTE: this can make the heightmap in any orientation.\r\n\r\n        return this.geometryOuterPlane( prim );\r\n\r\n    };\r\n\r\n    /** \r\n     * type CUBESPHERE.\r\n     * rendered as WebGL TRIANGLES.\r\n     * just sets the curveRadius to 1/2 of the prim size.\r\n     * prim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius ]\r\n     * prim.divisions     = (vec3) [ x, y, z ]\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryCubeSphere ( prim ) {\r\n\r\n        // force the rounding radii to a circle\r\n\r\n        prim.divisions[ 3 ] = prim.dimensions[ 0 ] / 2;\r\n\r\n           // NOTE: if there is a heightmap, return, then 'pincusion' out the points.\r\n\r\n        return this.geometryCube( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * Icosphere, adapted from Unity 3d tutorial.\r\n     * @link https://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\r\n     * divisions max: ~60\r\n     * @param {Object} prim the primitive needing geometry.\r\n     * @param {Boolean} noSphere if false, make an icosohedron.\r\n     */\r\n    geometryIcoSphere ( prim ) {\r\n\r\n        //const vec2 = this.glMatrix.vec2;\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        const flatten = this.util.flatten;\r\n\r\n        const list = this.typeList;\r\n\r\n        // Size and divisions.\r\n\r\n        let subdivisions;\r\n\r\n        subdivisions = prim.divisions[ 0 ];\r\n\r\n        if ( prim.type === list.ICOSOHEDRON ) {\r\n\r\n            subdivisions = 2;\r\n\r\n        } else {\r\n\r\n            subdivisions = prim.divisions[ 0 ]\r\n\r\n        }\r\n\r\n        let radius = prim.dimensions[ 0 ] * 0.5;\r\n\r\n        let resolution = subdivisions;\r\n\r\n        // Default vectors.\r\n\r\n        let getVecs = this.getStdVecs;\r\n\r\n        let directions = [\r\n            'left',\r\n            'back',\r\n            'right',\r\n            'forward'\r\n        ];\r\n\r\n        // Allocate memory, since we may have to access out-of-range vertices, indices.\r\n\r\n        let geo = prim.geometry;\r\n\r\n        // TODO: halve index length if making a dome.\r\n\r\n        let vertices = geo.vertices.data = new Array ( ( resolution + 1 ) * ( resolution + 1 ) * 4 - (resolution * 2 - 1) * 3 ),\r\n        indices  = geo.indices.data = new Array( (1 << ( subdivisions * 2 + 3) ) * 3 ),\r\n        texCoords = geo.texCoords.data = new Array( vertices.length ),\r\n        normals = geo.normals.data = new Array( vertices.length ),\r\n        tangents = geo.tangents.data = new Array( vertices.length );\r\n\r\n        // Initialize lots of default variables.\r\n\r\n        let v = 0, vBottom = 0, t = 0, i, d, progress, from, to;\r\n\r\n        for ( i = 0; i < 4; i++ ) {\r\n\r\n            vertices[ v++ ] = getVecs('down');\r\n\r\n        }\r\n\r\n        for ( i = 1; i <= resolution; i++ ) {\r\n\r\n            progress = i / resolution;\r\n\r\n            to = vec3.lerp( [ 0, 0, 0 ], getVecs( 'down' ), getVecs( 'forward' ), progress );\r\n\r\n            vertices[ v++ ] = vec3.copy( [ 0, 0, 0 ], to );\r\n\r\n            for ( d = 0; d < 4; d++) {\r\n\r\n                from = vec3.copy( [ 0, 0, 0 ], to );\r\n\r\n                to = vec3.lerp( [ 0, 0, 0 ], getVecs( 'down' ), getVecs( directions[ d ] ), progress );\r\n\r\n                t = createLowerStrip( i, v, vBottom, t, indices );\r\n\r\n                v = createVertexLine( from, to, i, v, vertices );\r\n\r\n                vBottom += i > 1 ? (i - 1) : 1;\r\n\r\n            }\r\n\r\n            vBottom = v - 1 - i * 4;\r\n\r\n        }\r\n\r\n        for ( i = resolution - 1; i >= 1; i-- ) {\r\n\r\n                progress = i / resolution;\r\n\r\n                to = vec3.lerp( [ 0, 0, 0 ], getVecs( 'up' ), getVecs( 'forward' ), progress );\r\n\r\n                vertices[ v++ ] = vec3.copy( [ 0, 0, 0 ], to );\r\n\r\n                for ( d = 0; d < 4; d++) {\r\n\r\n                    from = vec3.copy( [ 0, 0, 0 ], to );\r\n\r\n                    to = vec3.lerp( [ 0, 0, 0 ], getVecs( 'up' ), getVecs( directions[ d ] ), progress );\r\n\r\n                    t = createUpperStrip( i, v, vBottom, t, indices );\r\n\r\n                    v = createVertexLine( from, to, i, v, vertices );\r\n\r\n                    vBottom += i + 1;\r\n                }\r\n\r\n                vBottom = v - 1 - i * 4;\r\n\r\n        }\r\n\r\n        for ( i = 0; i < 4; i++ ) {\r\n\r\n            indices[ t++ ] = vBottom;\r\n\r\n            indices[ t++ ] = v;\r\n\r\n            indices[ t++ ] = ++vBottom;\r\n\r\n            vertices[ v++ ] = getVecs( 'up' );\r\n\r\n        }\r\n\r\n        // Create our Normals, and set icosphere to unit size.\r\n\r\n        for ( i = 0; i < vertices.length; i++ ) {\r\n\r\n            // Toggle icosphere with icosohedron.\r\n\r\n            //if ( prim.type === list.ICOSPHERE ) {\r\n\r\n            if ( prim.type !== list.OCTAHEDRON ) {\r\n\r\n                vertices[i] = vec3.normalize( [ 0, 0, 0 ], vertices[ i ] );\r\n\r\n            }\r\n\r\n            //}\r\n\r\n            normals[i] = vec3.copy( [ 0, 0, 0 ], vertices[ i ] );\r\n\r\n        }\r\n\r\n        // Texture coords.\r\n\r\n        createUV( vertices, texCoords );\r\n\r\n        // Tangents.\r\n\r\n        createTangents( vertices, tangents );\r\n\r\n        // Scale. NOTE: this has to be after createUV and createTangents (assuming unit sphere).\r\n\r\n        // TODO: TEST TO MAKE SURE IT WORKS\r\n\r\n        // TODO: MAKE DOME INSTEAD OF SPHERE OPTION.\r\n\r\n        if ( radius != 1 ) {\r\n\r\n            for ( i = 0; i < vertices.length; i++ ) {\r\n\r\n                    vertices[ i ][ 0 ] *= radius;\r\n\r\n                    vertices[ i ][ 1 ] *= prim.dimensions[1] / 2; //radius;\r\n\r\n                    vertices[ i ][ 2 ] *= prim.dimensions[2] / 2; //radius;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Flatten the data arrays.\r\n\r\n        vertices = geo.vertices.data = flatten( vertices, false );\r\n\r\n        texCoords = geo.texCoords.data = flatten( texCoords, false );\r\n\r\n        normals = geo.normals.data = flatten(normals, false );\r\n\r\n        tangents = geo.tangents.data = flatten(tangents, false );\r\n\r\n        // Color array is pre-created, or gets a default in createBuffers().\r\n\r\n        // Helper functions.\r\n\r\n        // Create UV texCoords.\r\n\r\n        function createUV ( vertices, uv ) {\r\n\r\n            let previousX = 1;\r\n\r\n            for ( i = 0; i < vertices.length; i++ ) {\r\n\r\n                v = vertices[ i ];\r\n\r\n                if ( v[ 0 ] == previousX ) {  // was v.x\r\n\r\n                    uv[ i - 1 ][ 0 ] = 1;      // was v.x\r\n\r\n                }\r\n\r\n                previousX = v[ 0 ];           // was v.x\r\n\r\n                let textureCoordinates = [ 0, 0 ];\r\n\r\n                textureCoordinates[ 0 ] = Math.atan2( v[ 0 ], v[ 2 ] ) / ( -2 * Math.PI );  // was v.x, v.z\r\n\r\n                if ( textureCoordinates[ 0 ] < 0 ) {   // was textureCoordinates.x\r\n\r\n                    textureCoordinates[ 0 ] += 1;    // was textureCoordinates\r\n\r\n                }\r\n\r\n                textureCoordinates[ 1 ] = Math.asin( v[ 1 ] ) / Math.PI + 0.5;  // was v.y, textureCoordinates.y\r\n\r\n \r\n                uv[ i ] = textureCoordinates;\r\n            }\r\n\r\n            uv[ vertices.length - 4 ][ 0 ] = 0.125;\r\n\r\n            uv[ 0 ][ 0 ] = 0.125; // was v.x\r\n\r\n            uv[ vertices.length - 3 ][ 0 ] = 0.375\r\n\r\n            uv[ 1 ][ 0 ] = 0.375; // was v.x\r\n\r\n            uv[ vertices.length - 2][ 0 ] = 0.625\r\n\r\n            uv[ 2 ][ 0 ] = 0.625; // was v.x\r\n\r\n            uv[vertices.length - 1][ 0 ] = 0.875\r\n\r\n            uv[ 3 ][ 0 ] = 0.875; // was v.x\r\n\r\n            // Our engine wraps opposite, so reverse first coordinate (can't do it until we do all coordinates).\r\n\r\n            for ( i = 0; i < texCoords.length; i++ ) {\r\n\r\n                texCoords[ i ][ 0 ] = 1.0 - texCoords[ i ][ 0 ];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function createTangents (vertices, tangents) {\r\n\r\n            for ( i = 0; i < vertices.Length; i++ ) {\r\n\r\n                v = vertices[i];\r\n\r\n                v[1] = 0;            // was v.y\r\n\r\n                //v = v.normalized;\r\n                v = vec3.normalize( [ 0, 0, 0 ], v );\r\n\r\n                tangent = [ 0, 0, 0, 0 ];\r\n\r\n                tangent[ 0 ] = -v[ 2 ];\r\n\r\n                tangent[ 1 ] = 0;\r\n\r\n                tangent[ 2 ] = v[ 0 ];\r\n\r\n                tangent[ 3 ] = -1;\r\n\r\n                tangents[ i ] = tangent;\r\n\r\n            }\r\n\r\n            tangents[ vertices.length - 4 ] = [ -1, 0, 1 ];\r\n\r\n            tangents[ 0 ] = [ -1, 0, -1 ];\r\n\r\n            tangents[ vertices.length - 3 ] = [ 1, 0, -1 ];\r\n\r\n            tangents[ 1 ] = [ 1, 0, -1 ];\r\n\r\n            tangents[ vertices.length - 2 ] = [ 1, 0, 1 ];\r\n\r\n            tangents[ 2 ] = [ 1, 0, 1 ];\r\n\r\n            tangents[ vertices.length - 1 ] = [ -1, 0, 1 ];\r\n\r\n            tangents[ 3 ] = [ -1, 0, 1 ];\r\n\r\n            for ( i = 0; i < 4; i++ ) {\r\n\r\n                tangents[ vertices.length - 1 - i ][ 3 ] = tangents[ i ][ 3 ] = -1;\r\n\r\n            }\r\n        }\r\n\r\n        function createVertexLine ( from, to, steps, v, vertices ) {\r\n\r\n            for ( let i = 1; i <= steps; i++ ) {\r\n\r\n                //console.log(\"Vec3 \" + v + \" IS A:\" + vec3.lerp( [ 0, 0, 0 ], from, to, i / steps ))\r\n\r\n                vertices[ v++ ] = vec3.lerp( [ 0, 0, 0 ], from, to, i / steps );\r\n\r\n            }\r\n\r\n            //console.log(\"VECTOR ARRAY:\" + vertices.length)\r\n\r\n            return v;\r\n\r\n        }\r\n\r\n        function createLowerStrip ( steps, vTop, vBottom, t, triangles ) {\r\n\r\n            for ( let i = 1; i < steps; i++ ) {\r\n\r\n                triangles[t++] = vBottom;\r\n                triangles[t++] = vTop - 1;\r\n                triangles[t++] = vTop;\r\n\r\n                triangles[t++] = vBottom++;\r\n                triangles[t++] = vTop++;\r\n                triangles[t++] = vBottom;\r\n\r\n            }\r\n\r\n            triangles[t++] = vBottom;\r\n            triangles[t++] = vTop - 1;\r\n            triangles[t++] = vTop;\r\n\r\n            return t;\r\n\r\n        }\r\n\r\n        function createUpperStrip ( steps, vTop, vBottom, t, triangles ) {\r\n\r\n            triangles[t++] = vBottom;\r\n            triangles[t++] = vTop - 1;\r\n            triangles[t++] = ++vBottom;\r\n\r\n            for ( let i = 1; i <= steps; i++ ) {\r\n\r\n                triangles[t++] = vTop - 1;\r\n                triangles[t++] = vTop;\r\n                triangles[t++] = vBottom;\r\n\r\n                triangles[t++] = vBottom;\r\n                triangles[t++] = vTop++;\r\n                triangles[t++] = ++vBottom;\r\n            }\r\n\r\n            return t;\r\n\r\n        }\r\n\r\n        window.geo = geo;\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n    /** \r\n     * type ICOSOHEDRON.\r\n     * create a icosohedron.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryIcosohedron ( prim ) {\r\n\r\n        return this.geometryIcoSphere( prim, false );\r\n\r\n    }\r\n\r\n    /** \r\n     * type PYRAMID.\r\n     * create a closed pyramid shape, half of an icosohedron.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryPyramid ( prim ) {\r\n\r\n        // TODO: return upper half of icosohedron, and close. (possibly by setting \r\n        // bottom half to a comm y value)\r\n\r\n    }\r\n\r\n    /** \r\n     * type ICODOME.\r\n     * create a half-sphere from an icosphere.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryIcoDome( prim ) {\r\n\r\n    }\r\n\r\n    /** \r\n     * type TOPICODOME.\r\n     * create a half-sphere from an icosphere.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryTopIcoDome ( prim ) {\r\n\r\n    }\r\n\r\n    /** \r\n     * type SKYICODOME.\r\n     * create a half-sphere with texture only visible from the inside.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometrySkyIcoDome ( prim ) {\r\n\r\n    }\r\n\r\n    /** \r\n     * type BOTTOMICODOME.\r\n     * create a bowl shape from the lower half of an icosphere.\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryBottomIcoDome ( prim ) {\r\n\r\n    }\r\n\r\n\r\n    /** \r\n     * Create an octahedron\r\n     * Note: the icosphere algorith returns an octahedron if we don't \"inflate\" \r\n     * the object's vertices by normalizing.\r\n     * \r\n     * Additional links:\r\n     * @link https://github.com/nickdesaulniers/prims/blob/master/octahedron.js\r\n     * @link http://paulbourke.net/geometry/platonic/\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryOctahedron ( prim ) {\r\n\r\n        return this.geometryIcoSphere( prim );\r\n\r\n    }\r\n\r\n    /** \r\n     * Dodecahedron\r\n     * @link https://github.com/prideout/par/blob/master/par_shapes.h\r\n     * @link https://github.com/nickdesaulniers/prims/blob/master/dodecahedron.js\r\n     * @link http://vorg.github.io/pex/docs/pex-gen/Dodecahedron.html\r\n     */\r\n    geometryDodecahedron ( prim ) {\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays\r\n\r\n        // TODO: abstract the creation of the triangle fan for each pentagon.\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        sides = geo.sides.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data;\r\n\r\n        // Size and divisions.\r\n\r\n        let wi = prim.dimensions[ 0 ];\r\n\r\n        let hi = prim.dimensions[ 1 ];\r\n\r\n        let de = prim.dimensions[ 2 ];\r\n\r\n        let subdivisions = prim.divisions[ 0 ];\r\n\r\n        var phi = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n        var b = 1 / phi;\r\n\r\n        var c = 2 - phi;\r\n\r\n        var ertices = [\r\n             b,  b,  b,   0,  1,  c,  -b,  b,  b,  -c,  0,  1,   c,  0,  1,\r\n            -b, -b,  b,   0, -1,  c,   b, -b,  b,   c,  0,  1,  -c,  0,  1,\r\n             b, -b, -b,   0, -1, -c,  -b, -b, -b,  -c,  0, -1,   c,  0, -1,\r\n            -b,  b, -b,   0,  1, -c,   b,  b, -b,   c,  0, -1,  -c,  0, -1,\r\n             0,  1, -c,   0,  1,  c,   b,  b,  b,   1,  c,  0,   b,  b, -b,\r\n             0,  1,  c,   0,  1, -c,  -b,  b, -b,  -1,  c,  0,  -b,  b,  b,\r\n             0, -1, -c,   0, -1,  c,  -b, -b,  b,  -1, -c,  0,  -b, -b, -b,\r\n             0, -1,  c,   0, -1, -c,   b, -b, -b,   1, -c,  0,   b, -b,  b,\r\n             b,  b,  b,   c,  0,  1,   b, -b,  b,   1, -c,  0,   1,  c,  0,\r\n             b, -b, -b,   c,  0, -1,   b,  b, -b,   1,  c,  0,   1, -c,  0,\r\n            -b,  b, -b,  -c,  0, -1,  -b, -b, -b,  -1, -c,  0,  -1,  c,  0,\r\n            -b, -b,  b,  -c,  0,  1,  -b,  b,  b,  -1,  c,  0,  -1, -c,  0\r\n        ];\r\n\r\n\r\n\r\n        // The problem is that the five points listed are not 5 triangles, so we have\r\n        // to find the middle of each set of five, and duplicate the last point.\r\n        // Am I proud of this code?  No.\r\n\r\n        for ( let i = 0; i < ertices.length; i += 15) {\r\n\r\n            var a = [ertices[i], ertices[i + 1], ertices[i + 2]];\r\n            var b = [ertices[i + 3], ertices[i + 4], ertices[i + 5]];\r\n            var c = [ertices[i + 6], ertices[i + 7], ertices[i + 8]];\r\n            var d = [ertices[i + 9], ertices[i + 10], ertices[i + 11]];\r\n            var e = [ertices[i + 12], ertices[i + 13], ertices[i + 14]];\r\n        \r\n            var center = [\r\n                ( a[ 0 ] + b[ 0 ] + c[ 0 ] + d[ 0 ] + e[ 0 ] ) / 5,\r\n                ( a[ 1 ] + b[ 1 ] + c[ 1 ] + d[ 1 ] + e[ 1 ] ) / 5,\r\n                ( a[ 2 ] + b[ 2 ] + c[ 2 ] + d[ 2 ] + e[ 2 ] ) / 5\r\n            ];\r\n\r\n            let side = [];\r\n\r\n            vertices.push.apply(vertices, a);\r\n            side.push( a );\r\n\r\n            vertices.push.apply(vertices, b);\r\n            side.push( b );\r\n\r\n            vertices.push.apply(vertices, center);\r\n            side.push( center );\r\n\r\n            vertices.push.apply(vertices, b);\r\n            side.push( b );\r\n\r\n            vertices.push.apply(vertices, c);\r\n            side.push( c );\r\n\r\n            vertices.push.apply(vertices, center);\r\n            side.push( center );\r\n\r\n            vertices.push.apply(vertices, c);\r\n            side.push( c );\r\n\r\n            vertices.push.apply(vertices, d);\r\n            side.push( d );\r\n\r\n            vertices.push.apply(vertices, center);\r\n            side.push( center );\r\n\r\n            vertices.push.apply(vertices, d);\r\n            side.push( d );\r\n\r\n            vertices.push.apply(vertices, e);\r\n            side.push( e );\r\n\r\n            vertices.push.apply(vertices, center);\r\n            side.push( center );\r\n\r\n            vertices.push.apply(vertices, e);\r\n            side.push( e );\r\n\r\n            vertices.push.apply(vertices, a);\r\n            side.push( a );\r\n\r\n            vertices.push.apply(vertices, center);\r\n            side.push( center );\r\n\r\n            sides.push( side );\r\n\r\n        }\r\n\r\n        // Indices.\r\n\r\n        for ( var ii = 0, len = vertices.length / 3; ii < len; ii++ ) {\r\n\r\n            indices.push( ii );\r\n\r\n        }\r\n\r\n        for ( var i = 0; i < vertices.length; i += 15) {\r\n\r\n            setUV( i );\r\n            setUV( i + 3);\r\n            setUV( i + 6 );\r\n            setUV( i + 9);\r\n            setUV( i + 12);\r\n\r\n        }\r\n\r\n        // Normals.\r\n\r\n        for ( var i = 0; i < vertices.length; i += 9 ) {\r\n\r\n            var a = [ vertices[ i     ], vertices[ i + 1 ], vertices[ i + 2 ] ];\r\n\r\n            var b = [ vertices[ i + 3 ], vertices[ i + 4 ], vertices[ i + 5 ] ];\r\n\r\n            var c = [ vertices[ i + 6 ], vertices[ i + 7 ], vertices[ i + 8 ] ];\r\n\r\n            // Normalizing is probably not necessary.\r\n            // It should also be seperated out.\r\n\r\n            // Create normals.\r\n\r\n            let d = vec3.sub( [ 0, 0, 0 ], a, b );\r\n\r\n            let e = vec3.sub( [ 0, 0, 0 ], a, c );\r\n\r\n            let f = vec3.cross( [ 0, 0, 0 ], d, e );\r\n\r\n            let normal = vec3.normalize( [ 0, 0, 0 ], f );\r\n\r\n            normals.push( \r\n\r\n                normal[ 0 ], normal[ 1 ], normal[ 2 ],\r\n\r\n                normal[ 0 ], normal[ 1 ], normal[ 2 ],\r\n\r\n                normal[ 0 ], normal[ 1 ], normal[ 2 ]\r\n\r\n            );\r\n\r\n            // Scale.\r\n\r\n            vertices[ i ]     *= wi;\r\n\r\n            vertices[ i + 1 ] *= hi;\r\n\r\n            vertices[ i + 2 ] *= de;\r\n\r\n            vertices[ i + 3 ] *= wi;\r\n\r\n            vertices[ i + 4 ] *= hi;\r\n\r\n            vertices[ i + 5 ] *= de;\r\n\r\n            vertices[ i + 6 ] *= wi;\r\n\r\n            vertices[ i + 7 ] *= hi;\r\n\r\n            vertices[ i + 8 ] *= de;\r\n\r\n        }\r\n\r\n\r\n            // Texture coordinates using positions on a sphere.\r\n            // https://www.mvps.org/directx/articles/spheremap.htm\r\n\r\n\r\n            function setUV ( vPos ) {\r\n\r\n              let u, v;\r\n\r\n                u = Math.atan2( vertices[ vPos ], vertices[ vPos + 2 ] ) / ( 2 * Math.PI );  // was v.x, v.z\r\n\r\n                if ( u < 0 ) {   // was textureCoordinates.x\r\n\r\n                    u += 1;    // was textureCoordinates\r\n\r\n                }\r\n\r\n                v = Math.asin( vertices[ vPos + 1 ] ) / Math.PI + 0.5;  // was v.y, textureCoordinates.y\r\n\r\n                // corrections. TODO:\r\n              \r\n                texCoords.push( u, v );\r\n\r\n            }\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n    /** \r\n     * Torus object\r\n     * @link https://blogoben.wordpress.com/2011/10/26/webgl-basics-7-colored-torus/\r\n     * @link http://apparat-engine.blogspot.com/2013/04/procedural-meshes-torus.html\r\n     * Creates a 3D torus in the XY plane, returns the data in a new object composed of\r\n     *   several Float32Array objects named 'vertices' and 'colors', according to\r\n     *   the following parameters:\r\n     * r:  big radius\r\n     * sr: section radius\r\n     * n:  number of faces\r\n     * sn: number of faces on section\r\n     * k:  factor between 0 and 1 defining the space between strips of the torus\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryTorus ( prim ) {\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data;\r\n\r\n        let radius = prim.dimensions[ 0 ] / 2; // x coordinate, width of torus in x direction\r\n\r\n        let ringRadius = prim.dimensions[ 2 ] / 2; // ringradius\r\n\r\n        let rings = prim.divisions[ 0 ];\r\n\r\n        let sides = prim.divisions[ 1 ];\r\n\r\n       // radius = 0.5, ringRadius = 0.25, sides = 36, rings = 24;\r\n\r\n        let numVerticesPerRow = sides + 1;\r\n\r\n        let numVerticesPerColumn = rings + 1;\r\n\r\n        //let numVertices = numVerticesPerRow * numVerticesPerColumn;\r\n\r\n        let verticalAngularStride = Math.PI * 2.0 / rings;\r\n\r\n        let horizontalAngularStride = Math.PI * 2.0 / sides;\r\n\r\n        let theta = 0, phi = 0, x, y, z;\r\n\r\n        for ( let verticalIt = 0; verticalIt < numVerticesPerColumn; verticalIt++ ) {\r\n            \r\n            theta = verticalAngularStride * verticalIt;\r\n\r\n            for ( let horizontalIt = 0; horizontalIt < numVerticesPerRow; horizontalIt++ ) {\r\n          \r\n                phi = horizontalAngularStride * horizontalIt;\r\n\r\n                // position\r\n                x = Math.cos( theta ) * ( radius + ringRadius * Math.cos( phi ) );\r\n\r\n                y = Math.sin( theta ) * ( radius + ringRadius * Math.cos( phi ) );\r\n\r\n                z = ringRadius * Math.sin(phi);\r\n\r\n                vertices.push( x, y, z ); // NOTE: x, z, y gives a horizontal torus! NOTE: MAY WANT TO DO FOR PLANE\r\n\r\n                let norm = vec3.normalize( [ 0, 0, 0 ], [ x, y, z ] );\r\n\r\n                normals.push( norm[ 0 ], norm[ 1 ], norm[ 2 ] );\r\n\r\n                let u = horizontalIt / numVerticesPerRow;\r\n\r\n                let v = verticalIt / numVerticesPerColumn;\r\n\r\n                texCoords.push( u, v );\r\n\r\n            }\r\n\r\n        }\r\n\r\n       // let numIndices = sides * rings * 6;\r\n\r\n        for ( let verticalIt = 0; verticalIt < rings; verticalIt++ ) {\r\n\r\n            for ( let horizontalIt = 0; horizontalIt < sides; horizontalIt++ ) {\r\n\r\n                let lt = ( horizontalIt + verticalIt * ( numVerticesPerRow) );\r\n\r\n                let rt = ( ( horizontalIt + 1 ) + verticalIt * ( numVerticesPerRow ) );\r\n\r\n                let lb = ( horizontalIt + ( verticalIt + 1) * ( numVerticesPerRow ) );\r\n\r\n                let rb = ( ( horizontalIt + 1 ) + ( verticalIt + 1 ) * ( numVerticesPerRow ) );\r\n\r\n                indices.push( lb, rb, rt, lb, rt, lt );\r\n\r\n                // note: wrap backwards to see inside of torus.\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // Color array is pre-created, or gets a default in createBuffers().\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n    // geo primitives\r\n    // USE THIS!!!! https://github.com/nickdesaulniers/prims\r\n    // https://github.com/mhintz/platonic/tree/master/src\r\n    // https://github.com/azmobi2/html5-webgl-geometry-shapes/blob/master/webgl_geometry_shapes.html\r\n    // Subdivide algorithm\r\n    // https://github.com/mikolalysenko/loop-subdivide\r\n    // https://github.com/Erkaman/gl-catmull-clark\r\n    // https://www.ibiblio.org/e-notes/Splines/models/loop.js\r\n    // convert fonts to texture\r\n    // https://github.com/framelab/fontmatic\r\n    ///////////////////////////////////////////////////////////////////////\r\n\r\n    /** \r\n     * Generic 3d shape (e.g. Collada model).\r\n     * @link https://dannywoodz.wordpress.com/2014/12/16/webgl-from-scratch-loading-a-mesh/\r\n     * @link https://github.com/jagenjo/litegl.js/blob/master/src/mesh.js\r\n     * \r\n     * @param {Prim} the Prim needing geometry. \r\n     * @returns {Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \r\n     * Creating WebGL buffers is turned on or off conditionally in the method.\r\n     */\r\n    geometryMesh ( prim ) {\r\n\r\n       let geo = prim.geometry;\r\n\r\n        // Shortcuts to Prim data arrays\r\n\r\n        let vertices = geo.vertices.data,\r\n        indices  = geo.indices.data,\r\n        texCoords = geo.texCoords.data,\r\n        normals = geo.normals.data,\r\n        tangents = geo.tangents.data;\r\n\r\n        // Vertices.\r\n\r\n        // Indices.\r\n\r\n        // Normals.\r\n\r\n        this.computeNormals( vertices, indices, normals );\r\n\r\n        // Tangents.\r\n\r\n        this.computeTangents( vertices, indices, normals, texCoords );\r\n\r\n        // Color array is pre-created, or gets a default in createBuffers().\r\n\r\n        // Return the buffer.\r\n\r\n        return this.createBuffers( prim.geometry );\r\n\r\n    }\r\n\r\n     /*\r\n     * ---------------------------------------\r\n     * PRIMS\r\n     * ---------------------------------------\r\n     */\r\n\r\n    /** \r\n     * Create an standard 3d object.\r\n     * @param {String} name assigned name of object (not necessarily unique).\r\n     * @param {Number} scale size relative to unit vector (1,1,1).\r\n     * @param {GLMatrix.vec3} position location of center of object.\r\n     * @param {GLMatrix.vec3} acceleration movement vector (acceleration) of object.\r\n     * @param {GLMatrix.vec3} rotation rotation vector (spin) around center of object.\r\n     * @param {String} textureImage the path to an image used to create a texture.\r\n     * @param {Array|GLMatrix.vec4} color the default color(s) of the object.\r\n     */\r\n    createPrim ( type, name = 'unknown', dimensions, divisions, position, acceleration, \r\n        rotation, angular, textureImage, color ) {\r\n\r\n        const vec3 = this.glMatrix.vec3;\r\n\r\n        const mat4 = this.glMatrix.mat4;\r\n\r\n        if ( ! this.checkType( type ) ) {\r\n\r\n            console.error( 'unsupported Prim type, ' + type );\r\n\r\n            return null;\r\n        }\r\n\r\n        let prim = {};\r\n\r\n        prim.id = this.setId();\r\n\r\n        prim.name = name;\r\n\r\n        prim.scale = 1.0; // starting size = default scale\r\n\r\n        prim.dimensions = dimensions || this.vec7( 1, 1, 1, 0, 0, 0, 0 );\r\n\r\n        prim.divisions = divisions || this.vec6( 1, 1, 1, 0, 0, 0 );\r\n\r\n        prim.position = position || vec3.create();\r\n\r\n        prim.acceleration = acceleration || vec3.create();\r\n\r\n        // The absolute .rotation object includes rotation on x, y, z axis\r\n\r\n        prim.rotation = rotation || vec3.create();\r\n\r\n        // The acceleration object indicates velocity on angular motion in x, y, z\r\n\r\n        prim.angular = angular || vec3.create();\r\n\r\n        // The orbit defines a center that the object orbits around, and orbital velocity.\r\n\r\n        prim.orbitRadius = 0.0;\r\n\r\n        prim.orbitAngular = 0.0;\r\n\r\n        // Side to render\r\n\r\n        prim.side = this.DEFAULT_SIDE; // TODO: Normals outside, inside or both !!!!!!!!!!!!!!!!!!!! CHANGE\r\n\r\n        // Waypoints for scripted motion.\r\n\r\n        prim.waypoints = [];\r\n\r\n        // Store multiple textures for one Prim.\r\n\r\n        prim.textures = [];\r\n\r\n        // Store multiple sounds for one Prim.\r\n\r\n        prim.audio = [];\r\n\r\n        // Store multiple videos for one Prim.\r\n\r\n        prim.video = [];\r\n\r\n        // Multiple textures per Prim. Rendering defines how textures for each Prim type are used.\r\n\r\n        for ( let i = 0; i < textureImage.length; i++ ) {\r\n\r\n            this.loadTexture.load( textureImage[ i ], prim );\r\n\r\n        }\r\n\r\n        // Define Prim material (only one material type at a time per Prim ).\r\n\r\n        prim.material = this.setMaterial();\r\n\r\n        // Define Prim light (it glows) not how it is lit.\r\n\r\n        this.light = {\r\n\r\n            direction: [ 1, 1, 1 ],\r\n\r\n            color: [ 255, 255, 255 ]\r\n\r\n        };\r\n\r\n        // Parent Node.\r\n\r\n        prim.parentNode = null;\r\n\r\n        // Child Prim array.\r\n\r\n        prim.children = [];\r\n\r\n        // startRadius and endRadius are used by a few Prims (e.g. Cone)\r\n\r\n        //if ( dimensions[ 3 ] === undefined ) {\r\n\r\n       //     dimensions[ 4 ] = dimensions[ 3 ] = dimensions[ 0 ] / 2;\r\n\r\n       // }\r\n\r\n        // Set the geometry, based on defined type.\r\n\r\n        prim.type = type;\r\n\r\n        prim.geometry = this.createBufferObj();\r\n\r\n        // Copy geometry type for use in rendering/shaders later.\r\n\r\n        prim.geometry.type = type;\r\n\r\n        // NOTE: mis-spelling type leads to error here...\r\n\r\n        prim.geometry = this[ type ]( prim, color );\r\n\r\n        // Standard Prim properties for position, translation, rotation, orbits. Used by shader/renderer objects (e.g. shaderTexture).\r\n\r\n        // Note: should use scale matrix\r\n        // TODO: @link https://nickdesaulniers.github.io/RawWebGL/#/16\r\n\r\n        prim.setMV = ( mvMatrix ) => {\r\n\r\n            let p = prim;\r\n\r\n            mat4.identity( mvMatrix );\r\n\r\n            let z = -5;\r\n\r\n            // Translate.\r\n\r\n            vec3.add( p.position, p.position, p.acceleration );\r\n\r\n            mat4.translate( mvMatrix, mvMatrix, [ p.position[ 0 ], p.position[ 1 ], z + p.position[ 2 ] ] );\r\n\r\n            // If orbiting, set orbit.\r\n\r\n            // Rotate.\r\n\r\n            // TODO: rotate first for rotation.\r\n            // TODO: rotate second for orbiting.\r\n            // TODO: rotate (internal), translate, rotate (orbit)\r\n\r\n            vec3.add( p.rotation, p.rotation, p.angular );\r\n\r\n            mat4.rotate( mvMatrix, mvMatrix, p.rotation[ 0 ], [ 1, 0, 0 ] );\r\n            mat4.rotate( mvMatrix, mvMatrix, p.rotation[ 1 ], [ 0, 1, 0 ] );\r\n            mat4.rotate( mvMatrix, mvMatrix, p.rotation[ 2 ], [ 0, 0, 1 ] );\r\n\r\n            return mvMatrix;\r\n\r\n        }\r\n\r\n        prim.renderId = -1; // NOT ASSIGNED. TODO: Assign a renderer to each Prim.\r\n\r\n        // Push into our list;\r\n\r\n        this.objs.push( prim );\r\n\r\n        // Prim readout to console.\r\n\r\n        this.primReadout( prim ); // TODO: DEBUG!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n        return prim;\r\n\r\n    }\r\n\r\n    /* \r\n     * ---------------------------------------\r\n     * PRIM TRANSFORMS AND PROPERTIES\r\n     * ---------------------------------------\r\n     */\r\n\r\n    /** \r\n     * Scale vertices directly, without changing position.\r\n     */\r\n    scale ( vertices, scale ) {\r\n\r\n        let oldPos = this.getCenter( vertices );\r\n\r\n        for ( let i = 0, len = vertices.length; i < len; i++ ) {\r\n\r\n            vertices[ i ] *= scale;\r\n\r\n        }\r\n\r\n        this.move( vertices, oldPos );\r\n\r\n    }\r\n\r\n    /** \r\n     * Move vertices directly in geometry, i.e. for something \r\n     * that always orbits a central point.\r\n     * NOTE: normally, you will want to use a matrix transform to position objects.\r\n     */\r\n    move ( vertices, pos ) {\r\n\r\n        let center = this.getCenter( vertices );\r\n\r\n        let delta = [\r\n\r\n            center[ 0 ] - pos[ 0 ],\r\n\r\n            center[ 1 ] - pos[ 1 ],\r\n\r\n            center[ 2 ] = pos[ 2 ]\r\n\r\n        ];\r\n\r\n        for ( let i = 0, len = vertices.length; i < len; i += 3 ) {\r\n\r\n            vertices[i] = delta[ 0 ];\r\n\r\n            vertices[ i + 1 ] = delta[ 1 ];\r\n\r\n            vertices[ i + 2 ] = delta[ 2 ];\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Get the bounding box of a shape by getting the largest and \r\n     * smallest vertices in coordinate space.\r\n     * TODO: incomplete.\r\n     */\r\n    boundingBox ( vertices ) {\r\n\r\n        let biggest = [ 0, 0, 0 ];\r\n\r\n        let smallest = [ 0, 0, 0 ];\r\n\r\n        let minX, minY, minZ, maxX, maxY, maxZ;\r\n\r\n        for ( let i = 0, len = vertices.length; i < len; i += 3 ) {\r\n\r\n            minX = Math.min( vertices[ i ], minX );\r\n\r\n            minY = Math.min( vertices[ i + 1 ], minY );\r\n\r\n            minZ = Math.min( vertices[ i + 2 ], minZ );\r\n\r\n            maxX = Math.max( vertices[ i ], maxX );\r\n\r\n            maxY = Math.max( vertices[ i + 1 ], maxY );\r\n\r\n            maxZ = Math.max( vertices[ i + 2 ], maxZ );\r\n\r\n        }\r\n\r\n        // Create cube points.\r\n\r\n        // TODO: not complete.\r\n\r\n        let box = [];\r\n\r\n        return box;\r\n\r\n    }\r\n\r\n    /** \r\n     * Get the center of a shape.\r\n     * @param {Array|Float32Array} a flat array of 3d vertices.\r\n     * @returns {GlMatrix.vec3} a array with the centroid x, y, z. \r\n     */\r\n    getCentroid ( vertices ) {\r\n\r\n        let centroid = [ 0, 0, 0 ];\r\n\r\n        let len = vertices.length;\r\n\r\n        for( let i = 0; i < len; i += 3 ) {\r\n\r\n            centroid[ 0 ] += vertices[ i ];\r\n\r\n            centroid[ 1 ] += vertices[ i + 1 ];\r\n\r\n            centroid[ 2 ] += vertices[ i + 2 ];\r\n\r\n        }\r\n\r\n        centroid[ 0 ] /= len;\r\n\r\n        centroid[ 1 ] /= len;\r\n\r\n        centroid[ 2 ] /= len;\r\n\r\n        return centroid;\r\n\r\n    }\r\n\r\n    /** \r\n     * Set a material for a prim.\r\n     * @link http://webglfundamentals.org/webgl/lessons/webgl-less-code-more-fun.html\r\n     * didn't use chroma (but could)\r\n     * @link https://github.com/gka/chroma.js/blob/gh-pages/src/index.md\r\n     */\r\n    setMaterial ( prim ) {\r\n\r\n       return {\r\n\r\n            colorMult:             0,\r\n\r\n            diffuse:               [ 1, 1, 1 ], // TODO: should be textures[ 0 ]\r\n\r\n            specular:              [ 1, 1, 1, 1 ],\r\n\r\n            shininess:             this.util.getRand( 500 ),\r\n\r\n            specularFactor:        this.util.getRand( 1 ) // TODO: MAY NOT BE RIGHT\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// We put this here because of JSDoc(!)\r\n\r\nexport default Prim;"
  },
  {
    "__docId__": 151,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Prim",
    "memberof": "src/es6/prim.es6",
    "longname": "src/es6/prim.es6~Prim",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/prim.es6",
    "importStyle": "Prim",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#constructor",
    "access": null,
    "description": "",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Create object primitives, and return vertex and index data \nsuitable for creating a VBO and IBO.\n\nNOTE: if you need more complex shapes, use a mesh file, or \na library like http://evanw.github.io/csg.js/ to implement \nmesh operations.\n\nImplicit objects (values are units, with 1.0 being normalized size).\n\nprim.position      = (vec5) [ x, y, z, rounding, | startSlice, endSlice,  ]\nprim.dimensions    = (vec4) [ x, y, z ]\nprim.divisions     = (vec3) [ x, y, z ]\nprim.acceleration  = (vec3) [ x, y, z ]\nprim.rotation      = (vec3) [ x, y, z ]\nprim.angular       = (vec3) [ x, y, z ]\nprim.color         = [ red1, green1, blue1, alpha1, red2, blue2... ]\nprim.texure1Arr    = [ texture1, texture2, texture3 ]\nprim.audioArr      = [ AudioObj1, AudioObj2, AudioObj3...]\n\nMore prims\nOgre 3d procedural\nhttps://bitbucket.org/transporter/ogre-procedural/src/ca6eb3363a53c2b53c055db5ce68c1d35daab0d5/library/include/?at=default\nhttps://bitbucket.org/transporter/ogre-procedural/wiki/Home\n\nhttps://github.com/jagenjo/litegl.js/tree/master/src\n\nhttp://wiki.unity3d.com/index.php/ProceduralPrimitives\n\noctahedron sphere generation\nhttps://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\nhttps://experilous.com/1/blog/post/procedural-planet-generation\nhttps://experilous.com/1/planet-generator/2014-09-28/planet-generator.js\nanother octahedron sphere \nhttps://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\nrounded cube\nhttps://github.com/vorg/primitive-rounded-cube\nrounded cube algorithim\nhttp://catlikecoding.com/unity/tutorials/rounded-cube/\n\ngeneralized catmull-clark subdivision algorithm\nhttps://thiscouldbebetter.wordpress.com/2015/04/24/the-catmull-clark-subdivision-surface-algorithm-in-javascript/\n\ncube inflation algorithm\nhttp://mathproofs.blogspot.com.au/2005/07/mapping-cube-to-sphere.html\nadvanced toolset\nhttps://www.geometrictools.com/Samples/Geometrics.html\nEigen\nhttps://fossies.org/dox/eigen-3.2.10/icosphere_8cpp_source.html\nGeometry prebuilt\nhttp://paulbourke.net/geometry/roundcube/\nLots of Webgl tricks!\nhttps://acko.net\nhttp://acko.net/blog/on-webgl/\n\nhttps://gamedevdaily.io/four-ways-to-create-a-mesh-for-a-sphere-d7956b825db4#.lkbq2omq5\nhttps://www.geometrictools.com/Samples/Geometrics.html\n\nhttps://github.com/glo-js/primitive-icosphere\nhttps://github.com/hughsk/icosphere\nhttp://mft-dev.dk/uv-mapping-sphere/\nhttp://donhavey.com/blog/tutorials/tutorial-3-the-icosahedron-sphere/\nhttp://blog.andreaskahler.com/2009/06/creating-icosphere-mesh-in-code.html\n\nhttps://www.binpress.com/tutorial/creating-an-octahedron-sphere/162"
      }
    ],
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "loadModel",
        "types": [
          "*"
        ]
      },
      {
        "name": "loadTexture",
        "types": [
          "*"
        ]
      },
      {
        "name": "loadAudio",
        "types": [
          "*"
        ]
      },
      {
        "name": "loadVideo",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#util",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "webgl",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#webgl",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glMatrix",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#glMatrix",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loadModel",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#loadModel",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loadTexture",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#loadTexture",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loadAudio",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#loadAudio",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "loadVideo",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#loadVideo",
    "access": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "objs",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#objs",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "typeList",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#typeList",
    "access": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "side",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#side",
    "access": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "draw",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#draw",
    "access": null,
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkType",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#checkType",
    "access": null,
    "description": "See if supplied Prim type is supported. Individual Prim factory \nmethods do more detailed checking.",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} if supported, return true, else false."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "the prim type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "if supported, return true, else false."
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setId",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#setId",
    "access": null,
    "description": "Unique object id",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://jsfiddle.net/briguy37/2MVFd/"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setVertexData",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#setVertexData",
    "access": null,
    "description": "Get the big array with all vertex data. Every time a \nPrim is made, we store a reference in the this.objs[] \narray. So, to make one, we just concatenate the \nvertices. Use to send multiple prims sharing the same shader to one \nRenderer.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} vertices"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "vertices",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "vertices"
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setIndexData",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#setIndexData",
    "access": null,
    "description": "get the big array with all index data. Use to \nsend multiple prims sharing the same shader to one \nRenderer.",
    "lineNumber": 284,
    "params": [
      {
        "name": "indices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createBufferObj",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#createBufferObj",
    "access": null,
    "description": "Return an empty buffer object.",
    "lineNumber": 303,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addBufferData",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#addBufferData",
    "access": null,
    "description": "Add data to create buffers, works if existing data is present. However, \nindices must be consistent!",
    "lineNumber": 401,
    "params": [
      {
        "name": "bufferObj",
        "types": [
          "*"
        ]
      },
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      },
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "texCoords",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "tangents",
        "types": [
          "*"
        ]
      },
      {
        "name": "colors",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createBuffers",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#createBuffers",
    "access": null,
    "description": "Create WebGL buffers using geometry data",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "bufferObj",
        "description": "custom object holding the following:\nan array of vertices, in glMatrix.vec3 objects.\nan array of indices for the vertices.\nan array of texture coordinates, in glMatrix.vec2 format.\nan array of normals, in glMatrix.vec3 format.\nan array of tangents, in glMatrix.vec3 format.\nan array of colors, in glMatrix.vec4 format."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeColors",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#computeColors",
    "access": null,
    "description": "Create default colors for Prim color array.",
    "lineNumber": 582,
    "params": [
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "colors",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "primReadout",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#primReadout",
    "access": null,
    "description": "Check the values of a Prim.\nTODO: why is itemsize of indices = 1",
    "lineNumber": 598,
    "params": [
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getStdVecs",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#getStdVecs",
    "access": null,
    "description": "Standard vectors (similar to Unity) when needed. Call only \nif using the array literal (e.g. [ 0, 0, 0,]) doesn't make sense.",
    "lineNumber": 631,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://docs.unity3d.com/ScriptReference/Vector3.html"
      }
    ],
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "vec5",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#vec5",
    "access": null,
    "description": "Larger configuration vectors for Prims. additional values control slicing \nor flattening of part of a prim.\nFor CONE, the fourth value is truncation of the cone point.\nFor other Prims, the fourth and fifth values control the start and \nend of a cap on open prims (CYLINDER, CONE) and flattening of the \ntop and bottom of SPHERE prims.",
    "lineNumber": 663,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "vec6",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#vec6",
    "access": null,
    "description": null,
    "lineNumber": 673,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      },
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subDivide",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#subDivide",
    "access": null,
    "description": "Subdivide a mesh, WITHOUT smoothing.\nComprehensive description.",
    "lineNumber": 705,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "http://www.rorydriscoll.com/2008/08/01/catmull-clark-subdivision-the-basics/\nUSE:\nUSE: https://blog.nobel-joergensen.com/2010/12/25/procedural-generated-mesh-in-unity/\nUSE: http://wiki.unity3d.com/index.php/MeshSubdivision\nUSE: https://thiscouldbebetter.wordpress.com/2015/04/24/the-catmull-clark-subdivision-surface-algorithm-in-javascript/\nUSE: https://github.com/Erkaman/gl-catmull-clark/blob/master/index.js\nExamples:"
      },
      {
        "tagName": "@link",
        "tagValue": "http://vorg.github.io/pex/docs/pex-geom/Geometry.html"
      },
      {
        "tagName": "@link",
        "tagValue": "http://answers.unity3d.com/questions/259127/does-anyone-have-any-code-to-subdivide-a-mesh-and.html"
      },
      {
        "tagName": "@link",
        "tagValue": "https://thiscouldbebetter.wordpress.com/2015/04/24/the-catmull-clark-subdivision-surface-algorithm-in-javascript/"
      }
    ],
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "center",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pointInTriangle",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#pointInTriangle",
    "access": null,
    "description": "Compute whether point is in a triangle, wrapped \nclockwise (begin with a, end with c)",
    "lineNumber": 724,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "http://blackpawn.com/texts/pointinpoly/"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} if point in triangle, return true, else false."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "the point to test."
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "p0",
        "description": "first clockwise vertex of triangle."
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "second clockwise vertex of triangle."
      },
      {
        "nullable": null,
        "types": [
          "vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "third clockwise vertex of triangle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "if point in triangle, return true, else false."
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeNormals",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#computeNormals",
    "access": null,
    "description": "Compute normals for a 3d object. NOTE: some routines compute their \nown normals.\nAdapted from BabylonJS version.",
    "lineNumber": 764,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/BabylonJS/Babylon.js/blob/3fe3372053ac58505dbf7a2a6f3f52e3b92670c8/src/Mesh/babylon.mesh.vertexData.js"
      },
      {
        "tagName": "@link",
        "tagValue": "http://gamedev.stackexchange.com/questions/8191/any-reliable-polygon-normal-calculation-code"
      },
      {
        "tagName": "@link",
        "tagValue": "https://www.opengl.org/wiki/Calculating_a_Surface_Normal"
      }
    ],
    "params": [
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      },
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 179,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computeTangents",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#computeTangents",
    "access": null,
    "description": "Compute tangents. NOTE: some routines compute their own tangents.\nCodePen - http://codepen.io/ktmpower/pen/ZbGRpW\nadapted from the C++ code from this link: http://www.terathon.com/code/tangent.html\nTODO: CONVERT TO GLMATRIX\n\"The code below generates a four-component tangent T in which the handedness of the local coordinate system\nis stored as ±1 in the w-coordinate. The bitangent vector B is then given by B = (N × T) · Tw.\"",
    "lineNumber": 872,
    "params": [
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      },
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "texCoords",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryPointCloud",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryPointCloud",
    "access": null,
    "description": "WebGL point cloud (particle system).\nRendered as GL_POINT.",
    "lineNumber": 991,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/potree/potree/releases"
      },
      {
        "tagName": "@link",
        "tagValue": "https://www.khronos.org/registry/webgl/sdk/demos/google/particles/index.html"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/gouzhen1/WebGL-Particle-System/"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/gouzhen1/WebGL-Particle-System/blob/master/index.html#L3"
      },
      {
        "tagName": "@link",
        "tagValue": "http://nullprogram.com/blog/2014/06/29/\nhttps://codepen.io/kenjiSpecial/pen/yyeaKm\nrendered as an array of GL_POINT."
      },
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry. \nprim.dimensions    = (vec4) [ x, y, z, radius || 0, pointSize (pixels) | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryLine",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryLine",
    "access": null,
    "description": "type LINE\nrendered as GL_LINE.\nprim.dimensions    = (vec4) [ x, y, z, thickness | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1064,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryPoly",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryPoly",
    "access": null,
    "description": "type POLYGON.\nrendered as GL_POLYGON.\nprim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometrySphere",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometrySphere",
    "access": null,
    "description": "Objects created with uv methods (i.e. they have polar points).\nrendered as GL_TRIANGLES.\nstartSlice cuts off the cylinder, and wraps the texture across the top. \nendSlize truncates the bottom of the cylinder, and wraps the texture across the bottom.\nfor an open cylinder with no caps, set startSlice and endSlize to zero.\nprim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]",
    "lineNumber": 1194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCap",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCap",
    "access": null,
    "description": "type CAP\nrendered as GL_TRIANGLES.\nJust a flattened half-sphere creating a circular 'lid'.\nprim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryDome",
    "access": null,
    "description": "type DOME\nrendered as GL_TRIANGLES.\nHalf-sphere, visible from outside.\nprim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1472,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryTopDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryTopDome",
    "access": null,
    "description": "type TOPDOME.\nrendered as WebGL TRIANGLES.\nHalf-sphere (equivalent to type DOME).\nprim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1489,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometrySkyDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometrySkyDome",
    "access": null,
    "description": "type SKYDOME\nrendered as GL_TRIANGLES.\nHalf-sphere, Indices are reversed, so texture displays inside by default.\nprim.dimensions    = (vec4) [ x, y, z, startRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1506,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryBottomDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryBottomDome",
    "access": null,
    "description": "type BOTTOMDOME\nrendered as GL_TRIANGLES.\nbowl shaped, formed from lower half of sphere.\nprim.dimensions    = (vec4) [ x, y, z ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCylinder",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCylinder",
    "access": null,
    "description": "type CYLINDER\nrendered as GL_TRIANGLES.\nCylinder, either open or closed, visible from outside.\nstartSlice cuts off the cylinder, and wraps the texture across the top. \nendSlize truncates the bottom of the cylinder, and wraps the texture across the bottom.\nfor an open cylinder with no caps, set startSlice and endSlize to zero.\nprim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1543,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCone",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCone",
    "access": null,
    "description": "type CONE.\nrendered as GL_TRIANGLES (equivalent to TOPCONE).\nCone can have segments sliced off its beginning or end.\nstartSlice cuts off the cone, and wraps the texture across the top. \nendSlize truncates the bottom of the cone, and wraps the texture across the bottom.\nfor a cone with no caps, set startSlice and endSlize to zero.\nprim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryTopCone",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryTopCone",
    "access": null,
    "description": "type TOPCONE.\nrendered as GL_TRIANGLES.(equivalent to CONE).\nstartSlice cuts off the cone, and wraps the texture across the top. \nendSlize truncates the bottom of the cone, and wraps the texture across the bottom.\nfor a cone with no caps, set startSlice and endSlize to zero.\nprim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1582,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryBottomCone",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryBottomCone",
    "access": null,
    "description": "type BOTTOMCONE\nrendered as GL_TRIANGLES.\nCone structure, pointing downwards.\nstartSlice cuts off the cone, and wraps the texture across the top. \nendSlize truncates the bottom of the cone, and wraps the texture across the bottom.\nfor a cone with no caps, set startSlice and endSlize to zero.\nprim.dimensions    = (vec4) [ x, y, z, startSlice | 0, endSlice | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1602,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometrySpindle",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometrySpindle",
    "access": null,
    "description": "TYPE SPINDLE.\nrendered as GL_TRIANGLES.\nSpindle (two cones stuck together).\nprim.dimensions    = (vec4) [ x, y, z ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1619,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryTeardrop",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryTeardrop",
    "access": null,
    "description": null,
    "lineNumber": 1625,
    "undocument": true,
    "params": [
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCapsule",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCapsule",
    "access": null,
    "description": "type CAPSULE\nrendered as WebGL TRIANGLES.\na cylinder with two spheres on each end, similar to capped cylinder, \nequivalent to a closed cube.",
    "lineNumber": 1647,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/vorg/primitive-capsule\nposition x axis is the radius, y axis is the height z not used\ndimensions x is number of steps along the y axis, dimensions y is the number of radial \ndivisions around the capsule.\nprim.dimensions    = (vec4) [ x, y, z ]\nprim.divisions     = (vec3) [ x, y, z ]"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCube",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCube",
    "access": null,
    "description": "Create a PLANE, CUBE, or spherical object from cube mesh.\n--------------------------------------------------------------------\ntype CUBE.\nrendered as WebGL TRIANGLES.\nadjust curveRadius to round the edges of the Cube.\nused by several other Prim routines (CUBESPHERE, PLANE, OUTERPLANE, \nINNERPLANE, CURVEDPLANE, CURVEDOUTERPLANE, CURVEDINNERPLANE)\nprim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 1782,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryOuterPlane",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryOuterPlane",
    "access": null,
    "description": "type PLANE, OUTERPLANE\nrendered as WebGL TRIANGLES.\nvisible from the 'outside' as defined by the outward vector from Prim.side.\nprim.dimensions    = (vec4) [ x, y, z, Prim.side ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 2120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryInnerPlane",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryInnerPlane",
    "access": null,
    "description": "type INNERPLANE\nrendered as WebGL TRIANGLES.\nvisible from the 'inside', as defined by the outward vectore from Prim.side.\nprim.dimensions    = (vec4) [ x, y, z, Prim.side ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 2137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCurvedOuterPlane",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCurvedOuterPlane",
    "access": null,
    "description": "type CURVEDPLANE, CUREVEDOUTERPLANE\nrendered as WebGL TRIANGLES.\nvisible from the 'outside' as defined by the outward vector from Prim.side.\ncurve radius sets the amount of curve by assigning a radius for a circle.\nprim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 2155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCurvedInnerPlane",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCurvedInnerPlane",
    "access": null,
    "description": "type CURVEDINNERPLANE\nrendered as GL_TRIANGLES.\nvisible from the 'inside', as defined by the outward vectore from Prim.side.\ncurve radius sets the amount of curve by assigning a radius for a circle.\nprim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius | 0 ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 2173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryTerrain",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryTerrain",
    "access": null,
    "description": "type TERRAIN.\nrendered as GL_TRIANGLES.\nGenerate terrain, using a heightMap, from a PLANE object. The \nheightMap values are interpolated for each vertex in the PLANE.\nprim.dimensions    = (vec4) [ x, y, z, Prim.side ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 2191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryCubeSphere",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryCubeSphere",
    "access": null,
    "description": "type CUBESPHERE.\nrendered as WebGL TRIANGLES.\njust sets the curveRadius to 1/2 of the prim size.\nprim.dimensions    = (vec4) [ x, y, z, Prim.side, curveRadius ]\nprim.divisions     = (vec3) [ x, y, z ]",
    "lineNumber": 2228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryIcoSphere",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryIcoSphere",
    "access": null,
    "description": "Icosphere, adapted from Unity 3d tutorial.",
    "lineNumber": 2247,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://www.binpress.com/tutorial/creating-an-octahedron-sphere/162\ndivisions max: ~60"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prim",
        "description": "the primitive needing geometry."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noSphere",
        "description": "if false, make an icosohedron."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryIcosohedron",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryIcosohedron",
    "access": null,
    "description": "type ICOSOHEDRON.\ncreate a icosohedron.",
    "lineNumber": 2618,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryPyramid",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryPyramid",
    "access": null,
    "description": "type PYRAMID.\ncreate a closed pyramid shape, half of an icosohedron.",
    "lineNumber": 2632,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryIcoDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryIcoDome",
    "access": null,
    "description": "type ICODOME.\ncreate a half-sphere from an icosphere.",
    "lineNumber": 2647,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryTopIcoDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryTopIcoDome",
    "access": null,
    "description": "type TOPICODOME.\ncreate a half-sphere from an icosphere.",
    "lineNumber": 2659,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometrySkyIcoDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometrySkyIcoDome",
    "access": null,
    "description": "type SKYICODOME.\ncreate a half-sphere with texture only visible from the inside.",
    "lineNumber": 2671,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryBottomIcoDome",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryBottomIcoDome",
    "access": null,
    "description": "type BOTTOMICODOME.\ncreate a bowl shape from the lower half of an icosphere.",
    "lineNumber": 2683,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryOctahedron",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryOctahedron",
    "access": null,
    "description": "Create an octahedron\nNote: the icosphere algorith returns an octahedron if we don't \"inflate\" \nthe object's vertices by normalizing.\n\nAdditional links:",
    "lineNumber": 2701,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/nickdesaulniers/prims/blob/master/octahedron.js"
      },
      {
        "tagName": "@link",
        "tagValue": "http://paulbourke.net/geometry/platonic/"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryDodecahedron",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryDodecahedron",
    "access": null,
    "description": "Dodecahedron",
    "lineNumber": 2713,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/prideout/par/blob/master/par_shapes.h"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/nickdesaulniers/prims/blob/master/dodecahedron.js"
      },
      {
        "tagName": "@link",
        "tagValue": "http://vorg.github.io/pex/docs/pex-gen/Dodecahedron.html"
      }
    ],
    "params": [
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryTorus",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryTorus",
    "access": null,
    "description": "Torus object",
    "lineNumber": 2953,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://blogoben.wordpress.com/2011/10/26/webgl-basics-7-colored-torus/"
      },
      {
        "tagName": "@link",
        "tagValue": "http://apparat-engine.blogspot.com/2013/04/procedural-meshes-torus.html\nCreates a 3D torus in the XY plane, returns the data in a new object composed of\n  several Float32Array objects named 'vertices' and 'colors', according to\n  the following parameters:\nr:  big radius\nsr: section radius\nn:  number of faces\nsn: number of faces on section\nk:  factor between 0 and 1 defining the space between strips of the torus"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "geometryMesh",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#geometryMesh",
    "access": null,
    "description": "Generic 3d shape (e.g. Collada model).",
    "lineNumber": 3073,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://dannywoodz.wordpress.com/2014/12/16/webgl-from-scratch-loading-a-mesh/"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/jagenjo/litegl.js/blob/master/src/mesh.js"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Prim.geometry} geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Prim"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "Prim needing geometry."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Prim.geometry"
      ],
      "spread": false,
      "description": "geometry data, including vertices, indices, normals, texture coords and tangents. \nCreating WebGL buffers is turned on or off conditionally in the method."
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createPrim",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#createPrim",
    "access": null,
    "description": "Create an standard 3d object.",
    "lineNumber": 3121,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "assigned name of object (not necessarily unique)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": "size relative to unit vector (1,1,1)."
      },
      {
        "nullable": null,
        "types": [
          "GLMatrix.vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "location of center of object."
      },
      {
        "nullable": null,
        "types": [
          "GLMatrix.vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "acceleration",
        "description": "movement vector (acceleration) of object."
      },
      {
        "nullable": null,
        "types": [
          "GLMatrix.vec3"
        ],
        "spread": false,
        "optional": false,
        "name": "rotation",
        "description": "rotation vector (spin) around center of object."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "textureImage",
        "description": "the path to an image used to create a texture."
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "GLMatrix.vec4"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "the default color(s) of the object."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "light",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#light",
    "access": null,
    "description": null,
    "lineNumber": 3199,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "scale",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#scale",
    "access": null,
    "description": "Scale vertices directly, without changing position.",
    "lineNumber": 3297,
    "params": [
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      },
      {
        "name": "scale",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "move",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#move",
    "access": null,
    "description": "Move vertices directly in geometry, i.e. for something \nthat always orbits a central point.\nNOTE: normally, you will want to use a matrix transform to position objects.",
    "lineNumber": 3316,
    "params": [
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      },
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "boundingBox",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#boundingBox",
    "access": null,
    "description": "Get the bounding box of a shape by getting the largest and \nsmallest vertices in coordinate space.\nTODO: incomplete.",
    "lineNumber": 3347,
    "params": [
      {
        "name": "vertices",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCentroid",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#getCentroid",
    "access": null,
    "description": "Get the center of a shape.",
    "lineNumber": 3386,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{GlMatrix.vec3} a array with the centroid x, y, z. "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "flat array of 3d vertices."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "GlMatrix.vec3"
      ],
      "spread": false,
      "description": "a array with the centroid x, y, z."
    },
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setMaterial",
    "memberof": "src/es6/prim.es6~Prim",
    "longname": "src/es6/prim.es6~Prim#setMaterial",
    "access": null,
    "description": "Set a material for a prim.",
    "lineNumber": 3418,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "http://webglfundamentals.org/webgl/lessons/webgl-less-code-more-fun.html\ndidn't use chroma (but could)"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/gka/chroma.js/blob/gh-pages/src/index.md"
      }
    ],
    "params": [
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/renderer.es6",
    "memberof": null,
    "longname": "src/es6/renderer.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class Renderer {\r\n\r\n    constructor ( init, util, glMatrix, webgl, shaderTexture, shaderColor, shaderDirlightTexture ) {\r\n\r\n        console.log( 'In Renderer class' );\r\n\r\n        this.webgl = webgl;\r\n\r\n        this.util = webgl.util;\r\n\r\n        this.glmatrix = glMatrix;\r\n\r\n        this.shaderTexture = shaderTexture;\r\n\r\n        this.shaderColor = shaderColor;\r\n\r\n        this.shaderDirlightTexture = shaderDirlightTexture;\r\n\r\n        if( this.init ) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // Specialized render manipulations go below.\r\n\r\n\r\n}\r\n\r\nexport default Renderer;"
  },
  {
    "__docId__": 222,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Renderer",
    "memberof": "src/es6/renderer.es6",
    "longname": "src/es6/renderer.es6~Renderer",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/renderer.es6",
    "importStyle": "Renderer",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "shaderTexture",
        "types": [
          "*"
        ]
      },
      {
        "name": "shaderColor",
        "types": [
          "*"
        ]
      },
      {
        "name": "shaderDirlightTexture",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "webgl",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#webgl",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#util",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glmatrix",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#glmatrix",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shaderTexture",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#shaderTexture",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shaderColor",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#shaderColor",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "shaderDirlightTexture",
    "memberof": "src/es6/renderer.es6~Renderer",
    "longname": "src/es6/renderer.es6~Renderer#shaderDirlightTexture",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader-color.es6",
    "memberof": null,
    "longname": "src/es6/shader-color.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Shader from './shader'\r\n\r\nclass ShaderColor extends Shader {\r\n\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        super( init, util, glMatrix, webgl, prim );\r\n\r\n        console.log( 'In ShaderColor class' );\r\n\r\n    }\r\n\r\n    vsSrc () {\r\n\r\n        let s = [\r\n\r\n            'attribute vec3 aVertexPosition;',\r\n            'attribute vec4 aVertexColor;',\r\n\r\n            'uniform mat4 uMVMatrix;',\r\n            'uniform mat4 uPMatrix;',\r\n\r\n            'varying lowp vec4 vColor;',\r\n\r\n            'void main(void) {',\r\n\r\n            '    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);',\r\n\r\n            '    vColor = aVertexColor;',\r\n\r\n            '}'\r\n\r\n        ];\r\n\r\n        return {\r\n\r\n            code: s.join('\\n'),\r\n\r\n            varList: this.webgl.createVarList( s )\r\n\r\n        };\r\n\r\n    }\r\n\r\n    fsSrc () {\r\n\r\n        let s = [\r\n\r\n            'varying lowp vec4 vColor;',\r\n\r\n            'void main(void) {',\r\n\r\n                //'gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);',\r\n\r\n                'gl_FragColor = vColor;',\r\n\r\n            '}'\r\n\r\n        ];\r\n\r\n        return {\r\n\r\n            code: s.join('\\n'),\r\n\r\n            varList: this.webgl.createVarList( s )\r\n\r\n        };\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * Vertex Shader 2, using color buffer but not texture.\r\n     * --------------------------------------------------------------------\r\n     */\r\n    init ( objList ) {\r\n\r\n        // DESTRUCTING DID NOT WORK!\r\n        //[gl, canvas, mat4, vec3, pMatrix, mvMatrix, program ] = this.setup();\r\n\r\n        let arr = this.setup();\r\n        let gl = arr[0];\r\n        let canvas = arr[1];\r\n        let mat4 = arr[2];\r\n        let mat3 = arr[3];\r\n        let vec3 = arr[4];\r\n        let pMatrix = arr[5];\r\n        let mvMatrix = arr[6];\r\n        let program = arr[7];\r\n        let vsVars = arr[8];\r\n        let fsVars = arr[9];\r\n\r\n        // Attach objects.\r\n\r\n        let shaderProgram = program.shaderProgram;\r\n\r\n        window.vs2Vars = vsVars; /////////////////////////////////////////////////////////\r\n\r\n        program.renderList = objList || [];\r\n\r\n        // TODO: SET UP VERTEX ARRAYS, http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html\r\n\r\n        // Update object position, motion.\r\n\r\n        program.update = ( obj ) => {\r\n\r\n            // Standard mvMatrix updates.\r\n\r\n            obj.setMV( mvMatrix );\r\n\r\n            // Custom updates go here.\r\n\r\n        }\r\n\r\n        // Rendering.\r\n\r\n        program.render = () => {\r\n\r\n            //console.log( 'gl:' + gl + ' canvas:' + canvas + ' mat4:' + mat4 + ' vec3:' + vec3 + ' pMatrix:' + pMatrix + ' mvMatrix:' + mvMatrix + ' program:' + program );\r\n\r\n            gl.useProgram( shaderProgram );\r\n\r\n            // Reset perspective matrix.\r\n\r\n            mat4.perspective( pMatrix, Math.PI*0.4, canvas.width / canvas.height, 0.1, 100.0 ); // right\r\n\r\n            // Loop through assigned objects.\r\n\r\n            for ( let i = 0, len = program.renderList.length; i < len; i++ ) {\r\n\r\n                let obj = program.renderList[ i ];\r\n\r\n                // Update Model-View matrix with standard Prim values.\r\n\r\n                program.update( obj, mvMatrix );\r\n\r\n                // Bind vertex buffer.\r\n\r\n                gl.bindBuffer( gl.ARRAY_BUFFER, obj.geometry.vertices.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec3.aVertexPosition );\r\n                gl.vertexAttribPointer( vsVars.attribute.vec3.aVertexPosition, obj.geometry.vertices.itemSize, gl.FLOAT, false, 0, 0 );\r\n\r\n                // Bind color buffer.\r\n\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, obj.geometry.colors.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec4.aVertexColor );\r\n                gl.vertexAttribPointer(vsVars.attribute.vec4.aVertexColor, obj.geometry.colors.itemSize, gl.FLOAT, false, 0, 0);\r\n                //gl.disableVertexAttribArray( vsVars.attribute.vec4.aVertexColor );\r\n\r\n                // Bind indices buffer.\r\n\r\n                gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, obj.geometry.indices.buffer );\r\n\r\n                // Set perspective and model-view matrix uniforms.\r\n\r\n                gl.uniformMatrix4fv( vsVars.uniform.mat4.uPMatrix, false, pMatrix );\r\n                gl.uniformMatrix4fv( vsVars.uniform.mat4.uMVMatrix, false, mvMatrix );\r\n\r\n                // Draw elements.\r\n\r\n                gl.drawElements(gl.TRIANGLES, obj.geometry.indices.numItems, gl.UNSIGNED_SHORT, 0);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return program;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ShaderColor;"
  },
  {
    "__docId__": 231,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ShaderColor",
    "memberof": "src/es6/shader-color.es6",
    "longname": "src/es6/shader-color.es6~ShaderColor",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader-color.es6",
    "importStyle": "ShaderColor",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/shader.js~Shader"
    ]
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader-color.es6~ShaderColor",
    "longname": "src/es6/shader-color.es6~ShaderColor#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 233,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "vsSrc",
    "memberof": "src/es6/shader-color.es6~ShaderColor",
    "longname": "src/es6/shader-color.es6~ShaderColor#vsSrc",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fsSrc",
    "memberof": "src/es6/shader-color.es6~ShaderColor",
    "longname": "src/es6/shader-color.es6~ShaderColor#fsSrc",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 235,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/shader-color.es6~ShaderColor",
    "longname": "src/es6/shader-color.es6~ShaderColor#init",
    "access": null,
    "description": "--------------------------------------------------------------------\nVertex Shader 2, using color buffer but not texture.\n--------------------------------------------------------------------",
    "lineNumber": 76,
    "params": [
      {
        "name": "objList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader-dirlight-texture.es6",
    "memberof": null,
    "longname": "src/es6/shader-dirlight-texture.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Shader from './shader'\r\n\r\nclass ShaderDirlightTexture extends Shader {\r\n\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        super( init, util, glMatrix, webgl, prim );\r\n\r\n        console.log( 'In ShaderTexture class' );\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * VERTEX SHADER 3\r\n     * a directionally-lit textured object vertex shader.\r\n     * @link http://learningwebgl.com/blog/?p=684\r\n     * StackGL\r\n     * @link https://github.com/stackgl\r\n     * phong lighting\r\n     * @link https://github.com/stackgl/glsl-lighting-walkthrough\r\n     * - vertex position\r\n     * - texture coordinate\r\n     * - model-view matrix\r\n     * - projection matrix\r\n     * --------------------------------------------------------------------\r\n     */\r\n    vsSrc () {\r\n\r\n        let s = [\r\n\r\n            'attribute vec3 aVertexPosition;',\r\n            'attribute vec3 aVertexNormal;',\r\n            'attribute vec2 aTextureCoord;',\r\n\r\n            'uniform mat4 uMVMatrix;',\r\n            'uniform mat4 uPMatrix;',\r\n            'uniform mat3 uNMatrix;',\r\n\r\n            'uniform vec3 uAmbientColor;',\r\n            'uniform vec3 uLightingDirection;',\r\n            'uniform vec3 uDirectionalColor;',\r\n\r\n            'uniform bool uUseLighting;', // TODO: remove?\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec3 vLightWeighting;',\r\n\r\n            'void main(void) {',\r\n\r\n            '    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);',\r\n\r\n            '    vTextureCoord = aTextureCoord;',\r\n\r\n            '   if(!uUseLighting) {',\r\n\r\n            '       vLightWeighting = vec3(1.0, 1.0, 1.0);',\r\n\r\n            '   } else {',\r\n\r\n            '       vec3 transformedNormal = uNMatrix * aVertexNormal;',\r\n\r\n            '       float directionalLightWeighting = max(dot(transformedNormal, uLightingDirection), 0.0);',\r\n\r\n            '       vLightWeighting = uAmbientColor + uDirectionalColor * directionalLightWeighting;',\r\n\r\n            '   }',\r\n\r\n            '}'\r\n\r\n            ];\r\n\r\n        return {\r\n\r\n            code: s.join( '\\n' ),\r\n\r\n            varList: this.webgl.createVarList( s )\r\n\r\n        };\r\n\r\n    }\r\n\r\n\r\n    /** \r\n     * a default-lighting textured object fragment shader.\r\n     * - varying texture coordinate\r\n     * - texture 2D sampler\r\n     */\r\n    fsSrc () {\r\n\r\n        let s =  [\r\n\r\n            //'precision mediump float;',\r\n\r\n            this.floatp,\r\n\r\n            'varying vec2 vTextureCoord;',\r\n\r\n            'varying vec3 vLightWeighting;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'void main(void) {',\r\n\r\n            '    vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));',\r\n\r\n            '    gl_FragColor = vec4(textureColor.rgb * vLightWeighting, textureColor.a);',\r\n\r\n            '}'\r\n\r\n            ];\r\n\r\n\r\n        return {\r\n        \r\n            code: s.join('\\n'),\r\n\r\n            varList: this.webgl.createVarList( s )\r\n\r\n        };\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * Vertex Shader 3, using texture buffer and lighting.\r\n     * --------------------------------------------------------------------\r\n     */\r\n    init ( objList ) {\r\n\r\n        // DESTRUCTING DID NOT WORK!\r\n        //[gl, canvas, mat4, vec3, pMatrix, mvMatrix, program ] = this.setup();\r\n\r\n        let arr = this.setup();\r\n        let gl = arr[0];\r\n        let canvas = arr[1];\r\n        let mat4 = arr[2];\r\n        let mat3 = arr[3];\r\n        let vec3 = arr[4];\r\n        let pMatrix = arr[5];\r\n        let mvMatrix = arr[6];\r\n        let program = arr[7];\r\n        let vsVars = arr[8];\r\n        let fsVars = arr[9];\r\n\r\n        // Shorter reference.\r\n\r\n        let shaderProgram = program.shaderProgram;\r\n\r\n\r\n        window.vs3Vars = vsVars; /////////////////////////////////////////////////////////\r\n\r\n\r\n        // TODO: TEMPORARY ADD LIGHTING CONTROL\r\n\r\n        let lighting = true;\r\n\r\n        let ambient = [ 0.1, 0.1, 0.1 ]; // ambient colors WORKING\r\n\r\n        let lightingDirection = [  //TODO: REDO\r\n            -0.25,\r\n            -0.5,\r\n            -0.1\r\n        ];\r\n\r\n        let directionalColor = [ 0.7, 0.7, 0.7];\r\n\r\n        let nMatrix = mat3.create(); // TODO: ADD MAT3 TO PASSED VARIABLES\r\n\r\n        let adjustedLD = vec3.create(); // TODO: redo\r\n\r\n        // Attach objects.\r\n\r\n        program.renderList = objList || [];\r\n\r\n        // TODO: SET UP VERTEX ARRAYS, http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html\r\n        // TODO: https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html\r\n        // TODO: http://max-limper.de/tech/batchedrendering.html\r\n\r\n        // Update object position, motion.\r\n\r\n        program.update = ( obj ) => {\r\n\r\n            // Standard mvMatrix updates.\r\n\r\n            obj.setMV( mvMatrix );\r\n\r\n            // Compute lighting normals.\r\n\r\n            vec3.normalize( adjustedLD, lightingDirection );\r\n\r\n            vec3.scale( adjustedLD, adjustedLD, -1 );\r\n\r\n            // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix.\r\n\r\n            mat3.normalFromMat4( nMatrix, mvMatrix );\r\n\r\n            // glmat3 library\r\n            //mat4.normalFromMat4( nMatrix, mvMatrix );\r\n\r\n            // Custom updates go here, make local references to vsVars and fsVars.\r\n\r\n        }\r\n\r\n        // Rendering.\r\n\r\n        program.render = () => {\r\n\r\n            //console.log( 'gl:' + gl + ' canvas:' + canvas + ' mat4:' + mat4 + ' vec3:' + vec3 + ' pMatrix:' + pMatrix + ' mvMatrix:' + mvMatrix + ' program:' + program );\r\n\r\n            gl.useProgram( shaderProgram );\r\n\r\n            // Reset perspective matrix.\r\n\r\n            mat4.perspective( pMatrix, Math.PI*0.4, canvas.width / canvas.height, 0.1, 100.0 ); // right\r\n\r\n            // Begin program loop\r\n\r\n            for ( let i = 0, len = program.renderList.length; i < len; i++ ) {\r\n\r\n                let obj = program.renderList[ i ];\r\n\r\n                // Only render if we have at least one texture loaded.\r\n\r\n                if ( ! obj.textures[0] || ! obj.textures[0].texture ) continue;\r\n\r\n                // Update Model-View matrix with standard Prim values.\r\n\r\n                program.update( obj, mvMatrix );\r\n\r\n                // Bind vertex buffer.\r\n\r\n                gl.bindBuffer( gl.ARRAY_BUFFER, obj.geometry.vertices.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec3.aVertexPosition );\r\n                gl.vertexAttribPointer( vsVars.attribute.vec3.aVertexPosition, obj.geometry.vertices.itemSize, gl.FLOAT, false, 0, 0 );\r\n\r\n                // Bind normals buffer.\r\n                gl.bindBuffer( gl.ARRAY_BUFFER, obj.geometry.normals.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec3.aVertexNormal );\r\n                gl.vertexAttribPointer( vsVars.attribute.vec3.aVertexNormal, obj.geometry.normals.itemSize, gl.FLOAT, false, 0, 0);\r\n\r\n                // Bind Textures buffer (could have multiple bindings here).\r\n\r\n                gl.bindBuffer( gl.ARRAY_BUFFER, obj.geometry.texCoords.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec2.aTextureCoord );\r\n                gl.vertexAttribPointer( vsVars.attribute.vec2.aTextureCoord, obj.geometry.texCoords.itemSize, gl.FLOAT, false, 0, 0 );\r\n\r\n                gl.activeTexture( gl.TEXTURE0 );\r\n                gl.bindTexture( gl.TEXTURE_2D, null );\r\n                gl.bindTexture( gl.TEXTURE_2D, obj.textures[0].texture );\r\n\r\n                // Set fragment shader sampler uniform.\r\n\r\n                gl.uniform1i( fsVars.uniform.sampler2D.uSampler, 0 );\r\n\r\n                // Lighting flag.\r\n\r\n                gl.uniform1i( vsVars.uniform.bool.uUseLighting, lighting );\r\n\r\n                if ( lighting ) {\r\n\r\n                    gl.uniform3f(\r\n                        vsVars.uniform.vec3.uAmbientColor,\r\n                        ambient[0],\r\n                        ambient[1],\r\n                        ambient[2]\r\n                    );\r\n\r\n                    gl.uniform3fv( \r\n                        vsVars.uniform.vec3.uLightingDirection, \r\n                        adjustedLD \r\n                    );\r\n\r\n                    gl.uniform3f(\r\n                        vsVars.uniform.vec3.uDirectionalColor,\r\n                        directionalColor[0],\r\n                        directionalColor[1],\r\n                        directionalColor[2]\r\n                    );\r\n\r\n                }\r\n\r\n                // Normals matrix uniform\r\n\r\n                gl.uniformMatrix3fv( vsVars.uniform.mat3.uNMatrix, false, nMatrix );\r\n\r\n                // Set perspective and model-view matrix uniforms.\r\n\r\n                gl.uniformMatrix4fv( vsVars.uniform.mat4.uPMatrix, false, pMatrix );\r\n                gl.uniformMatrix4fv( vsVars.uniform.mat4.uMVMatrix, false, mvMatrix );\r\n\r\n                // Bind index buffer.\r\n\r\n                gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, obj.geometry.indices.buffer );\r\n\r\n                // Draw elements.\r\n\r\n                gl.drawElements(gl.TRIANGLES, obj.geometry.indices.numItems, gl.UNSIGNED_SHORT, 0);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return program;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ShaderDirlightTexture;"
  },
  {
    "__docId__": 237,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ShaderDirlightTexture",
    "memberof": "src/es6/shader-dirlight-texture.es6",
    "longname": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader-dirlight-texture.es6",
    "importStyle": "ShaderDirlightTexture",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/shader.js~Shader"
    ]
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture",
    "longname": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 239,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "vsSrc",
    "memberof": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture",
    "longname": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture#vsSrc",
    "access": null,
    "description": "--------------------------------------------------------------------\nVERTEX SHADER 3\na directionally-lit textured object vertex shader.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "http://learningwebgl.com/blog/?p=684\nStackGL"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/stackgl\nphong lighting"
      },
      {
        "tagName": "@link",
        "tagValue": "https://github.com/stackgl/glsl-lighting-walkthrough\n- vertex position\n- texture coordinate\n- model-view matrix\n- projection matrix\n--------------------------------------------------------------------"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 240,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fsSrc",
    "memberof": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture",
    "longname": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture#fsSrc",
    "access": null,
    "description": "a default-lighting textured object fragment shader.\n- varying texture coordinate\n- texture 2D sampler",
    "lineNumber": 89,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 241,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture",
    "longname": "src/es6/shader-dirlight-texture.es6~ShaderDirlightTexture#init",
    "access": null,
    "description": "--------------------------------------------------------------------\nVertex Shader 3, using texture buffer and lighting.\n--------------------------------------------------------------------",
    "lineNumber": 129,
    "params": [
      {
        "name": "objList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader-metal.es6",
    "memberof": null,
    "longname": "src/es6/shader-metal.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Shader from './shader'\r\n\r\nclass ShaderMetal extends Shader {\r\n\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        super( init, util, glMatrix, webgl, prim );\r\n\r\n        console.log( 'In ShaderMetal class' );\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * VERTEX SHADER 3\r\n     * a directionally-lit textured object vertex shader.\r\n     * @link http://learningwebgl.com/blog/?p=684\r\n     * - vertex position\r\n     * - texture coordinate\r\n     * - model-view matrix\r\n     * - projection matrix\r\n     * --------------------------------------------------------------------\r\n     */\r\n\r\n\r\n}\r\n\r\nexport default ShaderMetal;"
  },
  {
    "__docId__": 243,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ShaderMetal",
    "memberof": "src/es6/shader-metal.es6",
    "longname": "src/es6/shader-metal.es6~ShaderMetal",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader-metal.es6",
    "importStyle": "ShaderMetal",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/shader.js~Shader"
    ]
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader-metal.es6~ShaderMetal",
    "longname": "src/es6/shader-metal.es6~ShaderMetal#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader-terrain.es6",
    "memberof": null,
    "longname": "src/es6/shader-terrain.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Shader from './shader'\r\n\r\nclass ShaderTerrain extends Shader {\r\n\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        super( init, util, glMatrix, webgl, prim );\r\n\r\n        console.log( 'In ShaderTerrain class' );\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * VERTEX SHADER 3\r\n     * a directionally-lit textured object vertex shader, which uses \r\n     * heightmap textures on the videocard to generat terrain. Also \r\n     * uses multiple textures to create close-range detail, and \r\n     * shader fog.\r\n     * @link http://learningwebgl.com/blog/?p=684\r\n     * - vertex position\r\n     * - texture coordinate\r\n     * - model-view matrix\r\n     * - projection matrix\r\n     * --------------------------------------------------------------------\r\n     */\r\n\r\n\r\n}\r\n\r\nexport default ShaderTerrain;"
  },
  {
    "__docId__": 246,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ShaderTerrain",
    "memberof": "src/es6/shader-terrain.es6",
    "longname": "src/es6/shader-terrain.es6~ShaderTerrain",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader-terrain.es6",
    "importStyle": "ShaderTerrain",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/shader.js~Shader"
    ]
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader-terrain.es6~ShaderTerrain",
    "longname": "src/es6/shader-terrain.es6~ShaderTerrain#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader-texture.es6",
    "memberof": null,
    "longname": "src/es6/shader-texture.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Shader from './shader'\r\n\r\nclass ShaderTexture extends Shader {\r\n\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        super( init, util, glMatrix, webgl, prim );\r\n\r\n        console.log( 'In ShaderTexture class' );\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * VERTEX SHADER 1\r\n     * a default-lighting textured object vertex shader.\r\n     * - vertex position\r\n     * - texture coordinate\r\n     * - model-view matrix\r\n     * - projection matrix\r\n     * --------------------------------------------------------------------\r\n     */\r\n    vsSrc () {\r\n\r\n        let s = [\r\n\r\n            'attribute vec3 aVertexPosition;',\r\n            'attribute vec2 aTextureCoord;',\r\n\r\n            'uniform mat4 uMVMatrix;',\r\n            'uniform mat4 uPMatrix;',\r\n            'varying vec2 vTextureCoord;',\r\n\r\n            'void main(void) {',\r\n\r\n            '    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);',\r\n\r\n            '    vTextureCoord = aTextureCoord;',\r\n\r\n            '}'\r\n\r\n            ];\r\n\r\n        return {\r\n\r\n            code: s.join( '\\n' ),\r\n\r\n            varList: this.webgl.createVarList( s )\r\n\r\n        };\r\n\r\n    }\r\n\r\n    /** \r\n     * a default-lighting textured object fragment shader.\r\n     * - varying texture coordinate\r\n     * - texture 2D sampler\r\n     */\r\n    fsSrc () {\r\n\r\n        let s =  [\r\n\r\n            // 'precision mediump float;',\r\n\r\n            this.floatp,\r\n\r\n            'varying vec2 vTextureCoord;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'void main(void) {',\r\n\r\n            '    gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));',\r\n\r\n            '}'\r\n\r\n            ];\r\n\r\n\r\n        return {\r\n        \r\n            code: s.join('\\n'),\r\n\r\n            varList: this.webgl.createVarList( s )\r\n\r\n        };\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * Vertex Shader 1, using texture buffer.\r\n     * --------------------------------------------------------------------\r\n     */\r\n    init ( objList ) {\r\n\r\n        // DESTRUCTING DID NOT WORK!\r\n        //[gl, canvas, mat4, vec3, pMatrix, mvMatrix, program ] = this.setup();\r\n\r\n        let arr = this.setup();\r\n        let gl = arr[0];\r\n        let canvas = arr[1];\r\n        let mat4 = arr[2];\r\n        let mat3 = arr[3];\r\n        let vec3 = arr[4];\r\n        let pMatrix = arr[5];\r\n        let mvMatrix = arr[6];\r\n        let program = arr[7];\r\n        let vsVars = arr[8];\r\n        let fsVars = arr[9];\r\n\r\n        // Attach objects.\r\n\r\n        let shaderProgram = program.shaderProgram;\r\n\r\n        window.vs1Vars = vsVars; /////////////////////////////////////////////////////////\r\n\r\n        program.renderList = objList || [];\r\n\r\n        // TODO: SET UP VERTEX ARRAYS, http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html\r\n        // TODO: https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html\r\n        // TODO: http://max-limper.de/tech/batchedrendering.html\r\n\r\n        // Update object position, motion.\r\n\r\n        program.update = ( obj ) => {\r\n\r\n            // Standard Model-View (mvMatrix) updates, per Prim.\r\n\r\n            obj.setMV( mvMatrix );\r\n\r\n            // Custom updates go here.\r\n\r\n        }\r\n\r\n        // Rendering.\r\n\r\n        program.render = () => {\r\n\r\n            //console.log( 'gl:' + gl + ' canvas:' + canvas + ' mat4:' + mat4 + ' vec3:' + vec3 + ' pMatrix:' + pMatrix + ' mvMatrix:' + mvMatrix + ' program:' + program );\r\n\r\n            gl.useProgram( shaderProgram );\r\n\r\n            // Reset perspective matrix.\r\n\r\n            mat4.perspective( pMatrix, Math.PI*0.4, canvas.width / canvas.height, 0.1, 100.0 ); // right\r\n\r\n            // Begin program loop\r\n\r\n            for ( let i = 0, len = program.renderList.length; i < len; i++ ) {\r\n\r\n                let obj = program.renderList[ i ];\r\n\r\n                // Only render if we have at least one texture loaded.\r\n\r\n                if ( ! obj.textures[0] || ! obj.textures[0].texture ) continue;\r\n\r\n                // Update Model-View matrix with standard Prim values.\r\n\r\n                program.update( obj, mvMatrix );\r\n\r\n                // Bind vertex buffer.\r\n\r\n                gl.bindBuffer( gl.ARRAY_BUFFER, obj.geometry.vertices.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec3.aVertexPosition );\r\n                gl.vertexAttribPointer( vsVars.attribute.vec3.aVertexPosition, obj.geometry.vertices.itemSize, gl.FLOAT, false, 0, 0 );\r\n\r\n                // Bind Textures buffer (could have multiple bindings here).\r\n\r\n                gl.bindBuffer( gl.ARRAY_BUFFER, obj.geometry.texCoords.buffer );\r\n                gl.enableVertexAttribArray( vsVars.attribute.vec2.aTextureCoord );\r\n                gl.vertexAttribPointer( vsVars.attribute.vec2.aTextureCoord, obj.geometry.texCoords.itemSize, gl.FLOAT, false, 0, 0 );\r\n\r\n                gl.activeTexture( gl.TEXTURE0 );\r\n                gl.bindTexture( gl.TEXTURE_2D, null );\r\n                gl.bindTexture( gl.TEXTURE_2D, obj.textures[0].texture );\r\n\r\n                // Set fragment shader sampler uniform.\r\n\r\n                gl.uniform1i( fsVars.uniform.sampler2D.uSampler, 0 ); //STRANGE\r\n\r\n                // Set perspective and model-view matrix uniforms.\r\n\r\n                gl.uniformMatrix4fv( vsVars.uniform.mat4.uPMatrix, false, pMatrix );\r\n                gl.uniformMatrix4fv( vsVars.uniform.mat4.uMVMatrix, false, mvMatrix );\r\n\r\n                // Bind index buffer.\r\n\r\n                gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, obj.geometry.indices.buffer );\r\n\r\n                // Draw elements.\r\n\r\n                gl.drawElements(gl.TRIANGLES, obj.geometry.indices.numItems, gl.UNSIGNED_SHORT, 0);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return program;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ShaderTexture;"
  },
  {
    "__docId__": 249,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ShaderTexture",
    "memberof": "src/es6/shader-texture.es6",
    "longname": "src/es6/shader-texture.es6~ShaderTexture",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader-texture.es6",
    "importStyle": "ShaderTexture",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/shader.js~Shader"
    ]
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader-texture.es6~ShaderTexture",
    "longname": "src/es6/shader-texture.es6~ShaderTexture#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "vsSrc",
    "memberof": "src/es6/shader-texture.es6~ShaderTexture",
    "longname": "src/es6/shader-texture.es6~ShaderTexture#vsSrc",
    "access": null,
    "description": "--------------------------------------------------------------------\nVERTEX SHADER 1\na default-lighting textured object vertex shader.\n- vertex position\n- texture coordinate\n- model-view matrix\n- projection matrix\n--------------------------------------------------------------------",
    "lineNumber": 23,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fsSrc",
    "memberof": "src/es6/shader-texture.es6~ShaderTexture",
    "longname": "src/es6/shader-texture.es6~ShaderTexture#fsSrc",
    "access": null,
    "description": "a default-lighting textured object fragment shader.\n- varying texture coordinate\n- texture 2D sampler",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 253,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/shader-texture.es6~ShaderTexture",
    "longname": "src/es6/shader-texture.es6~ShaderTexture#init",
    "access": null,
    "description": "--------------------------------------------------------------------\nVertex Shader 1, using texture buffer.\n--------------------------------------------------------------------",
    "lineNumber": 95,
    "params": [
      {
        "name": "objList",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 254,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader-water.es6",
    "memberof": null,
    "longname": "src/es6/shader-water.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Shader from './shader'\r\n\r\nclass ShaderWater extends Shader {\r\n\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        super( init, util, glMatrix, webgl, prim );\r\n\r\n        console.log( 'In ShaderWater class' );\r\n\r\n    }\r\n\r\n    /** \r\n     * --------------------------------------------------------------------\r\n     * VERTEX SHADER 3\r\n     * a directionally-lit textured object vertex shader.\r\n     * @link http://learningwebgl.com/blog/?p=684\r\n     * - vertex position\r\n     * - texture coordinate\r\n     * - model-view matrix\r\n     * - projection matrix\r\n     * Water example\r\n     * @link http://madebyevan.com/webgl-water/\r\n     * --------------------------------------------------------------------\r\n     */\r\n\r\n\r\n}\r\n\r\nexport default ShaderWater;"
  },
  {
    "__docId__": 255,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ShaderWater",
    "memberof": "src/es6/shader-water.es6",
    "longname": "src/es6/shader-water.es6~ShaderWater",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader-water.es6",
    "importStyle": "ShaderWater",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/es6/shader.js~Shader"
    ]
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader-water.es6~ShaderWater",
    "longname": "src/es6/shader-water.es6~ShaderWater#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 257,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/shader.es6",
    "memberof": null,
    "longname": "src/es6/shader.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class Shader {\r\n\r\n    /* \r\n     * Renderers.\r\n     * GREAT description of model, view, projection matrix\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection\r\n     * \r\n     * Using vertex arrays:\r\n     * @link http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html\r\n     * \r\n     * WebGL Stack\r\n     * @link https://github.com/stackgl\r\n     * \r\n     * Some shaders\r\n     * https://github.com/jwagner/terrain\r\n     * \r\n     * Superfast Advanced Batch Processing\r\n     * http://max-limper.de/tech/batchedrendering.html\r\n     * \r\n     * GLSL Sandbox\r\n     * http://mrdoob.com/projects/glsl_sandbox/\r\n     * \r\n     * Basic MVC\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection\r\n     */\r\n    constructor ( init, util, glMatrix, webgl, prim ) {\r\n\r\n        console.log( 'In Shader class' );\r\n\r\n        this.webgl = webgl;\r\n\r\n        this.util = util;\r\n\r\n        this.prim = prim;\r\n\r\n        this.glMatrix = glMatrix;\r\n\r\n        this.pMatrix = this.glMatrix.mat4.create();\r\n\r\n        this.mvMatrix = this.glMatrix.mat4.create();\r\n\r\n        this.mvMatrixStack = this.glMatrix.mat4.create();\r\n\r\n        this.floatp = ''\r\n\r\n        if ( this.webgl.stats.highp ) {\r\n\r\n            this.floatp = 'precision highp float;';\r\n\r\n        } else {\r\n\r\n            this.floatp = 'precision mediump float;';\r\n\r\n        }\r\n\r\n        // If we need to load a vertext and fragment shader files (in text format), put their paths in derived classes.\r\n\r\n        this.vertexShaderFile = null;\r\n\r\n        this.fragmentShaderFile = null;\r\n\r\n    }\r\n\r\n   /* \r\n     * MATRIX OPERATIONS\r\n     * Mostly with glMatrix\r\n     */\r\n\r\n    mvPushMatrix() {\r\n\r\n        let mat4 = this.glMatrix.mat4;\r\n\r\n        let copy = mat4.create();\r\n\r\n        mat4.set( this.mvMatrix, copy );\r\n\r\n        mvMatrixStack.push( copy );\r\n\r\n    }\r\n\r\n    mvPopMatrix() {\r\n\r\n        if ( this.mvMatrixStack.length == 0 ) {\r\n\r\n            throw 'Invalid popMatrix!';\r\n\r\n        }\r\n\r\n        mvMatrix = this.mvMatrixStack.pop();\r\n\r\n    }\r\n\r\n    /** \r\n     * set up our program object, using WebGL. We wrap the 'naked' WebGL \r\n     * program object, and add additional properties to the wrapper. \r\n     * \r\n     * Individual shaders use these variables to construct a program wrapper \r\n     * object containing the GLProgram, plus properties, plus update() and \r\n     * render() functions.\r\n     */\r\n    setup () {\r\n\r\n        // Compile shaders and create WebGL program using webgl object.\r\n\r\n        let program = null;\r\n\r\n        if ( this.vertexShaderFile && this.this.fragmentShaderFile ) {\r\n\r\n            program = this.webgl.createProgram( \r\n                this.webgl.fetchVertexShader( this.vertexShaderFile ), \r\n                this.webgl.fetchFragmentShader( this.fragmentShaderFile ) \r\n            );\r\n\r\n        } else {\r\n\r\n            program = this.webgl.createProgram( this.vsSrc(), this.fsSrc() );\r\n\r\n        }\r\n\r\n        // Return references to our properties, and assign uniform and attribute locations using webgl object.\r\n\r\n        return [ \r\n\r\n            this.webgl.getContext(),\r\n\r\n            this.webgl.getCanvas(),\r\n\r\n            this.glMatrix.mat4,\r\n\r\n            this.glMatrix.mat3,\r\n\r\n            this.glMatrix.vec3,\r\n\r\n            this.glMatrix.mat4.create(),  // perspective\r\n\r\n            this.glMatrix.mat4.create(),  // model-view\r\n\r\n            program,\r\n\r\n            {\r\n                attribute: this.webgl.setAttributeArrays( program.shaderProgram, program.vsVars.attribute ),\r\n\r\n                uniform: this.webgl.setUniformLocations( program.shaderProgram, program.vsVars.uniform )\r\n\r\n            },\r\n\r\n            {\r\n\r\n                uniform: this.webgl.setUniformLocations( program.shaderProgram, program.fsVars.uniform )\r\n\r\n            }\r\n\r\n        ];\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Shader;"
  },
  {
    "__docId__": 258,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Shader",
    "memberof": "src/es6/shader.es6",
    "longname": "src/es6/shader.es6~Shader",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/shader.es6",
    "importStyle": "Shader",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#constructor",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      },
      {
        "name": "prim",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 260,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "webgl",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#webgl",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#util",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "prim",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#prim",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glMatrix",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#glMatrix",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pMatrix",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#pMatrix",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mvMatrix",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#mvMatrix",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mvMatrixStack",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#mvMatrixStack",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "floatp",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#floatp",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "floatp",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#floatp",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "floatp",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#floatp",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "vertexShaderFile",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#vertexShaderFile",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "fragmentShaderFile",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#fragmentShaderFile",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mvPushMatrix",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#mvPushMatrix",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 273,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mvPopMatrix",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#mvPopMatrix",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 274,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setup",
    "memberof": "src/es6/shader.es6~Shader",
    "longname": "src/es6/shader.es6~Shader#setup",
    "access": null,
    "description": "set up our program object, using WebGL. We wrap the 'naked' WebGL \nprogram object, and add additional properties to the wrapper. \n\nIndividual shaders use these variables to construct a program wrapper \nobject containing the GLProgram, plus properties, plus update() and \nrender() functions.",
    "lineNumber": 101,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 275,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/util.es6",
    "memberof": null,
    "longname": "src/es6/util.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class Util {\r\n\r\n    /** \r\n     * Utility functions.\r\n     */\r\n\r\n    constructor () {\r\n\r\n        console.log( 'in Util' );\r\n\r\n        // Performance polyfill.\r\n\r\n        this.setPerformance();\r\n\r\n    }\r\n\r\n    /** \r\n     * Performance polyfill for timing.\r\n     */\r\n    setPerformance () {\r\n\r\n        if ( ! 'performance' in window ) {\r\n\r\n            window.performance = {};\r\n\r\n        }\r\n\r\n        Date.now = ( Date.now || function () {  // can't use () => here!\r\n\r\n            return new Date().getTime();\r\n\r\n        } );\r\n\r\n        if ( ! 'now' in window.performance ) {\r\n\r\n            let nowOffset = Date.now();\r\n\r\n            if ( performance.timing && performance.timing.navigationStart ) {\r\n\r\n                nowOffset = performance.timing.navigationStart;\r\n\r\n            }\r\n\r\n            window.performance.now = () => {\r\n\r\n                return Date.now() - nowOffset;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    isString( str ) {\r\n\r\n        return typeof str == 'string' || ( isObjectLike( str ) && objToString.call( str ) == stringTag) || false;\r\n\r\n    }\r\n\r\n    // See if we're running in an iframe.\r\n    isIFrame () {\r\n\r\n        try {\r\n\r\n            return window.self !== window.top;\r\n\r\n        } catch (e) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    isPowerOfTwo( n ) {\r\n\r\n        return ( n & (n - 1) ) === 0;\r\n\r\n    }\r\n\r\n    degToRad( degrees ) {\r\n\r\n        return degrees * Math.PI / 180;\r\n\r\n    }\r\n\r\n\r\n    /** \r\n     * Get a succession of values from a flat array\r\n     * @param {Array} arr a flat array.\r\n     * @param {Number} idx index into the array.\r\n     * @param {Number} size number of elements to get. This is \r\n     * also assumed to be the 'stride' through the array.\r\n     * @returns {Array} requested elements in an Array.\r\n     */\r\n    getArr ( arr, idx, size ) {\r\n\r\n        if ( ! arr || idx < 0 || size < 1 ) {\r\n\r\n            console.error( 'getArr() invalid params, arr:' + arr + ', index:' + idx + ' size:' + size );\r\n\r\n            return -1;\r\n\r\n        }\r\n        \r\n        let o = [];\r\n\r\n        for ( let i = 2; i < size; i++ ) {\r\n\r\n                o.push( arr[ ( idx * size ) + i ] );\r\n\r\n        }\r\n\r\n        return o;\r\n\r\n    }\r\n\r\n    /** \r\n     * Get an object from a 2d array. Supply a variable list of \r\n     * values. The number of values is assumed to be the 'walk' size \r\n     * for the array.\r\n     * @param {Array} arr a flat array.\r\n     * @param {Number} index the stride into 2d array.\r\n     * @param {...Number} additional arguments. The array 'stride' is \r\n     * assumed equal to the number of additional parameters.\r\n     */\r\n    setArr ( arr, index ) {\r\n\r\n        const alen = arguments.length;\r\n\r\n        if ( alen < 3 ) {\r\n\r\n            console.error( 'no value or index specified' );\r\n\r\n            return -1;\r\n\r\n        }\r\n\r\n        const size = alen - 2;\r\n\r\n        for ( let i = 2; i < alen; i++ ) {\r\n\r\n            arr[ ( idx * size ) + i ] - arguments[i];\r\n\r\n        }\r\n\r\n        return idx; // ending position \r\n\r\n    }\r\n\r\n    /** \r\n     * Check if an array is multi-dimensional, and needs flattening.\r\n     * @param {Array} arr a standard JS array\r\n     * @returns {Boolean} if multi-dimensional, return true, else false.\r\n     */\r\n    canFlatten( arr ) {\r\n\r\n        window.arr = arr;\r\n        \r\n        if ( typeof arr[ 0 ][ 0 ] != 'undefined' && arr[ 0 ][ 0 ].constructor === Array ) {\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /** \r\n     * Given a multi-dimensional array, flatten to \r\n     * a single-dimensional one. NOTE: only works for \r\n     * Array(), not Float32Array!\r\n     */\r\n    flatten ( arr, mutable ) {\r\n\r\n        if ( mutable !== true && mutable !== false ) {\r\n\r\n            mutable = false;\r\n\r\n        }\r\n\r\n        let nodes = ( mutable && arr ) || arr.slice(); // return a new array.\r\n\r\n        let flattened = [];\r\n\r\n        for ( let node = nodes.shift(); node !== undefined; node = nodes.shift() ) {\r\n\r\n            if ( Array.isArray( node ) ) {\r\n\r\n                nodes.unshift.apply( nodes, node );\r\n\r\n            } else {\r\n\r\n                flattened.push( node );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return flattened;\r\n\r\n    }\r\n\r\n    /** \r\n     * Given a flat array, convert to multi-dimensional.\r\n     */\r\n    unFlatten( arr, subsize ) {\r\n\r\n        let ct = 0;\r\n\r\n        let nodes = []; // multi-dimensional\r\n\r\n        let sub = new Array();\r\n\r\n        for ( let i = 0, len = arr.length; i < len; i += subsize ) {\r\n\r\n            nodes.push( arr.splice( i, subsize ) ); \r\n\r\n        }\r\n\r\n        return nodes;\r\n\r\n    }\r\n\r\n    /** \r\n     * Concatenate typed and untyped arrays. if the first array is typed, \r\n     * the second array is converted to the same type. The first array \r\n     * receives the concatenation (no new Array is created).\r\n     * @param {Array|TypedArray} arr1 the first Array.\r\n     * @param {Array|TypedArray} arr2 the second Array.\r\n     * @returns {Array|TypedArray} the concatenated Array.\r\n     */\r\n    concatArr ( arr1, arr2 ) {\r\n\r\n        let result = null;\r\n\r\n        let len1 = arr1.length;\r\n\r\n        let len2 = arr2.length;\r\n\r\n        if ( ArrayBuffer.isView( arr1 ) ) { // typed array\r\n\r\n\r\n            // Convert both to array type of first array.\r\n\r\n            if ( arr1 instanceof Float32Array ) {\r\n\r\n                result = new Float32Array( len1 + len2 );\r\n\r\n                if( ! arr2 instanceof Float32Array ) {\r\n\r\n                        arr2 = Float32Array.from( arr2 );\r\n\r\n                }\r\n\r\n            } else if ( arr1 instanceof Uint16Array ) {\r\n\r\n                result = new Uint16Array( len1 + len2 );\r\n\r\n                if( ! arr2 instanceof Uint16Array ) {\r\n\r\n                    arr2 = Uint16Array.from( arr2 );\r\n\r\n                }\r\n\r\n            }\r\n\r\n            // Assign arr1 to output.\r\n\r\n            result.set( arr1 );\r\n\r\n            // Append arr2 to arr1 in output.\r\n\r\n            result.set( arr2, len1 );\r\n\r\n        } else {\r\n\r\n            if ( ArrayBuffer.isView( arr2 ) ) { // arr2 typed, copied to arr1, untyped\r\n\r\n                for ( let i = 0; i < len2; i++ ) {\r\n\r\n                    arr1.push( arr2[ i ] );\r\n\r\n                }\r\n\r\n                result = arr1;\r\n\r\n            } else {\r\n\r\n                result = arr1.concat( arr2 ); // both arrays are untyped\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    /** \r\n     * Random seed.\r\n     */\r\n    getSeed() {\r\n\r\n        let number;\r\n\r\n        try {\r\n\r\n            // If the client supports the more secure crypto lib\r\n\r\n            if ( Uint32Array && window.crypto && window.crypto.getRandomValues ) {\r\n\r\n                let numbers = new Uint32Array( 1 );\r\n\r\n                window.crypto.getRandomValues( numbers );\r\n\r\n                number = numbers.length ? ( numbers[0] + '' ) : null;\r\n\r\n            }\r\n\r\n        } catch( e ) {} finally {\r\n\r\n            if ( ! number ) {\r\n\r\n                number = Math.floor( Math.random() * 1e9 ).toString() + ( new Date().getTime() );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // process between min and max. Number could be 0-10^9\r\n\r\n        return number;\r\n\r\n    }\r\n\r\n    getRand ( min, max ) {\r\n\r\n        if ( min === undefined || max === undefined ) {\r\n\r\n            max = 1;\r\n\r\n            min = 0;\r\n\r\n        }\r\n\r\n        return min + ( ( Math.random() + ( 1 / ( 1 + this.getSeed() ) ) ) %1 ) * ( max - min );\r\n\r\n    }\r\n\r\n    getRandInt ( range ) {\r\n\r\n        return Math.floor( Math.random() * range );\r\n\r\n    }\r\n\r\n    randomColor () {\r\n\r\n        return [ Math.abs( Math.random() ) , Math.abs( Math.random() ) , Math.abs( Math.random() ) ];\r\n\r\n    }\r\n\r\n    getFileExtension ( fname ) {\r\n\r\n        return fname.slice( ( ( fname.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ) ).toLowerCase();\r\n\r\n    }\r\n\r\n    /** \r\n     * Handle mouse events, in case we aren't in VR. This function\r\n     * adds mouse coordinates to the <canvas> element we are using to draw.\r\n     */\r\n    getMousePosition( canvas, e ) {\r\n\r\n        const r = canvas.getBoundingClientRect();\r\n\r\n        return { \r\n\r\n            x: e.clientX - r.left,\r\n\r\n            y: e.clientY - r.top\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Util;"
  },
  {
    "__docId__": 276,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Util",
    "memberof": "src/es6/util.es6",
    "longname": "src/es6/util.es6~Util",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/util.es6",
    "importStyle": "Util",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 277,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#constructor",
    "access": null,
    "description": "Utility functions.",
    "lineNumber": 7,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 278,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setPerformance",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#setPerformance",
    "access": null,
    "description": "Performance polyfill for timing.",
    "lineNumber": 20,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 279,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isString",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#isString",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 280,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isIFrame",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#isIFrame",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 281,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isPowerOfTwo",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#isPowerOfTwo",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 282,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "degToRad",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#degToRad",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "degrees",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 283,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getArr",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#getArr",
    "access": null,
    "description": "Get a succession of values from a flat array",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} requested elements in an Array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "a flat array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "idx",
        "description": "index into the array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "number of elements to get. This is \nalso assumed to be the 'stride' through the array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "requested elements in an Array."
    },
    "generator": false
  },
  {
    "__docId__": 284,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setArr",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#setArr",
    "access": null,
    "description": "Get an object from a 2d array. Supply a variable list of \nvalues. The number of values is assumed to be the 'walk' size \nfor the array.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "a flat array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "the stride into 2d array."
      },
      {
        "nullable": null,
        "types": [
          "...Number"
        ],
        "spread": true,
        "optional": false,
        "name": "additional",
        "description": "arguments. The array 'stride' is \nassumed equal to the number of additional parameters."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 285,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "canFlatten",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#canFlatten",
    "access": null,
    "description": "Check if an array is multi-dimensional, and needs flattening.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} if multi-dimensional, return true, else false."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "a standard JS array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "if multi-dimensional, return true, else false."
    },
    "generator": false
  },
  {
    "__docId__": 286,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "flatten",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#flatten",
    "access": null,
    "description": "Given a multi-dimensional array, flatten to \na single-dimensional one. NOTE: only works for \nArray(), not Float32Array!",
    "lineNumber": 177,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "mutable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 287,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unFlatten",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#unFlatten",
    "access": null,
    "description": "Given a flat array, convert to multi-dimensional.",
    "lineNumber": 210,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "subsize",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 288,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "concatArr",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#concatArr",
    "access": null,
    "description": "Concatenate typed and untyped arrays. if the first array is typed, \nthe second array is converted to the same type. The first array \nreceives the concatenation (no new Array is created).",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array|TypedArray} the concatenated Array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "TypedArray"
        ],
        "spread": false,
        "optional": false,
        "name": "arr1",
        "description": "the first Array."
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "TypedArray"
        ],
        "spread": false,
        "optional": false,
        "name": "arr2",
        "description": "the second Array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "TypedArray"
      ],
      "spread": false,
      "description": "the concatenated Array."
    },
    "generator": false
  },
  {
    "__docId__": 289,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSeed",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#getSeed",
    "access": null,
    "description": "Random seed.",
    "lineNumber": 306,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 290,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRand",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#getRand",
    "access": null,
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 291,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getRandInt",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#getRandInt",
    "access": null,
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 292,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "randomColor",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#randomColor",
    "access": null,
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 293,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getFileExtension",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#getFileExtension",
    "access": null,
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [
      {
        "name": "fname",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 294,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getMousePosition",
    "memberof": "src/es6/util.es6~Util",
    "longname": "src/es6/util.es6~Util#getMousePosition",
    "access": null,
    "description": "Handle mouse events, in case we aren't in VR. This function\nadds mouse coordinates to the <canvas> element we are using to draw.",
    "lineNumber": 376,
    "params": [
      {
        "name": "canvas",
        "types": [
          "*"
        ]
      },
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 295,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/webgl.es6",
    "memberof": null,
    "longname": "src/es6/webgl.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class WebGL {\r\n\r\n    /**\r\n     * References:\r\n     * LiteGL\r\n     * @link https://github.com/jagenjo/litegl.js/tree/master/src\r\n     * GL Tutorial: http://webglfundamentals.org\r\n     * HTML5 Games code: http://www.wiley.com/WileyCDA/WileyTitle/productCd-1119975085.html\r\n     * Best Practices\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices\r\n     * WebGL tests:\r\n     * @link https://www.browserleaks.com/webgl\r\n     * WebGL cross-browser:\r\n     * @link http://codeflow.org/entries/2013/feb/22/how-to-write-portable-webgl/\r\n     * Great WebGL Examples:\r\n     * http://alteredqualia.com/\r\n     * Toji: https://github.com/toji/webvr-samples\r\n     * https://github.com/toji/webvr.info/blob/master/samples/05-room-scale.html\r\n     * TWGL: @link http://twgljs.org/\r\n     * perspective Matrix\r\n     * @link http://www.rozengain.com/blog/2010/02/22/beginning-webgl-step-by-step-tutorial/ \r\n     * \r\n     * Google demos for kronos (including webworkers and particle systems)\r\n     * https://www.khronos.org/registry/webgl/sdk/demos/google/\r\n     * \r\n     * @constructor\r\n     * @param {Object} config a configuration object, set in app.js.\r\n     */\r\n\r\n    constructor ( init, glMatrix, util, debug ) {\r\n\r\n        console.log( 'in webGL class' );\r\n\r\n        this.gl = null;\r\n\r\n        this.contextCount = 0;\r\n\r\n        this.glVers = 0; \r\n\r\n        this.glMatrix = glMatrix;\r\n\r\n        this.util = util;\r\n\r\n        if ( init === true ) {\r\n\r\n            this.init( canvas );\r\n\r\n        }\r\n\r\n        // If we are running in debug mode, save the debug utils into this object.\r\n\r\n        if ( debug ) {\r\n\r\n            this.debug = debug;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Clear textures from the videocard before starting.\r\n     */\r\n    clearTextures () {\r\n\r\n        const gl = this.gl;\r\n\r\n        let len = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\r\n        for ( let i = 0; i < len; i++ ) {\r\n\r\n            gl.activeTexture( gl.TEXTURE0 + i);\r\n\r\n            gl.bindTexture( gl.TEXTURE_2D, null );\r\n\r\n            gl.bindTexture( gl.TEXTURE_CUBE_MAP, null );\r\n\r\n        }\r\n\r\n        gl.bindBuffer( gl.ARRAY_BUFFER, null );\r\n\r\n        gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, null );\r\n\r\n        gl.bindRenderbuffer( gl.RENDERBUFFER, null );\r\n\r\n        gl.bindFramebuffer( gl.FRAMEBUFFER, null );\r\n\r\n    }\r\n\r\n    /**\r\n     * initialize with a canvas context\r\n     * @param {HTMLCanvasElement|String|undefined} canvas a HTML5 <canvas>, id for canvas, or undefined, \r\n     * in which case a <canvas> object is \r\n     * created and added to document.body, an ID value for a tag, or a CanvasDOMobject.\r\n     * @param {Function} lostContext callback when WebGL context is lost.\r\n     * @param {Function} restoredContext callback when WebGL context is restored.\r\n     * @returns {WebGLContext} the WebGL context of the <canvas> object.\r\n     */\r\n    init ( canvas, lostContext, restoredContext ) {\r\n\r\n        if ( ! canvas ) { \r\n\r\n            canvas = document.createElement( 'canvas' );\r\n\r\n            canvas.width = 480;\r\n\r\n            canvas.height = 320;\r\n\r\n            // This seems to fix a bug in IE 11. TODO: remove extra empty <canvas>.\r\n\r\n            document.body.appendChild( canvas );\r\n\r\n        } else if ( this.util.isString( canvas) ) {\r\n\r\n            canvas = document.getElementById( canvas );\r\n\r\n        } else {\r\n\r\n            canvas = canvas;\r\n\r\n        }\r\n\r\n        if ( canvas ) {\r\n\r\n            // NOTE: IE10 needs this bound to DOM for the following command to work.\r\n\r\n            let r = canvas.getBoundingClientRect();\r\n\r\n            canvas.width = r.width;\r\n\r\n            canvas.height = r.height;\r\n\r\n            this.gl = this.createContext( canvas );\r\n\r\n            if ( this.gl ) {\r\n\r\n                const gl = this.gl;\r\n\r\n                /* \r\n                 * Set up listeners for context lost and regained.\r\n                 * @link https://www.khronos.org/webgl/wiki/HandlingContextLost\r\n                 * Simulate lost and restored context events with:\r\n                 * @link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/restoreContext\r\n                 * @link http://codeflow.org/entries/2013/feb/22/how-to-write-portable-webgl/\r\n                 * gl.isContextLost() also works to check\r\n                 */\r\n\r\n                canvas.addEventListener('webglcontextlost', ( e ) => {\r\n\r\n                    console.error( 'error: webglcontextlost event, context count:' + this.contextCount );\r\n\r\n                    if ( lostContext ) {\r\n\r\n                        this.gl = null;\r\n\r\n                        lostContext( e );\r\n\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                }, false );\r\n\r\n                canvas.addEventListener( 'webglcontextrestored', ( e ) => {\r\n\r\n                    console.error( 'error: webglcontextrestored event, context count:' + this.contextCount );\r\n\r\n                    if ( restoredContext ) {\r\n\r\n                        restoredContext( e );\r\n\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                }, false );\r\n\r\n                // Do an initial set of our viewport width and height.\r\n\r\n                gl.viewportWidth = canvas.width;\r\n\r\n                gl.viewportHeight = canvas.height;\r\n\r\n                // listen for <canvas> resize event.\r\n\r\n                window.addEventListener( 'resize', ( e ) => {\r\n\r\n                    this.resizeCanvas();\r\n\r\n                    e.preventDefault();\r\n\r\n                }, false );\r\n\r\n                // Default WebGL initializtion and stats, can be over-ridden in your world file.\r\n\r\n                if( gl.getParameter && gl.getShaderPrecisionFormat ) {\r\n\r\n                    this.stats = {};\r\n\r\n                    let stats = this.stats;\r\n\r\n                    // Check if high precision supported in fragment shader.\r\n\r\n                    stats.highp = (gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision );\r\n\r\n                    // Max texture size, for gl.texImage2D.                \r\n\r\n                    stats.maxTexSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\r\n                    // Max cubemap size, for gl.texImage2D.\r\n\r\n                    stats.maxCubeSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n                    // Max texture size, for gl.renderbufferStorage and canvas width/height.\r\n\r\n                    stats.maxRenderbufferSize = gl.getParameter( gl.MAX_RENDERBUFFER_SIZE );\r\n\r\n                    // Max texture units.\r\n\r\n                    stats.combinedUnits = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\r\n\r\n                    // Max vertex buffers.\r\n\r\n                    stats.maxVSattribs = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\r\n                    // Max 4-byte uniforms.\r\n\r\n                    stats.maxVertexShader = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\r\n                    // Max 4-byte uniforms.\r\n\r\n                    stats.maxFragmentShader = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n                } else {\r\n\r\n                    this.stats = false;\r\n\r\n                }\r\n\r\n                // If we're reloading, clear all current textures in the texture buffers.\r\n\r\n                this.clearTextures();\r\n\r\n\r\n                // Default 3D enables.\r\n\r\n                gl.enable( gl.DEPTH_TEST );\r\n\r\n                gl.enable( gl.CULL_FACE );\r\n\r\n                //gl.disable(gl.CULL_FACE);\r\n\r\n                gl.clearDepth(1.0);                 // Clear everything\r\n\r\n                gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n                gl.enable( gl.BLEND );              // Allow blending\r\n\r\n                // Fog NOT in Webgl use shader\r\n                //http://www.geeks3d.com/20100228/fog-in-glsl-webgl/\r\n                // http://in2gpu.com/2014/07/22/create-fog-shader/\r\n                //gl.enable( gl.FOG );\r\n\r\n                // set this for individual objects \r\n                //gl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\r\n                /* \r\n                 * IMPORTANT: tells WebGL to premultiply alphas for <canvas>\r\n                 * @link http://stackoverflow.com/questions/39251254/avoid-cpu-side-conversion-with-teximage2d-in-firefox\r\n                 */\r\n                gl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true );\r\n\r\n                gl.clearColor( 0.1, 0.1, 0.1, 1.0 );\r\n\r\n           \r\n\r\n                return this.gl;\r\n\r\n            } // end of have a gl context\r\n\r\n\r\n        } // end of if have a <canvas>\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    stats () {\r\n\r\n\r\n    }\r\n\r\n    /** \r\n     * Get WebGL canvas only if we've created a gl context.\r\n     * @returns {HTMLCanvasElement} canvas the rendering <canvas>.\r\n     */\r\n    getCanvas () {\r\n\r\n        return this.gl ? this.gl.canvas : null;\r\n\r\n    }\r\n\r\n    /** \r\n     * Resize the canvas if the window changes size. \r\n     * NOTE: affected by CSS styles.\r\n     * TODO: check current CSS style.\r\n     * (TWGL)\r\n     */\r\n    resizeCanvas () {\r\n\r\n        if ( this.ready() ) {\r\n\r\n            let f = Math.max( window.devicePixelRatio, 1 );\r\n\r\n            const gl = this.getContext();\r\n\r\n            let c = this.getCanvas();\r\n\r\n            let width  = c.clientWidth  * f | 0;\r\n\r\n            let height = c.clientHeight * f | 0;\r\n\r\n            if (c.width !== width || c.height !== height) {\r\n\r\n                c.width = width;\r\n\r\n                c.height = height;\r\n\r\n                gl.viewportWidth = c.width;\r\n\r\n                gl.viewportHeight = c.height;\r\n\r\n                gl.viewport( 0, 0, gl.viewportWidth, gl.viewportHeight );\r\n\r\n                return true;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /** \r\n     * get HTML5 canvas, and a WebGL context. We also scan for multiple \r\n     * contexts being created ( > 1 ) and delete if one is already present.\r\n     * @param {Canvas} canvas the HTML5 <canvas> DOM element.\r\n     * TODO: PROBLEM IF THERE ARE MULTIPLE CONTEXES ON THE PAGE???????\r\n     * @param {HTMLCanvasElement} canvas the rendering <canvas>.\r\n     * @returns {WebGLRenderingContext} gl a WebGLRenderingContext.\r\n     */\r\n    createContext ( canvas ) {\r\n\r\n        if ( ! window.WebGLRenderingContext ) {\r\n\r\n            console.error( 'this browser does not support webgl' );\r\n\r\n            return null;\r\n\r\n        }\r\n\r\n        let gl = null;\r\n\r\n        if ( gl && this.contextCount > 0 ) {\r\n\r\n            // Contexts are normally in garbage, can't be deleted without this!\r\n\r\n            console.warn( 'killing context' );\r\n\r\n            this.killContext();\r\n\r\n            this.contextCount--;\r\n\r\n            this.gl = null; // just in case\r\n\r\n        }\r\n\r\n        let n = [ 'webgl2', 'experimental-webgl2', 'webgl', 'experimental-webgl' ];\r\n\r\n        let i = 0;\r\n\r\n        while ( i < n.length ) {\r\n\r\n            try {\r\n\r\n                if ( this.debug ) {\r\n\r\n                    gl = this.debug.makeDebugContext( canvas.getContext( n[ i ] ) );\r\n\r\n                    if ( gl ) {\r\n\r\n                        console.warn( 'using debug context' );\r\n\r\n                        if ( gl.getParameter !== 'function' ) {\r\n\r\n                            gl = canvas.getContext( n[ i ] );\r\n\r\n                            console.warn( 'unable to use debug context, trying release:' + n[ i ], ' getParameter:' + gl.getParameter );\r\n                        }\r\n\r\n                        break;\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    gl = canvas.getContext( n[ i ] );\r\n\r\n                    if ( gl ) {\r\n\r\n                        console.warn ( 'using release context mode:' + n[ i ] );\r\n\r\n                        break;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } catch( e ) {\r\n\r\n                console.warn( 'failed to load context:' + n[ i ] );\r\n\r\n            }\r\n\r\n            i++;\r\n\r\n        } // end of while loop\r\n\r\n\r\n        /*\r\n         * If we got a context, assign WebGL version. Note that some \r\n         * experimental versions don't have .getParameter\r\n         */\r\n\r\n        if ( gl && typeof gl.getParameter == 'function' ) {\r\n\r\n            this.contextCount++;\r\n\r\n            this.gl = gl;\r\n\r\n            // Check if this is a full WebGL2 stack\r\n\r\n            this.glVers = gl.getParameter( gl.VERSION ).toLowerCase();\r\n\r\n            if ( i == 1 || i == 3 ) {\r\n\r\n                console.warn( 'experimental context, .getParameter() may not work' );\r\n\r\n            }\r\n\r\n            console.log( 'version:' + gl.getParameter( gl.VERSION));\r\n\r\n            // Take action, depending on version (identified by pos in our test array n).\r\n\r\n            switch ( i ) {\r\n\r\n                case 0:\r\n                case 1:\r\n                    //if ( ! gl.TRANSFORM_FEEDBACK ) {\r\n                    // revert to 1.0\r\n                    //    console.log(\"TRANSFORM FEEDBACK NOT SUPPORTED\")\r\n                    //}\r\n                    this.glVers = 2.0;\r\n                    break;\r\n\r\n                    case 2:\r\n                    case 3:\r\n                        this.glVers = 1.0;\r\n                        this.addVertexBufferSupport( gl );\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        return this.gl;\r\n\r\n    }\r\n\r\n    /** \r\n     * Return the current context. Note that we don't store a \r\n     * separate reference to the canvas.\r\n     * @returns {WebGLRenderingContext} gl a WebGLRenderingContext.\r\n     */\r\n    getContext () {\r\n\r\n        if ( ! this.gl ) {\r\n\r\n            console.warn( 'warning webgl context not initialized' );\r\n\r\n        }\r\n\r\n        return this.gl;\r\n\r\n    }\r\n\r\n    /** \r\n     * Kill the current context (complete reset will be needed). Also use to debug \r\n     * when context is lost, and has to be rebuilt.\r\n     * @link http://codeflow.org/entries/2013/feb/22/how-to-write-portable-webgl/\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/loseContext\r\n     */\r\n    killContext () {\r\n\r\n        console.log('in killcontext, count:' + this.contextCount);\r\n\r\n        if ( this.contextCount ) {\r\n\r\n            console.log( 'killing WebGL context, count before:' + this.contextCount );\r\n\r\n            this.gl.getExtension( 'WEBGL_lose_context' ).loseContext();\r\n\r\n            this.contextCount--;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * check if we have a contex and are ready to render.\r\n     */\r\n    ready () {\r\n\r\n        const gl = this.gl;\r\n\r\n        return ( !! ( this.gl && this.glMatrix ) );\r\n\r\n    }\r\n\r\n    /** \r\n     * Clear the screen prior to redraw.\r\n     */\r\n    clear () {\r\n\r\n        const gl = this.gl;\r\n\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        /////////////////////gl.viewport( 0, 0, gl.viewportWidth, gl.viewportHeight );\r\n\r\n    }\r\n\r\n    /** \r\n     * Add vertex buffer support to WebGL 1.0\r\n     * @param {WebGLRenderingContext} gl a WebGL rendering context (should be 1.x only)l\r\n     */\r\n    addVertexBufferSupport ( gl ) {\r\n\r\n         const ext = gl.getExtension( 'OES_vertex_array_object' );\r\n\r\n        if ( ext ) {\r\n\r\n            gl.createVertexArray = function() {\r\n\r\n                return ext.createVertexArrayOES();\r\n\r\n            };\r\n\r\n            gl.deleteVertexArray = function(v) {\r\n\r\n                ext.deleteVertexArrayOES(v);\r\n\r\n            };\r\n\r\n            gl.isVertexArray = function(v) {\r\n\r\n                return ext.isVertexArrayOES(v);\r\n\r\n            };\r\n\r\n            gl.bindVertexArray = function(v) {\r\n\r\n                ext.bindVertexArrayOES(v);\r\n\r\n            };\r\n\r\n            gl.VERTEX_ARRAY_BINDING = ext.VERTEX_ARRAY_BINDING_OES;\r\n\r\n         }\r\n\r\n    }\r\n\r\n    /** \r\n     * create a WeGL shader object.\r\n     * @param {VERTEX_SHADER | FRAGMENT_SHADER} type type WebGL shader type.\r\n     * @param {String} source the shader source, as plain text.\r\n     * @returns {WebGLShader} a compiled WebGL shader object.\r\n     */\r\n    createShader ( type, source ) {\r\n\r\n        let shader = null;\r\n\r\n        if ( ! type || ! source ) {\r\n\r\n            console.error( 'createShader: invalid params, type:' + type + ' source:' + source );\r\n\r\n        } else if ( this.ready() ) {\r\n\r\n            const gl = this.gl;\r\n\r\n            /*\r\n             * remove first EOL, which might come from using <script>...</script> tags,\r\n             * to handle GLSL ES 3.00 (TWGL)\r\n             */\r\n            source.replace( /^[ \\t]*\\n/, '' );\r\n\r\n            if ( type === gl.VERTEX_SHADER ) {\r\n\r\n                shader = gl.createShader( type ); // assigned VS\r\n\r\n            } else if ( type === gl.FRAGMENT_SHADER ) {\r\n\r\n                shader = gl.createShader( type ); // assigned FS\r\n\r\n            } else {\r\n\r\n                console.error( 'createShader: type not recognized:' + type );\r\n            }\r\n\r\n            gl.shaderSource( shader, source );\r\n\r\n            gl.compileShader( shader );\r\n\r\n            // Detect shader compile errors.\r\n\r\n            if ( ! gl.getShaderParameter( shader, gl.COMPILE_STATUS ) ) {\r\n\r\n                console.error( 'createShader:' + gl.getShaderInfoLog( shader ) );\r\n\r\n                shader = null;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return shader;\r\n\r\n    }\r\n\r\n    createVertexShader ( source ) {\r\n\r\n        return this.createShader( this.gl.VERTEX_SHADER, source );\r\n\r\n    }\r\n\r\n    createFragmentShader ( source ) {\r\n\r\n        return this.createShader( this.gl.FRAGMENT_SHADER, source );\r\n\r\n    }\r\n\r\n    /** \r\n     * Use the Fetch API to get a shader file\r\n     */\r\n    fetchShader ( type, sourceURL ) {\r\n\r\n        const self = this;\r\n\r\n        fetch( sourceURL, {\r\n\r\n            method: 'POST',\r\n\r\n            mode: 'cors',\r\n\r\n            redirect: 'follow',\r\n\r\n            headers: new Headers({\r\n\r\n                'Content-Type': 'text/plain'\r\n\r\n            } )\r\n\r\n        } ).then( function( response ) { \r\n\r\n            console.log(text);\r\n\r\n            if ( response.ok ) {\r\n\r\n                return response.text();\r\n\r\n            }\r\n\r\n            return false;\r\n\r\n        } ).then( function( source ) { \r\n\r\n            if ( source ) {\r\n\r\n                return self.createShader( type, source );\r\n\r\n            }\r\n\r\n        } );\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n    fetchVertexShader ( sourceURL ) {\r\n\r\n        return this.fetchShader( this.gl.VERTEX_SHADER, sourceURL );\r\n\r\n    }\r\n\r\n    fetchFragmentShader ( sourceURL ) {\r\n\r\n        return this.fetchShader( this.gl.FRAGMENT_SHADER, sourceURL );\r\n\r\n    }\r\n\r\n    /** \r\n     * create shader form script element\r\n     * @param {String|DOMElement} tag the script element, or its id\r\n     */\r\n    createShaderFromTag ( tag ) {\r\n\r\n        if ( this.util.isString( tag ) ) {\r\n\r\n            tag = document.getElementById( tag );\r\n\r\n        }\r\n\r\n        if ( ! tag ) {\r\n\r\n            console.error( 'createShaderFromTag: not found (' + tag + ')' );\r\n\r\n            return false;\r\n\r\n        } \r\n\r\n        let type = null;\r\n\r\n        if ( tag.type ==  'x-shader/x-vertex' ) {\r\n\r\n            type = this.gl.VERTEX_SHADER;\r\n\r\n        } else if ( tag.type == 'x-shader/x-fragment' ) {\r\n\r\n            type = this.gl.FRAGMENT_SHADER;\r\n\r\n        } else {\r\n\r\n            console.error( 'createShaderFromTag: type not found:(' + tag.type + ')');\r\n\r\n            return null;\r\n\r\n        }\r\n\r\n        let source = \"\";\r\n\r\n        let c = tag.firstChild;\r\n\r\n        while ( c ) {\r\n\r\n            if ( c.nodeType == 3 ) {\r\n\r\n                source += c.textContent;\r\n\r\n            }\r\n\r\n            c = c.nextSibling;\r\n\r\n        }\r\n\r\n        return this.createShader( type, source );\r\n\r\n    }\r\n\r\n    /** \r\n     * Create WebGL program with shaders. Program not used until \r\n     * we apply gl.useProgram(program).\r\n     * @param {gl.VERTEX_SHADER} vShader the vertex shader.\r\n     * @param {gl.FRAGMENT_SHADER} fShader the fragment shader.\r\n     */\r\n    createProgram ( vs, fs ) {\r\n\r\n        if ( ! vs || ! fs ) {\r\n\r\n            console.error( 'createProgram: parameter error, vs:' + vs + ' fs:' + fs );\r\n\r\n            return null;\r\n\r\n        }\r\n\r\n        // Wrap the program object to make V8 happy.\r\n\r\n        let prg = {};\r\n\r\n        if ( this.ready() ) {\r\n\r\n            const gl = this.gl;\r\n\r\n            let vso = this.createVertexShader( vs.code );\r\n\r\n            let fso = this.createFragmentShader( fs.code );\r\n\r\n            let program = gl.createProgram();\r\n\r\n            gl.attachShader( program, vso );\r\n\r\n            gl.attachShader( program, fso );\r\n\r\n            gl.linkProgram( program );\r\n\r\n            if ( ! gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\r\n\r\n                console.error( 'createProgram:' + gl.getProgramInfoLog( program ) );\r\n\r\n                this.checkShaders( vs, fs, program );\r\n\r\n            } else {\r\n\r\n                prg.shaderProgram = program;\r\n\r\n                prg.vsVars = vs.varList,\r\n\r\n                prg.fsVars = fs.varList\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return prg;\r\n\r\n    }\r\n\r\n\r\n     /** \r\n      * Read shader code, and organize the variables in the shader \r\n      * into an object. Abstracts some of the tedious work in setting \r\n      * up shader variables.\r\n      * @param {Array} sourceArr array of lines in the shader.\r\n      * @returns {Object} an object organizing attribute, uniform, and \r\n      * varying variable names and datatypes.\r\n      */\r\n    createVarList ( source ) {\r\n\r\n        const len = source.length;\r\n\r\n        let sp = ' ';\r\n\r\n        let list = {};\r\n\r\n        let varTypes = ['attribute', 'uniform', 'varying' ];\r\n\r\n        if( len ) {\r\n\r\n            for ( let i = 0; i < len; i++ ) {\r\n\r\n                let s = source[ i ];\r\n\r\n                if ( s.indexOf( 'void main' ) !== -1 ) {\r\n \r\n                    break;\r\n\r\n                } else {\r\n\r\n                    for ( let j = 0; j < varTypes.length; j++ ) {\r\n\r\n                        let type = varTypes[j];\r\n\r\n                        if( ! list[ type ] ) list[ type ] = {};\r\n\r\n                        if ( s.indexOf( type ) > -1 ) {\r\n\r\n                            //////////////////////////////console.log(\"SSS1:\" + s)\r\n\r\n                            //s = s.slice(0, -1); // remove trailing ';'\r\n                            s = s.replace(/;\\s*$/, \"\");\r\n\r\n                            ///////////////////////////////console.log(\"SSS:\" + s)\r\n\r\n                            s = s.split( sp );\r\n\r\n                            //////////////////////////////console.log(\"FIRST: \" + s)\r\n\r\n                            let vType = s.shift(); // attribute, uniform, or varying\r\n\r\n                            if ( ! list[ vType ] ) {\r\n\r\n                                list[ vType ] = {};\r\n\r\n                            }\r\n\r\n                            /////////////////////////console.log(\"SECOND AFTER SHIFT:\" + vType + \" remainder:\" + s)\r\n\r\n                            let nType = s.shift(); // variable type\r\n\r\n                            if ( ! list[ vType ][ nType ] ) {\r\n\r\n                                list[ vType ][ nType ] = {};\r\n                            }\r\n\r\n                            let nName = s.shift(); // variable name\r\n\r\n                            if ( ! list[ vType ][ nType ][ nName ] ) {\r\n\r\n                                list[ vType ][ nType ][ nName ] = 'empty';\r\n\r\n                            }\r\n\r\n                            /////////////////////////console.log(\"THIRD AFTER SHIFT:\" + nType + \" remainder:\" + s)\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } \r\n\r\n        }\r\n\r\n        return list;\r\n\r\n    }\r\n\r\n    /** \r\n     * assign the attribute arrays.\r\n     */\r\n    setAttributeArrays ( shaderProgram, attributes ) {\r\n\r\n        const gl = this.gl;\r\n\r\n        for ( let i in attributes ) {\r\n\r\n            let attb = attributes[ i ];\r\n\r\n            // Note: we call glEnableAttribArray only when rendering\r\n\r\n            for ( let j in attb ) {\r\n\r\n                attb[ j ] = gl.getAttribLocation( shaderProgram, j );\r\n\r\n                //////////console.log('gl.getAttribLocation( shaderProgram, \"' + j + '\" ) is:' + attb[ j ] );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return attributes;\r\n\r\n    }\r\n\r\n    setUniformLocations ( shaderProgram, uniforms ) {\r\n\r\n        const gl = this.gl;\r\n\r\n        for ( let i in uniforms ) {\r\n\r\n            let unif = uniforms[ i ];\r\n\r\n            for ( let j in unif ) {\r\n\r\n                unif[ j ] = gl.getUniformLocation( shaderProgram, j );\r\n\r\n                ////////console.log(\"gl.getUniformLocation( shaderProgram,\" + j + \") is:\" + unif[ j ] );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return uniforms;\r\n\r\n    }\r\n\r\n    /** \r\n     * Bind attribute locations.\r\n     * @param {WebGLProgram} program a compiled WebGL program.\r\n     * @param {Object} attribLocationmap the attributes.\r\n     */\r\n    bindAttributeLocations ( program, attribLocationMap ) {\r\n\r\n        const gl = this.gl;\r\n\r\n        if ( attribLocationMap ) {\r\n\r\n            for ( let attribName in attribLocationMap ) {\r\n\r\n                console.log('binding attribute:' + attribName + ' to:' + attribLocationMap[attribName]);\r\n\r\n                gl.bindAttribLocation( program, attribLocationMap[ attribName ], attribName );\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            console.warn( 'webgl.bindAttributes: no attributes supplied' );\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Create associative array with shader attributes.\r\n     * NOTE: Only attributes actually used in the shader show.\r\n     * @param {WebGLProgram} program a compiled WebGL program.\r\n     * @returns {Object} a collection of attributes, with .count = number.\r\n     */\r\n    getAttributes ( program ) {\r\n\r\n        const gl = this.gl;\r\n\r\n        let attrib = {};\r\n\r\n        let attribCount = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n        for ( let i = 0; i < attribCount; i++ ) {\r\n\r\n            let attribInfo = gl.getActiveAttrib( program, i );\r\n\r\n            /////////console.log(\"adding attribute:\" + attribInfo.name );\r\n\r\n            attrib[ attribInfo.name ] = gl.getAttribLocation( program, attribInfo.name );\r\n\r\n        }\r\n\r\n        // Store the number of attributes.\r\n\r\n        attrib.count = attribCount;\r\n\r\n        return attrib;\r\n\r\n    }\r\n\r\n    /** \r\n     * Create associative array with shader uniforms.\r\n     * NOTE: Only attributes actually used in the shader show.\r\n     * @param {WebGLProgram} program a compiled WebGL program.\r\n     * @returns {Object} a collection of attributes, with .count = number.\r\n     */\r\n    getUniforms ( program ) {\r\n\r\n        const gl = this.gl;\r\n\r\n        let uniform = {};\r\n\r\n        let uniformCount = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n        let uniformName = '';\r\n\r\n        for ( let i = 0; i < uniformCount; i++ ) {\r\n\r\n            let uniformInfo = gl.getActiveUniform( program, i );\r\n\r\n            uniformName = uniformInfo.name.replace( '[0]', '' );\r\n\r\n            console.log(\"adding uniform:\" + uniformName );\r\n\r\n            uniform[ uniformName ] = gl.getUniformLocation( program, uniformName );\r\n\r\n        }\r\n\r\n        // Store the number of uniforms.\r\n\r\n        uniform.count = uniformCount;\r\n\r\n        return uniform;\r\n\r\n    }\r\n\r\n    /** \r\n     * Create associative array with shader varying variables.\r\n     */\r\n    getVarying ( program ) {\r\n\r\n    }\r\n\r\n    /** \r\n     * check to see if we're ready to run, after supplying \r\n     * shaders.\r\n     */\r\n    checkShaders ( vs, fs, program ) {\r\n\r\n        const gl = this.gl;\r\n\r\n        if ( ! gl.getProgramParameter( program, gl.LINK_STATUS ) ) {\r\n\r\n            // Test the vertex shader\r\n\r\n             if ( vs && ! gl.getShaderParameter( vs, gl.COMPILE_STATUS ) ) {\r\n\r\n                console.error( 'error creating the vertex shader, ' + gl.getShaderInfoLog( vs ) );\r\n\r\n            } else if ( fs && !gl.getShaderParameter( fs, gl.COMPILE_STATUS ) ) {\r\n\r\n                console.error(  'error creating the fragment shader, ' + gl.getShaderInfoLog( fs ) );\r\n\r\n            } else {\r\n\r\n                console.error( 'error in gl program linking' );\r\n\r\n            }\r\n\r\n            gl.deleteProgram( program );\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /** \r\n     * Check if our VBO, IBO are ok.\r\n     */\r\n    checkBufferObjects ( bo ) {\r\n\r\n        return ( bo && bo instanceof ArrayBuffer );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default WebGL;"
  },
  {
    "__docId__": 296,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "WebGL",
    "memberof": "src/es6/webgl.es6",
    "longname": "src/es6/webgl.es6~WebGL",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/webgl.es6",
    "importStyle": "WebGL",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 297,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#constructor",
    "access": null,
    "description": "References:\nLiteGL",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://github.com/jagenjo/litegl.js/tree/master/src\nGL Tutorial: http://webglfundamentals.org\nHTML5 Games code: http://www.wiley.com/WileyCDA/WileyTitle/productCd-1119975085.html\nBest Practices"
      },
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices\nWebGL tests:"
      },
      {
        "tagName": "@link",
        "tagValue": "https://www.browserleaks.com/webgl\nWebGL cross-browser:"
      },
      {
        "tagName": "@link",
        "tagValue": "http://codeflow.org/entries/2013/feb/22/how-to-write-portable-webgl/\nGreat WebGL Examples:\nhttp://alteredqualia.com/\nToji: https://github.com/toji/webvr-samples\nhttps://github.com/toji/webvr.info/blob/master/samples/05-room-scale.html\nTWGL: @link http://twgljs.org/\nperspective Matrix"
      },
      {
        "tagName": "@link",
        "tagValue": "http://www.rozengain.com/blog/2010/02/22/beginning-webgl-step-by-step-tutorial/ \n\nGoogle demos for kronos (including webworkers and particle systems)\nhttps://www.khronos.org/registry/webgl/sdk/demos/google/"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "a configuration object, set in app.js."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 298,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#gl",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "contextCount",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#contextCount",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glVers",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#glVers",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glMatrix",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#glMatrix",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#util",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "debug",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#debug",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clearTextures",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#clearTextures",
    "access": null,
    "description": "Clear textures from the videocard before starting.",
    "lineNumber": 63,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 305,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#init",
    "access": null,
    "description": "initialize with a canvas context",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WebGLContext} the WebGL context of the <canvas> object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement",
          "String",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "a HTML5 <canvas>, id for canvas, or undefined, \nin which case a <canvas> object is \ncreated and added to document.body, an ID value for a tag, or a CanvasDOMobject."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "lostContext",
        "description": "callback when WebGL context is lost."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "restoredContext",
        "description": "callback when WebGL context is restored."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WebGLContext"
      ],
      "spread": false,
      "description": "the WebGL context of the <canvas> object."
    },
    "generator": false
  },
  {
    "__docId__": 306,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#gl",
    "access": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#gl",
    "access": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stats",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#stats",
    "access": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stats",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#stats",
    "access": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stats",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#stats",
    "access": null,
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 311,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCanvas",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#getCanvas",
    "access": null,
    "description": "Get WebGL canvas only if we've created a gl context.",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HTMLCanvasElement} canvas the rendering <canvas>."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": "canvas the rendering <canvas>."
    },
    "generator": false
  },
  {
    "__docId__": 312,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resizeCanvas",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#resizeCanvas",
    "access": null,
    "description": "Resize the canvas if the window changes size. \nNOTE: affected by CSS styles.\nTODO: check current CSS style.\n(TWGL)",
    "lineNumber": 308,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 313,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createContext",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createContext",
    "access": null,
    "description": "get HTML5 canvas, and a WebGL context. We also scan for multiple \ncontexts being created ( > 1 ) and delete if one is already present.",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WebGLRenderingContext} gl a WebGLRenderingContext."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Canvas"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "the HTML5 <canvas> DOM element.\nTODO: PROBLEM IF THERE ARE MULTIPLE CONTEXES ON THE PAGE???????"
      },
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "the rendering <canvas>."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WebGLRenderingContext"
      ],
      "spread": false,
      "description": "gl a WebGLRenderingContext."
    },
    "generator": false
  },
  {
    "__docId__": 314,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#gl",
    "access": null,
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "gl",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#gl",
    "access": null,
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glVers",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#glVers",
    "access": null,
    "description": null,
    "lineNumber": 443,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glVers",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#glVers",
    "access": null,
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glVers",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#glVers",
    "access": null,
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getContext",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#getContext",
    "access": null,
    "description": "Return the current context. Note that we don't store a \nseparate reference to the canvas.",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WebGLRenderingContext} gl a WebGLRenderingContext."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "WebGLRenderingContext"
      ],
      "spread": false,
      "description": "gl a WebGLRenderingContext."
    },
    "generator": false
  },
  {
    "__docId__": 320,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "killContext",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#killContext",
    "access": null,
    "description": "Kill the current context (complete reset will be needed). Also use to debug \nwhen context is lost, and has to be rebuilt.",
    "lineNumber": 506,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "http://codeflow.org/entries/2013/feb/22/how-to-write-portable-webgl/"
      },
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context/loseContext"
      }
    ],
    "params": [],
    "generator": false
  },
  {
    "__docId__": 321,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ready",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#ready",
    "access": null,
    "description": "check if we have a contex and are ready to render.",
    "lineNumber": 525,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 322,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#clear",
    "access": null,
    "description": "Clear the screen prior to redraw.",
    "lineNumber": 536,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 323,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addVertexBufferSupport",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#addVertexBufferSupport",
    "access": null,
    "description": "Add vertex buffer support to WebGL 1.0",
    "lineNumber": 550,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGLRenderingContext"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "a WebGL rendering context (should be 1.x only)l"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 324,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createShader",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createShader",
    "access": null,
    "description": "create a WeGL shader object.",
    "lineNumber": 592,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WebGLShader} a compiled WebGL shader object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "VERTEX_SHADER ",
          " FRAGMENT_SHADER"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "type WebGL shader type."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "the shader source, as plain text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WebGLShader"
      ],
      "spread": false,
      "description": "a compiled WebGL shader object."
    },
    "generator": false
  },
  {
    "__docId__": 325,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createVertexShader",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createVertexShader",
    "access": null,
    "description": null,
    "lineNumber": 643,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 326,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createFragmentShader",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createFragmentShader",
    "access": null,
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 327,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fetchShader",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#fetchShader",
    "access": null,
    "description": "Use the Fetch API to get a shader file",
    "lineNumber": 658,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "sourceURL",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 328,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fetchVertexShader",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#fetchVertexShader",
    "access": null,
    "description": null,
    "lineNumber": 702,
    "undocument": true,
    "params": [
      {
        "name": "sourceURL",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 329,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fetchFragmentShader",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#fetchFragmentShader",
    "access": null,
    "description": null,
    "lineNumber": 708,
    "undocument": true,
    "params": [
      {
        "name": "sourceURL",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 330,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createShaderFromTag",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createShaderFromTag",
    "access": null,
    "description": "create shader form script element",
    "lineNumber": 718,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "DOMElement"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "the script element, or its id"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 331,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createProgram",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createProgram",
    "access": null,
    "description": "Create WebGL program with shaders. Program not used until \nwe apply gl.useProgram(program).",
    "lineNumber": 778,
    "params": [
      {
        "nullable": null,
        "types": [
          "gl.VERTEX_SHADER"
        ],
        "spread": false,
        "optional": false,
        "name": "vShader",
        "description": "the vertex shader."
      },
      {
        "nullable": null,
        "types": [
          "gl.FRAGMENT_SHADER"
        ],
        "spread": false,
        "optional": false,
        "name": "fShader",
        "description": "the fragment shader."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 332,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createVarList",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#createVarList",
    "access": null,
    "description": "Read shader code, and organize the variables in the shader \ninto an object. Abstracts some of the tedious work in setting \nup shader variables.",
    "lineNumber": 839,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} an object organizing attribute, uniform, and \nvarying variable names and datatypes."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceArr",
        "description": "array of lines in the shader."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "an object organizing attribute, uniform, and \nvarying variable names and datatypes."
    },
    "generator": false
  },
  {
    "__docId__": 333,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setAttributeArrays",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#setAttributeArrays",
    "access": null,
    "description": "assign the attribute arrays.",
    "lineNumber": 924,
    "params": [
      {
        "name": "shaderProgram",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 334,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setUniformLocations",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#setUniformLocations",
    "access": null,
    "description": null,
    "lineNumber": 948,
    "undocument": true,
    "params": [
      {
        "name": "shaderProgram",
        "types": [
          "*"
        ]
      },
      {
        "name": "uniforms",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 335,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "bindAttributeLocations",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#bindAttributeLocations",
    "access": null,
    "description": "Bind attribute locations.",
    "lineNumber": 975,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGLProgram"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "a compiled WebGL program."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "attribLocationmap",
        "description": "the attributes."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 336,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getAttributes",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#getAttributes",
    "access": null,
    "description": "Create associative array with shader attributes.\nNOTE: Only attributes actually used in the shader show.",
    "lineNumber": 1003,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} a collection of attributes, with .count = number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGLProgram"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "a compiled WebGL program."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a collection of attributes, with .count = number."
    },
    "generator": false
  },
  {
    "__docId__": 337,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getUniforms",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#getUniforms",
    "access": null,
    "description": "Create associative array with shader uniforms.\nNOTE: Only attributes actually used in the shader show.",
    "lineNumber": 1035,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} a collection of attributes, with .count = number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGLProgram"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "a compiled WebGL program."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a collection of attributes, with .count = number."
    },
    "generator": false
  },
  {
    "__docId__": 338,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getVarying",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#getVarying",
    "access": null,
    "description": "Create associative array with shader varying variables.",
    "lineNumber": 1068,
    "params": [
      {
        "name": "program",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 339,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkShaders",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#checkShaders",
    "access": null,
    "description": "check to see if we're ready to run, after supplying \nshaders.",
    "lineNumber": 1076,
    "params": [
      {
        "name": "vs",
        "types": [
          "*"
        ]
      },
      {
        "name": "fs",
        "types": [
          "*"
        ]
      },
      {
        "name": "program",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 340,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkBufferObjects",
    "memberof": "src/es6/webgl.es6~WebGL",
    "longname": "src/es6/webgl.es6~WebGL#checkBufferObjects",
    "access": null,
    "description": "Check if our VBO, IBO are ok.",
    "lineNumber": 1111,
    "params": [
      {
        "name": "bo",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 341,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/es6/webvr.es6",
    "memberof": null,
    "longname": "src/es6/webvr.es6",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class WebVR {\r\n\r\n    constructor ( init, util, glMatrix, webgl  ) {\r\n\r\n        console.log( 'in webVR class' );\r\n\r\n        this.util = util;\r\n\r\n        this.glMatrix = glMatrix;\r\n\r\n        this.webgl = webgl;\r\n\r\n        if ( this.init === true ) {\r\n\r\n            // Do something.\r\n\r\n        }\r\n\r\n    }\r\n\r\n    init () {\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default WebVR;"
  },
  {
    "__docId__": 342,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "WebVR",
    "memberof": "src/es6/webvr.es6",
    "longname": "src/es6/webvr.es6~WebVR",
    "access": null,
    "export": true,
    "importPath": "webvr-mini/src/es6/webvr.es6",
    "importStyle": "WebVR",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 343,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/es6/webvr.es6~WebVR",
    "longname": "src/es6/webvr.es6~WebVR#constructor",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "init",
        "types": [
          "*"
        ]
      },
      {
        "name": "util",
        "types": [
          "*"
        ]
      },
      {
        "name": "glMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "webgl",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 344,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "util",
    "memberof": "src/es6/webvr.es6~WebVR",
    "longname": "src/es6/webvr.es6~WebVR#util",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "glMatrix",
    "memberof": "src/es6/webvr.es6~WebVR",
    "longname": "src/es6/webvr.es6~WebVR#glMatrix",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "webgl",
    "memberof": "src/es6/webvr.es6~WebVR",
    "longname": "src/es6/webvr.es6~WebVR#webgl",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "init",
    "memberof": "src/es6/webvr.es6~WebVR",
    "longname": "src/es6/webvr.es6~WebVR#init",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 348,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/js/app.js",
    "memberof": null,
    "longname": "src/js/app.js",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "content": "/*\r\n * app.js\r\n * main entry point for this application. Uses \r\n * ES5 syntax (es6 will be transpiled). Central \r\n * point for including both ES5 and ES6 libraries.\r\n */\r\nconsole.log( 'in app.js' );\r\n\r\n// DEV ENVIRONMENT.\r\n\r\nvar env = process.env.WEBPACK_ENV;\r\n\r\n// REQUIRE ALL .es6 files.\r\n\r\nvar vrmini = require( '../es6/app.es6' );\r\n\r\n// Check ES6 module structure.\r\n\r\nfor (var i in vrmini ) {\r\n\r\n    console.log( i + \":\" + vrmini[i] );\r\n}\r\n\r\n/* \r\n * these variables are defined by webpack inputs in package.json, \r\n * and processed to __DEV__ and __RELEASE__ here.\r\n * \"build\": \"cross-env BUILD_RELEASE=true BUILD_DEV=false webpack --config webpack-production.config.js -p -p\",\r\n * \"dev\": \"cross-env BUILD_RELEASE=false BUILD_DEV=true webpack\",\r\n */\r\n\r\nif ( __DEV__ === 'true' ) {\r\n\r\n    console.warn('app.js: in development mode...');\r\n\r\n} else if ( __RELEASE__ === 'true' ) {\r\n\r\n    console.warn('in release mode');\r\n\r\n}\r\n\r\n// EXPOSE IN BROWSER WINDOW OBJECT\r\n\r\nwindow.vrmini = vrmini;\r\n\r\nconsole.log(\"Window.vrmini:\" + vrmini );\r\n\r\n\r\n\r\n"
  },
  {
    "__docId__": 349,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "env",
    "memberof": "src/js/app.js",
    "longname": "src/js/app.js~env",
    "access": null,
    "export": false,
    "importPath": "webvr-mini",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "vrmini",
    "memberof": "src/js/app.js",
    "longname": "src/js/app.js~vrmini",
    "access": null,
    "export": false,
    "importPath": "webvr-mini",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 353,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 354,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 355,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 356,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 357,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 358,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 359,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 360,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 361,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 362,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 363,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 364,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 365,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 366,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 367,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 368,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 369,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 370,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 371,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 372,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 373,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 374,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 375,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 376,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 377,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 378,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 379,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 380,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 381,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 382,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 383,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 384,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 385,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 386,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 387,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 388,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 389,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 390,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 391,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 392,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 393,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 394,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 395,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 396,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 397,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 398,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 400,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 401,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 402,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 403,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 404,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 405,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 406,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 407,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]